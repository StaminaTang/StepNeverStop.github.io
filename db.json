{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/Kicon.jpg","path":"images/Kicon.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546398377000},{"_id":"source/.DS_Store","hash":"e306a5b8de31321aab1138b5403b41ef567f3fce","modified":1546415201000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1546668615945},{"_id":"source/robots.txt","hash":"2bd0324ddb031aa7eaa53529c9e9e66227d488b4","modified":1557449937104},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1546668615945},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1546668615946},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1546668615950},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1546668615951},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1546668615951},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1546668615950},{"_id":"themes/next/Gemfile","hash":"82e6fee493ac9365ba321b19a14a34f5b381d1c6","modified":1546668615953},{"_id":"themes/next/.DS_Store","hash":"c9c42be7a62ae06aa482d3a2916812fd3fc82734","modified":1546419515000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1546668615952},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1546668615953},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1546668615954},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1546668615955},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1546668615957},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1546668615957},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1546668616026},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1546668615955},{"_id":"themes/next/_config.yml","hash":"409e01323941ee81ec242db13432cd89175cacd5","modified":1557458030091},{"_id":"source/_data/menu.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668615834},{"_id":"themes/next/test.md","hash":"b01e235b7eb01d49b8e741b27215954a7662f0d4","modified":1546668616278},{"_id":"source/about/index.md","hash":"2cd2c3098ffb6f1396f826fbbd17950ac2ca631c","modified":1546668615877},{"_id":"source/categories/.DS_Store","hash":"894a1066d062f778f4734ec041b15051406bc25f","modified":1546414948000},{"_id":"source/about/.DS_Store","hash":"8089fd692eb879a00b8114dae892e0f2dc5dc215","modified":1546415177000},{"_id":"source/categories/index.md","hash":"4a1bc030bc1ac3291951eb91a9c528559cdf9a21","modified":1546668615878},{"_id":"source/_posts/.DS_Store","hash":"8df1c6f9b9ff204f76344b33ee1490566113fea6","modified":1546412314000},{"_id":"source/_posts/Docker命令学习.md","hash":"459604441261ad47d6b7a8520e4fd082699d9156","modified":1557747943286},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary.md","hash":"863cda6458482a812d7b7a75db8371c817b990af","modified":1557747672603},{"_id":"source/_posts/Git-learn.md","hash":"bbd8d66ad2135982830c2175557f54cd85dfe5ab","modified":1557748031340},{"_id":"source/_posts/Evolution-Strategies-2017.md","hash":"7cc3ee4491b09fa5eca45abae0d76bf679e3c781","modified":1558443870714},{"_id":"source/_posts/conda环境和pip包的转移.md","hash":"8d0f46415a745b1b96c7e31664fa70cecda989f6","modified":1557747739949},{"_id":"source/_posts/MarkDown-Grammar.md","hash":"db23df417f9ed4c04db0c4790458f21e2cbb589e","modified":1557748145906},{"_id":"source/_posts/mc-td.md","hash":"be054820650ded85517dba334ce3b7436d8d335c","modified":1557751422482},{"_id":"source/_posts/create-sniper-docker-image.md","hash":"0a3601fd24b9a8fcde11d1a28f86630a492cf2f5","modified":1557747874919},{"_id":"source/_posts/dynamic-programming.md","hash":"6a79691e9089b7d02e36bdef5cde630b8e610a55","modified":1557751348856},{"_id":"source/_posts/rl-classification.md","hash":"e00add5dcf4203ac2ce5509fc2364500a1f0f1bd","modified":1557750628146},{"_id":"source/_posts/something-hard-install-docker.md","hash":"aa872782f5a7c1837c299ca40f041109186c3a99","modified":1557748279996},{"_id":"source/_posts/sarsa-and-q-learning.md","hash":"53b718837e6f1785881b0a6280a076350019c895","modified":1557751597930},{"_id":"source/_posts/use-conda-env-in-jupyter.md","hash":"9bde1a9ceeeb03ff918367bd1f186e08df12978f","modified":1557748326850},{"_id":"source/_posts/win-rightclick-create-md.md","hash":"360444666e7a5a9d9401b8bc2204a2c6c00ac7fd","modified":1557748463663},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面.md","hash":"c576db94055c613781d1a92bbf6481b244aa7dd7","modified":1557451498142},{"_id":"source/_posts/价值与贝尔曼方程.md","hash":"eb9928dc0423f468367b54ec3c1bb8fa4a5adfde","modified":1557742272683},{"_id":"source/_posts/创建ML-Agents的Docker镜像.md","hash":"f2d9c8ccd3773e28ef7a2063c26c314e008f09dd","modified":1557451504774},{"_id":"source/_posts/强化学习.md","hash":"0f452b15cba9d245f755c6a100575967d903b047","modified":1558443929192},{"_id":"source/_posts/强化学习基本概念.md","hash":"996971b2970cada8acda5d7d856f02062a673aec","modified":1557657539847},{"_id":"source/_posts/强化学习的里程碑.md","hash":"421eb1d186559973e1e0d293fc59233d97283fca","modified":1557451519932},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程.md","hash":"3e6ab470e3e8a96c4b1097bba2070f10132e697b","modified":1557709748291},{"_id":"source/schedule/index.md","hash":"03b31174f851b6837264c9600ca288a6a8ae8b2f","modified":1546668615878},{"_id":"source/schedule/.DS_Store","hash":"894a1066d062f778f4734ec041b15051406bc25f","modified":1546415196000},{"_id":"source/tags/.DS_Store","hash":"894a1066d062f778f4734ec041b15051406bc25f","modified":1546414847000},{"_id":"source/sitemap/index.md","hash":"5849b70a1fbc3ecfa5b2a8f1c750c072f62edcf1","modified":1546668615879},{"_id":"source/tags/index.md","hash":"2b34dd5641ffd25ce2191ffb45d135fe0245cb27","modified":1546668615880},{"_id":"source/sitemap/.DS_Store","hash":"772213df72edfaaabb77a8f34d3bb60937412d35","modified":1546415255000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1546668615947},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1546668615948},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1546668616027},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1546668616028},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1546668615948},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1546668615949},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1546668615958},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1546668615959},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1546668615960},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1546668615960},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1546668615962},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1546668615962},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1546668615961},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1546668615963},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1546668615964},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1546668615964},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1546668615965},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1546668615966},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1546668615966},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1546668615968},{"_id":"themes/next/source/.DS_Store","hash":"025481e7a0b9714e109ed9fdc8a097c1845b092e","modified":1546426291000},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1546668615968},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1fb60dcb01ae1e59292294275945f347eaf8b1fd","modified":1555233495768},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1546668616022},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1546668616022},{"_id":"themes/next/layout/_layout.swig","hash":"8d2beaa32ff0aef2eb9ec8af31e1946781794e31","modified":1557449937106},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1546668616025},{"_id":"themes/next/layout/index.swig","hash":"abb86526b6587862c104808cf52cbdf56412a905","modified":1557449937108},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1546668616024},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1546668616024},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1546668616026},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1546668616279},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1546668616280},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1546668616280},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668616115},{"_id":"source/_posts/Evolution-Strategies-2017/algorithm1.png","hash":"f4431c520e0ad825bd463cc447323ebe912259c8","modified":1558441934162},{"_id":"source/_posts/Evolution-Strategies-2017/mujoco.png","hash":"231bd199e610864138cde0c912057836a6d8cf16","modified":1558439039063},{"_id":"source/_posts/Evolution-Strategies-2017/parallelization.png","hash":"1f02681b5fe1680f23b4b48a5ead120f18e07968","modified":1558440335868},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png","hash":"b95f4dcf0d9e2265cf2061a7e539b2bb9e6656a1","modified":1557449936944},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png","hash":"82d79b39f34388c7c3e1d53d0df9c184aff173b5","modified":1557449936945},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png","hash":"83a2093c01bce4def53352c4c8d71ec27cccaef0","modified":1557449936943},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png","hash":"14d91d4a1075adb4b2c900f86f08469d360eabe2","modified":1557449936945},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png","hash":"4f0c7c10d84f0a9736119525b8955cecd38698c1","modified":1557449936947},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png","hash":"0f20561591ddeadfe0df86f1855f0d02aa5a8dc2","modified":1557449936947},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png","hash":"2ff022de36958966b11fa2767a8ef352464df350","modified":1557449936948},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png","hash":"d66fb1805a685b4fd7b35cc769e1ef4b6d406f0e","modified":1557449936955},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png","hash":"729ff5819f4896a125b6e78fb7f11bc5755ece9e","modified":1557449936956},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png","hash":"a89542c74c04189645d7778481277b6d509245f1","modified":1557449936960},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png","hash":"cd606d229c598acb674599866015c25fb4b49491","modified":1557449936960},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png","hash":"d70c211b0801f50eff38b5d5b4d297ed7b705e0f","modified":1557449936974},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png","hash":"cc5d08ae28ac589ddd8fc1a32511cd57d2f1e77a","modified":1557449936972},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png","hash":"6ffc920c6da4731a3466a2aa04a9f86a8589efa5","modified":1557449936975},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png","hash":"bf515ccdeaa1149af9c1d483436cac1e93625fc5","modified":1557449936973},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png","hash":"648be7fa6a62443d9da38f531d2e8c4768def0e8","modified":1557449936976},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png","hash":"82c07ac184b8d89aa11e718bcf12293e6554bfb7","modified":1557449936974},{"_id":"source/_posts/dynamic-programming/gridworld.png","hash":"985f08ef2435799c50fb2b0552534e77d361f6f1","modified":1557742272676},{"_id":"source/_posts/mc-td/td.png","hash":"31e9c68a2ff7e27a51141aee7afbbe7f2bb166b0","modified":1557751298654},{"_id":"source/_posts/mc-td/dp.png","hash":"d6f93fd511036ee9557f60a7d1bb614b76c7824f","modified":1557751331676},{"_id":"source/_posts/dynamic-programming/dp.png","hash":"d6f93fd511036ee9557f60a7d1bb614b76c7824f","modified":1557751035613},{"_id":"source/_posts/rl-classification/model-classification.png","hash":"65beb87ac27c5e8a05a8e96a16b92234cec361df","modified":1557749792397},{"_id":"source/_posts/mc-td/mc.png","hash":"05687b207b833daf3801711572bfc9f687d51ceb","modified":1557751323074},{"_id":"source/_posts/rl-classification/stationary.png","hash":"c316b7092c017c420d2b877c36813f2644775879","modified":1557662608114},{"_id":"source/_posts/rl-classification/policy-based.png","hash":"1f50811df42bccb176a8d098721458ea32490852","modified":1557749161173},{"_id":"source/_posts/rl-classification/value-based.png","hash":"bfdf5b70c3f574985c32035807bc70c0d7f19f34","modified":1557749526466},{"_id":"source/_posts/something-hard-install-docker/1.png","hash":"87549df7ed37d6d7007050f9ffaa135624924668","modified":1557449936977},{"_id":"source/_posts/rl-classification/图.vsdx","hash":"cbea18d1d388a938c59c1c0221b9d07466dab1d3","modified":1557749513296},{"_id":"source/_posts/use-conda-env-in-jupyter/3.png","hash":"b83963e3d39d16262fe1a0579fc9ef64a3cff526","modified":1557449936988},{"_id":"source/_posts/rl-classification/non-stationary.png","hash":"1f19121d34404e32f3f2da667f9cab1752b1f3ea","modified":1557663218884},{"_id":"source/_posts/use-conda-env-in-jupyter/1.png","hash":"4aac952f561c9a1f1327b93faa841d003dd6601c","modified":1557449936979},{"_id":"source/_posts/use-conda-env-in-jupyter/2.png","hash":"e48c030ee7c801ac51d34cab8ba855f588dcb835","modified":1557449936988},{"_id":"source/_posts/use-conda-env-in-jupyter/4.png","hash":"f7583c736bc02436bf03e99121b69f73fe60ddf5","modified":1557449936989},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/9.png","hash":"617ce93d753ffa6960bc7806464fd2749231ae95","modified":1557449937023},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/10.png","hash":"064596db0933c2b12490abd6f3989943741a12d1","modified":1557449937007},{"_id":"source/_posts/win-rightclick-create-md/1546050455.jpg","hash":"a08a8362d1de59e1e8e5751b28a3fff0d87c47c1","modified":1557449936995},{"_id":"source/_posts/win-rightclick-create-md/20181229103752.png","hash":"6684b234550bfeedbc21a5070450a82a5d4a0086","modified":1557449936998},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/8.png","hash":"0ce398ad32bc5261fa78eab08b724c8ad96ee56b","modified":1557449937022},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png","hash":"711c592ab41c5c3659c6699b950deb0b064d46d4","modified":1557449937026},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png","hash":"1e46bb570e4a512f232955983ea18b2190d17398","modified":1557449937026},{"_id":"source/_posts/win-rightclick-create-md/20181229105300.png","hash":"8ca42182e6814c4a2fc27b57fff1dbfb89e7c949","modified":1557449937000},{"_id":"source/_posts/win-rightclick-create-md/20181229103503.png","hash":"836a0cc95e251f2b72d69fbb1690424b3ad37963","modified":1557449936997},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png","hash":"5ea2f1add0d50e26e0fdece4e6b31641c5c73e8f","modified":1557449937032},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png","hash":"146aabfccfdf3bfb90309df88304564634ab4aa7","modified":1557449937030},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/6.png","hash":"47bbca2eb1ddc68d9b6cf156cba85ef210735bd2","modified":1557449937019},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png","hash":"d1d28c63bc96287dc882511a60f0f6a47573836e","modified":1557449937031},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png","hash":"c862d9841a45e1eadcefff91d0ed5f3d65814283","modified":1557449937039},{"_id":"source/_posts/win-rightclick-create-md/20181229105408.png","hash":"07faaf69e53752c52dd3307aa8716d5f91d2b124","modified":1557449937001},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png","hash":"5f17cce8addd197a11a86b32875c344e11a8c053","modified":1557449937040},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png","hash":"6138514960948cd4fa20fc9ed6b515919af89110","modified":1557449937041},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-25-17.png","hash":"94927046e1aa72159979c02ebae6e6c749a634d4","modified":1557449937042},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-39-26.png","hash":"7811d046eded5e6b1535a4f54657e424ac0e5bff","modified":1557449937044},{"_id":"source/_posts/价值与贝尔曼方程/example1.png","hash":"7a6334c4fce383da569f77b96683d71de9a587ba","modified":1557466600266},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_15-02-16.png","hash":"52698fed5a3555474d50f06aebc1817c09aafae6","modified":1557449937045},{"_id":"source/_posts/价值与贝尔曼方程/example2.png","hash":"646cf9c4c0cafeec786e7b26d3138eb23a0c54c0","modified":1557466854099},{"_id":"source/_posts/价值与贝尔曼方程/example5.png","hash":"32caae8ff14e681b53102503a73ee657f40b4265","modified":1557468310322},{"_id":"source/_posts/价值与贝尔曼方程/example6.png","hash":"68d74c5001b82eda81bf49ed063b72c1c9ef2078","modified":1557468425165},{"_id":"source/_posts/价值与贝尔曼方程/example3.png","hash":"019485248ca5fa7e08bbee784ab84fd87e35482e","modified":1557466939972},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_22-38-42.png","hash":"7a1325c15aca2ef2d32e009e97cca73fa3bb05f4","modified":1557449937046},{"_id":"source/_posts/价值与贝尔曼方程/q.jpg","hash":"e6d379acfa4ccc453a63a4095574c5c8519daea3","modified":1557454441195},{"_id":"source/_posts/价值与贝尔曼方程/qsa.jpg","hash":"fff83c05644ae4e30b98188acc7fa7866ea5ded3","modified":1557454482743},{"_id":"source/_posts/价值与贝尔曼方程/v.jpg","hash":"b4346c668d4fc48a82dc2efff7d5365bdd3ab68a","modified":1557454423590},{"_id":"source/_posts/价值与贝尔曼方程/vs.jpg","hash":"0444cdf1b4c9f8fa54c9eb2413ca41007850b1bc","modified":1557454464024},{"_id":"source/_posts/价值与贝尔曼方程/vq.jpg","hash":"ebeb9cd0ae060891fe557f73707dfcf9803c021c","modified":1557454505140},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MPs.jpg","hash":"3e2a1c41c5cfcbf127dbd97d3e7ff8d3c1b9bf11","modified":1557454107615},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/agent-env.png","hash":"dfe83ed4336f01bbdcdd4e711754ecb5512b16e7","modified":1557452029205},{"_id":"source/_posts/强化学习的里程碑/GKBattleWithDeepBlue.jpeg","hash":"49cd9889ae2ff006e19d2f24b1d3948fafc46f9c","modified":1557449937102},{"_id":"source/_posts/强化学习的里程碑/LeeSedolBattleWithAlphaGo.jpeg","hash":"581e4c5538dc4fd621531ae2c368612a90778b3d","modified":1557449937104},{"_id":"source/_posts/强化学习的里程碑/KeJieBattleWithAlphaGo.jpeg","hash":"944ea54a8ec7a0d61b08d3548c7ddecf82a6d2d1","modified":1557449937103},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1546668616029},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1546668616030},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1546668616031},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1546668616030},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1546668616033},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1546668616033},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1546668616032},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1546668616035},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1546668616034},{"_id":"themes/next/source/css/.DS_Store","hash":"92d674a29dca71261f0e8fb66b187663f3e363da","modified":1546419521000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1546668616114},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1546668616116},{"_id":"themes/next/source/images/Kicon.jpg","hash":"4373f42f4a36dac017399219a33355476cdd515a","modified":1546668616116},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"baec5880136ee04093a30b43767a09c3a3ff225a","modified":1546668616118},{"_id":"themes/next/source/images/alipay.jpg","hash":"fcff318686daaa2de536e3bbc4d0f692ae87eb61","modified":1546668616117},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1546668616120},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1546668616120},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1546668616119},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1546668616122},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1546668616121},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"dbb4ef84d00d2fdf50a12ff69b0c3e988f5888ba","modified":1546668616124},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1546668616122},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546668616125},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1546668616123},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1546668616124},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546668616127},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1546668616126},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"3376ab0494aaf4584d1b5ebfdb5c6d6b53582410","modified":1546668616125},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1546668616127},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1546668615970},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546668616128},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1546668615970},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1546668616128},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1546668615977},{"_id":"themes/next/layout/_partials/footer.swig","hash":"806db4fa1940f3c48a4771c322446a19e32fb09c","modified":1546668615978},{"_id":"themes/next/layout/_partials/head.swig","hash":"24b04658629f56cf54ebcf31dc5b63d09d0fdc1d","modified":1557449937107},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1546668615982},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1546668615982},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1546668615983},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1546668615981},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"01eb6a82e6a2f07f4c1288e5a0c6de1b0c9bb99f","modified":1546668615973},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"a3192bca82223de12629fb94ce547c2346cefbb1","modified":1546668615972},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1546668615973},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1546668615974},{"_id":"themes/next/layout/_macro/post.swig","hash":"a808140d943f47f4981c1e022809e4e7a203ce16","modified":1546668615975},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1546668615990},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1546668615975},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1546668615977},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1546668615991},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"ac41ffc2c4cd8059fcf65b7e4d883ab47364bf74","modified":1557709748301},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1546668615996},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-35-56.png","hash":"feecbf78f4e1264cc735fb38a2a2886cfaf4a036","modified":1557449937043},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1546668616012},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1546668616013},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1546668616013},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1546668616014},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1546668616015},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1546668616016},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1546668616015},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png","hash":"ad2ac085e8d096290882398ddf0f402843be6f86","modified":1557449936951},{"_id":"source/_posts/Evolution-Strategies-2017/algorithm2.png","hash":"03ee451c83603dba9a3f7e3febdac0803712c37d","modified":1558441950396},{"_id":"source/_posts/Evolution-Strategies-2017/frame-skip.png","hash":"d1bdd98e83cd9ea8779a7e95c70a6175f9e641c1","modified":1558441002705},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png","hash":"f847e0683355dd3b8c2f94070d689ab64eee5b8a","modified":1557449936953},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png","hash":"5bacfd1dd4315392a705fba900d540a3baca7ef2","modified":1557449936959},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png","hash":"b9985565ba4eb37e3f68440f1266494959b816c7","modified":1557449936958},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/1.png","hash":"af326825623bbd798b64c0d7b0d55e80987a3908","modified":1557449937005},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png","hash":"47fd9073f9cba7b1e7772184e1592d888b0e671b","modified":1557449937028},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png","hash":"7b20a4cb60606cc964ca46914ef232b402ae2fd4","modified":1557449937029},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png","hash":"cfed661288b897840cf511cf5fc55ff09d792ed9","modified":1557449937032},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MDP.jpg","hash":"3ffd4dca7a616a6e6aeafc66698f32899f225780","modified":1557449937087},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MP.jpg","hash":"1372f421a8b8fb1c0393b80c2e90fcb1b7cad8b5","modified":1557449937092},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668616089},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668616090},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668616092},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668616111},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668616113},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"0e2196955d6229673c92143a929ff5a54d04a4c7","modified":1546668616129},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668615993},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546668615994},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png","hash":"7593af06e466318684d72dd51e0e7d95f5fae824","modified":1557449936955},{"_id":"source/_posts/dynamic-programming/vi.png","hash":"3e2c0e220045b7ec5354565d20a990f8fb09e0d5","modified":1557742272682},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/3.png","hash":"fe7dfe4d8603d45162f9d1769931d03386efd1fa","modified":1557449937010},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/4.png","hash":"8f156494735cf0350b426abe850903dc712e08cf","modified":1557449937011},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1546668616132},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1546668616134},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1546668616131},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1546668616133},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1546668616132},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1546668616135},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1546668616136},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1546668616138},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1546668616135},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1546668616138},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"f72fdd48f1f3c3e30582e782ee384fb40c9b1e80","modified":1546419521000},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1546668616139},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c7eda63dacaa3ffa2af3971c0ac665e0d15e0443","modified":1546668616088},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1546668616089},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1546668616090},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1546668616091},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1546668616111},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1546668616110},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1546668616112},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a82bbe643f8c89a4fb123b538d164e5e4b5f2719","modified":1546668616113},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1546668615985},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1546668615980},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1546668615984},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1546668615986},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1546668615987},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1546668615981},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1546668615987},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1546668615988},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1546668615992},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1546668615993},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1546668615995},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1546668615997},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1546668615998},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1546668616000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1546668615989},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1546668616000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1546668616001},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1546668615998},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1546668616002},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1546668616003},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1546668616004},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1546668615999},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1546668616001},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1546668616003},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1546668616005},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1546668616006},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1546668616007},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1546668616007},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1546668616009},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1546668616010},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1546668616011},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1546668616008},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1546668616019},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1546668616009},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1546668616020},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1546668616021},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1546668616011},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1546668616019},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546668616152},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1546668616153},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1546668616197},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1546668616201},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1546668616200},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1546668616202},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1546668616191},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1546668616148},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1546668616197},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1546668616194},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1546668616192},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1546394565000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1546394565000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1546668616239},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1546668616191},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1546668616228},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1546668616231},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1546668616230},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1546668616246},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1546668616242},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1546668616240},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1546668616248},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1546668616232},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1546668616240},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1546668616247},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1546668616250},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1546668616250},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1546668616251},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1546668616252},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1546668616252},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1546668616254},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1546668616256},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1546668616253},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1546668616255},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1546668616254},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1546668616256},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1546668616257},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1546668616258},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1546668616259},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1546668616260},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1546668616268},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/7.png","hash":"a588ebe2f2088c621a5260a9a0086b79d40408b9","modified":1557449937021},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1546668616270},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1546668616276},{"_id":"source/_posts/价值与贝尔曼方程/example4.png","hash":"11b071b9e060a8222b23394fc1cf4fad7280f7ea","modified":1557468145102},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/M.jpg","hash":"60afd253a45442fa846c2e960a34fe36974f7315","modified":1557449937060},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1546668616277},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1546668616276},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/17.png","hash":"8ab98d82828a90fdbbe9550c6e8f4a2aeaf6c33c","modified":1557449936862},{"_id":"source/_posts/dynamic-programming/pi.png","hash":"8bb2d97d896e05a2f74dbd44598f19eb871f94ec","modified":1557742272681},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1546668616229},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1546668616242},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/2.png","hash":"249f4af7270f3d1d4d5058938671c596dc66fc5d","modified":1557449937009},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1546668616082},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1546668616083},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1546668616084},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1546668616086},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1546668616084},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1546668616085},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1546668616101},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1546668616101},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1546668616102},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1546668616104},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1546668616103},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1546668616106},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1546668616137},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1546668616087},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1546668616108},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1546668616106},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1546668616107},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1546668616109},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1546668616093},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1546668616108},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1546668616035},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1546668616038},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1546668616037},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"992da4de44b0ba9cdbc905fe8a5eca0059b01026","modified":1546420292000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1546668616037},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1546668616036},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1546668616068},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1546668616094},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1546668616049},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1546668616096},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1546668616095},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1546668616095},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1546668616097},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1546668616097},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1546668616018},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1546668616098},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1546668616017},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/2.png","hash":"900849540a078f00d12be63bb507a039dd37de7a","modified":1557449936874},{"_id":"source/_posts/Evolution-Strategies-2017/atari.png","hash":"4ac985cb7c9e0797f8bcc02e0d482bde90288468","modified":1558439968883},{"_id":"source/_posts/dynamic-programming/iteration.png","hash":"ad52cf8b064058e77a0ffb995c047d9c0c25e411","modified":1557742272679},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/7.png","hash":"6847e7b98b582d5941ebe109154477ab72be1fba","modified":1557449936929},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1546668616146},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1546668616147},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1546668616204},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1546668616217},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1546668616195},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1546668616196},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546668616154},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546668616156},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546668616156},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546668616180},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546668616180},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546668616181},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1546668616188},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1546668616189},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/5.png","hash":"b649040df6d1ee3c8aff5dbfbfbe4d55168f5d98","modified":1557449937015},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1546668616266},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1546668616267},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/11.png","hash":"806bd3d8b1556a72083f5357c8c5220c127cb5ec","modified":1557449936842},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/16.png","hash":"f40be3c8ef3ef8803c17c9e749547396e3e92e90","modified":1557449936859},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/22.png","hash":"4b16ac8d30269c22ff4c79185ce28c57af303bac","modified":1557449936886},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/26.png","hash":"d8cf18e3730c405f6d6c187b44b64a21010c7f0f","modified":1557449936904},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/4.png","hash":"d80992d6b39c753ac20baec4a50073c907b706e2","modified":1557449936920},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/3.png","hash":"139fafcf0d0ec69aa31336e2f07be08afabc96cf","modified":1557449936915},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/5.png","hash":"30f3723a5f63ceb668c0ceb838b27da85c262cc3","modified":1557449936923},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1546668616144},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1546668616145},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1546668616203},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546668616227},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546668616226},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1546668616190},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MRP.png","hash":"08ab5eba51d5be16a0a9709d32e98137cd316187","modified":1557449937096},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1546668616105},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1546668616040},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1546668616040},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1546668616041},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1546668616043},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1546668616039},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1546668616044},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1546668616046},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1546668616048},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1546668616047},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1546668616042},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1546668616051},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1546668616044},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1546668616047},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1546668616045},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1546668616050},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1546668616053},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1546668616053},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1546668616054},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1546668616052},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1546668616049},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1546668616057},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1546668616054},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1546668616055},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1546668616058},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1546668616059},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1546668616058},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1546668616059},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1546668616061},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1546668616063},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1546668616064},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1546668616063},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1546668616056},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1546668616064},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"3a28364d0df9f7c9b6eecf313d06df2cea163fac","modified":1546668616056},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2eea5a53993a24fffe0b91ac205f57c955208764","modified":1546668616062},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1546668616067},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"26e4e1ed9d5e44a67fc1332a0a1e76bf25dfb343","modified":1546668616060},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1546668616069},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1546668616065},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1546668616066},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1546668616070},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1546668616071},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1546668616071},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1546668616066},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1546668616069},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1546668616072},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1546668616074},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1546668616076},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1546668616077},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1546668616073},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1546668616078},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1546668616073},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1546668616078},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1546668616080},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1546668616080},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1546668616079},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1546668616075},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1546668616081},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1546668616099},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1546668616100},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/12.png","hash":"40ee94e807e5fb8107a389669696df5b88c77f6e","modified":1557449936845},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1546668616077},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/1.png","hash":"1fb0066b7b6b502080c42ba8d336d41bb0c86138","modified":1557449936834},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/15.png","hash":"2c612516fef737d86623692f8bdc75f4c687b8cd","modified":1557449936856},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/19.png","hash":"70457762d1bd3dd19da38c8ef970f889a5c87e34","modified":1557449936871},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/27.png","hash":"1ca67a0009a59aa3ae25ccc21d153a2ceb665fd7","modified":1557449936907},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/25.png","hash":"b1e06712ce17fd066ce754d15090c6f0482de641","modified":1557449936899},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/21.png","hash":"3c45b12dc0e1e4929ea22ca0d14740062ccc2280","modified":1557449936881},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/28.png","hash":"4adaa88692fbacfbd2305513e82b14fda94753d2","modified":1557449936911},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/6.png","hash":"e4c51c5ffb065d86f98621fc3cbc73037b6d516a","modified":1557449936926},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/8.png","hash":"a09129f8740daa1c9d31dbbbf3e690f1967dec03","modified":1557449936934},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1546668616141},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1546668616142},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1546668616141},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1546668616219},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1546668616143},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1546668616144},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1546668616183},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546668616182},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1546668616185},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1546668616187},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1546668616187},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1546668616186},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1546668616272},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/14.png","hash":"487768f9ce9a801ba04652376a7a1e8e3efbf8ff","modified":1557449936853},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/18.png","hash":"c1a2a91e36bed04f9e1e68adf07c2f85edd942d9","modified":1557449936866},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/20.png","hash":"6702cec99aefcb56a3d87b681a65c06dd2db33ab","modified":1557449936878},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/23.png","hash":"72112f7660bdb4d4f7096607745f7dd4760a86ed","modified":1557449936890},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/24.png","hash":"f567c2f97adc1279c643338f6783a4308e3f17cf","modified":1557449936894},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546668616221},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1546668616225},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/10.png","hash":"471375e196748ccb29bf050bc737a3b96b678513","modified":1557449936838},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/13.png","hash":"7381a254604ce2061aaf70e3ebc64cc36da5d78c","modified":1557449936848},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/9.png","hash":"1e1a8203b22f610b8097db6f862f4abe57aa4fa1","modified":1557449936938},{"_id":"source/_posts/dynamic-programming/pivsvi.png","hash":"1fc85aa51fb007eac28c7d89b6a8fce5c7415c49","modified":1557745758717},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1546668616151},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1546668616224},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1546668616264},{"_id":"public/baidusitemap.xml","hash":"fce587e9392ac5685e567eaa77db20a3c5588c93","modified":1558443947197},{"_id":"public/atom.xml","hash":"c1e99ca1439b8b40a636f9f4eadc4c751d26734f","modified":1558443947384},{"_id":"public/search.xml","hash":"afa26fbde1b1d1e9118fc6a798a58851bf41758c","modified":1558443947385},{"_id":"public/sitemap.xml","hash":"9cc62b9989cb87fdec0cf5a9bf6e04a47473f2e9","modified":1558443947395},{"_id":"public/about/index.html","hash":"fdae241ecb85a1db7788572a53c03d0ce9a8a7df","modified":1558443949591},{"_id":"public/schedule/index.html","hash":"878c94f75f3ff1d1b127557a4dd9e114b4cf7a7f","modified":1558443949662},{"_id":"public/sitemap/index.html","hash":"9dc44b5165c5d9302327b07a34f54e8abda71851","modified":1558443949662},{"_id":"public/sarsa-and-q-learning.html","hash":"e7439f3b51e8ede1c99802683472fd58309f4abd","modified":1558443949670},{"_id":"public/mc-td.html","hash":"1c7d7118bce221c67e5dc5dae5ff9ac6b135a45d","modified":1558443949671},{"_id":"public/rl-classification.html","hash":"5da9b7186909f5f49e912a0f15ac10c3b1dbef74","modified":1558443949671},{"_id":"public/dynamic-programming.html","hash":"aecf4c9a32867ad38a7be18a1ab45cf31a747b5f","modified":1558443949671},{"_id":"public/强化学习.html","hash":"d7eda5352a79caf1e1c1107846ac3be00f062231","modified":1558443949671},{"_id":"public/强化学习之MDP马尔科夫决策过程.html","hash":"f380592cb7a4670f0cda6da4d8bacc396b7464dc","modified":1558443949671},{"_id":"public/强化学习的里程碑.html","hash":"5e92ff38d352f99a9c22b04ae0c88f8737e76f2d","modified":1558443949671},{"_id":"public/价值与贝尔曼方程.html","hash":"21a871d6a1f18a648d9285784b191ca10763535d","modified":1558443949671},{"_id":"public/conda环境和pip包的转移.html","hash":"1e41adb61b186845790295c8a8c6b913e3378a36","modified":1558443949671},{"_id":"public/强化学习基本概念.html","hash":"5d3d21c542256bb05d73a62874d2450820283218","modified":1558443949671},{"_id":"public/something-hard-install-docker.html","hash":"f7fb56744318e72cd606a4b706d2966b6fa79034","modified":1558443949671},{"_id":"public/use-conda-env-in-jupyter.html","hash":"12281db16cc3099ea370242a236dba49e61439ce","modified":1558443949671},{"_id":"public/AnderewNg-deeplearning-note-summary.html","hash":"e69d6dccdd18ade276c7c9ebedb5389e3afc5eff","modified":1558443949671},{"_id":"public/创建ML-Agents的Docker镜像.html","hash":"16c187ce9274e91db21dc1a3e191eddcd3581b79","modified":1558443949671},{"_id":"public/Docker命令学习.html","hash":"11ba98d6b8495828aee938aaeefa36bb24c0110f","modified":1558443949671},{"_id":"public/为远程Ubuntu服务器安装图像界面.html","hash":"1c88aabc91f9fc41488af8f0a8a09dcd2829ee0d","modified":1558443949671},{"_id":"public/create-sniper-docker-image.html","hash":"cbdc7cde26eaaa2612a92937aadea6548c52d1ef","modified":1558443949671},{"_id":"public/MarkDown-Grammar.html","hash":"c5e123c193a89a0fcd0e4e87fe848f05f17f8242","modified":1558443949671},{"_id":"public/win-rightclick-create-md.html","hash":"2bccd83100fad44f50d0118582028112f4de60fa","modified":1558443949671},{"_id":"public/Git-learn.html","hash":"6116b517f3561b5b747c6b772cdaab767dc42bcd","modified":1558443949671},{"_id":"public/archives/index.html","hash":"c9c3179254c028f35d10efbe4b88ac3d14027593","modified":1558443949671},{"_id":"public/archives/page/2/index.html","hash":"36b1a4350a0f3486dfd84714e4c409fc58a77990","modified":1558443949671},{"_id":"public/Evolution-Strategies-2017.html","hash":"be399e1184424848cac3680f2a6de5978b26975b","modified":1558443949741},{"_id":"public/archives/page/3/index.html","hash":"31840f6126f968c4e07f779200451565875be97c","modified":1558443949743},{"_id":"public/categories/index.html","hash":"cd7e412349ff7be9afb0e4e6e763b007e8922f6b","modified":1558443949743},{"_id":"public/tags/index.html","hash":"1c66a8e968ddc13d24f83da0172046663c72d447","modified":1558443949743},{"_id":"public/archives/2018/index.html","hash":"39e7ffc63cd09a0004762e8a1dd24f464df199a1","modified":1558443949743},{"_id":"public/archives/2018/12/index.html","hash":"faf6d7daea83323175426c63d7889347ac033b94","modified":1558443949743},{"_id":"public/archives/2019/03/index.html","hash":"bf671c7d4b345c4db542135045ef26412bd43bfc","modified":1558443949743},{"_id":"public/archives/2019/page/2/index.html","hash":"339f9c00da834e780cb7a80de51819292a87e2d5","modified":1558443949743},{"_id":"public/archives/2019/index.html","hash":"1e41c602843094c3a3ff2aeaf9aa39e68c99d567","modified":1558443949743},{"_id":"public/categories/Docker/index.html","hash":"67834c0cc0710619ad165204ec484254a2414a08","modified":1558443949743},{"_id":"public/categories/DeepLearning/index.html","hash":"7c8bb4056be418c219fcd4ab2926d738a46d08b3","modified":1558443949743},{"_id":"public/archives/2019/01/index.html","hash":"7b0eb2f9965a1e2fc0c715af5b9f63e2140654a8","modified":1558443949744},{"_id":"public/archives/2019/04/index.html","hash":"e7323c32834c7dc7dbaa5a0d1f0c4023873600c6","modified":1558443949744},{"_id":"public/categories/小知识/index.html","hash":"d9c5829214d1c2b68d47976bede252681e9f5a0c","modified":1558443949744},{"_id":"public/archives/2019/05/index.html","hash":"e4cbbfa74fc8a2551b3dfe49ed89aaf967dfe344","modified":1558443949744},{"_id":"public/categories/Conda/index.html","hash":"352c72ea30842f7262e3bf0aed54093b914b6b3c","modified":1558443949744},{"_id":"public/index.html","hash":"866e8f83519350760971f2b69e811424838be12d","modified":1558443949744},{"_id":"public/categories/ReinforcementLearning/index.html","hash":"3968f32a02129ced7893ec2141c00feae36c8cd6","modified":1558443949744},{"_id":"public/tags/docker/index.html","hash":"e4ecf6e0f55551ba9113bfaeab7d032ac68785c5","modified":1558443949744},{"_id":"public/categories/Docker/Unity/index.html","hash":"aa3438414bc48ca998378cfee3112af68a7f4fa5","modified":1558443949744},{"_id":"public/tags/note/index.html","hash":"5f06966dd8bff111c5668206ed205f53751b0c6f","modified":1558443949744},{"_id":"public/tags/deeplearning/index.html","hash":"147506097af4a525826ba490a9dd75023a5bb19f","modified":1558443949744},{"_id":"public/categories/Ubuntu/index.html","hash":"da02497e3c3165ef28947f84678eb143d6597559","modified":1558443949744},{"_id":"public/tags/conda/index.html","hash":"eeadff0f3e59cd18eeb4c3fcfb4f38ffc6a4ad7c","modified":1558443949744},{"_id":"public/tags/rl/index.html","hash":"2ae75f73652cfb3b88e864ad4ae15892ffe3fe8e","modified":1558443949744},{"_id":"public/tags/markdown/index.html","hash":"3730d44ca5b0adbb91200ee5524f793b17e4397b","modified":1558443949744},{"_id":"public/tags/jupyter-notebook/index.html","hash":"20bdf746e221665238b070c54887df91f0f814dc","modified":1558443949744},{"_id":"public/tags/mxnet/index.html","hash":"598064a867af3266cc4c374eaf369da13febabc7","modified":1558443949744},{"_id":"public/tags/ubuntu/index.html","hash":"862bc36f5ff60606d54007dd8a5067f9342f9077","modified":1558443949744},{"_id":"public/tags/sniper/index.html","hash":"0a26a6958485e102b7bc6a0600082e53e95bfefb","modified":1558443949744},{"_id":"public/tags/ml-agents/index.html","hash":"24f5fa64298ddc8fd39d02adf51a12bbd1de2ade","modified":1558443949744},{"_id":"public/tags/unity/index.html","hash":"1bba423677b86e1f23e3c537be7fdf1b163823a7","modified":1558443949744},{"_id":"public/tags/x2go/index.html","hash":"3f9816ff9af076ad46b438dd8204c0fa1cfad981","modified":1558443949744},{"_id":"public/tags/Git/index.html","hash":"26a26be493806b0c0d154215cb22ca5e3a4d094c","modified":1558443949744},{"_id":"public/page/2/index.html","hash":"d79c2dcf217f46eaed8142db58bc860d95937dde","modified":1558443949762},{"_id":"public/robots.txt","hash":"2bd0324ddb031aa7eaa53529c9e9e66227d488b4","modified":1558443949762},{"_id":"public/images/Kicon.jpg","hash":"4373f42f4a36dac017399219a33355476cdd515a","modified":1558443949763},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1558443949763},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1558443949763},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1558443949763},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1558443949763},{"_id":"public/images/apple-touch-icon.png","hash":"baec5880136ee04093a30b43767a09c3a3ff225a","modified":1558443949763},{"_id":"public/images/favicon-16x16.png","hash":"dbb4ef84d00d2fdf50a12ff69b0c3e988f5888ba","modified":1558443949763},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1558443949763},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558443949763},{"_id":"public/images/favicon-32x32.png","hash":"3376ab0494aaf4584d1b5ebfdb5c6d6b53582410","modified":1558443949763},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1558443949763},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1558443949763},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1558443949763},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1558443949763},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1558443949763},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558443949763},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1558443949763},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1558443949763},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1558443949763},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1558443949763},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1558443949763},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1558443949763},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1558443949764},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1558443949764},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1558443949764},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1558443949764},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1558443949764},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1558443949764},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1558443949764},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1558443949764},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1558443949764},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1558443949764},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1558443949764},{"_id":"public/something-hard-install-docker/1.png","hash":"87549df7ed37d6d7007050f9ffaa135624924668","modified":1558443949764},{"_id":"public/mc-td/dp.png","hash":"d6f93fd511036ee9557f60a7d1bb614b76c7824f","modified":1558443949764},{"_id":"public/mc-td/mc.png","hash":"05687b207b833daf3801711572bfc9f687d51ceb","modified":1558443949764},{"_id":"public/强化学习的里程碑/GKBattleWithDeepBlue.jpeg","hash":"49cd9889ae2ff006e19d2f24b1d3948fafc46f9c","modified":1558443949764},{"_id":"public/use-conda-env-in-jupyter/2.png","hash":"e48c030ee7c801ac51d34cab8ba855f588dcb835","modified":1558443949764},{"_id":"public/强化学习的里程碑/LeeSedolBattleWithAlphaGo.jpeg","hash":"581e4c5538dc4fd621531ae2c368612a90778b3d","modified":1558443949764},{"_id":"public/win-rightclick-create-md/1546050455.jpg","hash":"a08a8362d1de59e1e8e5751b28a3fff0d87c47c1","modified":1558443949764},{"_id":"public/use-conda-env-in-jupyter/3.png","hash":"b83963e3d39d16262fe1a0579fc9ef64a3cff526","modified":1558443949764},{"_id":"public/use-conda-env-in-jupyter/4.png","hash":"f7583c736bc02436bf03e99121b69f73fe60ddf5","modified":1558443949764},{"_id":"public/win-rightclick-create-md/20181229103503.png","hash":"836a0cc95e251f2b72d69fbb1690424b3ad37963","modified":1558443949764},{"_id":"public/win-rightclick-create-md/20181229103752.png","hash":"6684b234550bfeedbc21a5070450a82a5d4a0086","modified":1558443949764},{"_id":"public/win-rightclick-create-md/20181229105408.png","hash":"07faaf69e53752c52dd3307aa8716d5f91d2b124","modified":1558443949764},{"_id":"public/rl-classification/value-based.png","hash":"bfdf5b70c3f574985c32035807bc70c0d7f19f34","modified":1558443949764},{"_id":"public/rl-classification/policy-based.png","hash":"1f50811df42bccb176a8d098721458ea32490852","modified":1558443949764},{"_id":"public/rl-classification/图.vsdx","hash":"cbea18d1d388a938c59c1c0221b9d07466dab1d3","modified":1558443949765},{"_id":"public/rl-classification/model-classification.png","hash":"65beb87ac27c5e8a05a8e96a16b92234cec361df","modified":1558443949765},{"_id":"public/rl-classification/stationary.png","hash":"c316b7092c017c420d2b877c36813f2644775879","modified":1558443949765},{"_id":"public/为远程Ubuntu服务器安装图像界面/8.png","hash":"0ce398ad32bc5261fa78eab08b724c8ad96ee56b","modified":1558443949765},{"_id":"public/为远程Ubuntu服务器安装图像界面/9.png","hash":"617ce93d753ffa6960bc7806464fd2749231ae95","modified":1558443949765},{"_id":"public/dynamic-programming/dp.png","hash":"d6f93fd511036ee9557f60a7d1bb614b76c7824f","modified":1558443949765},{"_id":"public/dynamic-programming/gridworld.png","hash":"985f08ef2435799c50fb2b0552534e77d361f6f1","modified":1558443949765},{"_id":"public/rl-classification/non-stationary.png","hash":"1f19121d34404e32f3f2da667f9cab1752b1f3ea","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/example3.png","hash":"019485248ca5fa7e08bbee784ab84fd87e35482e","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/example1.png","hash":"7a6334c4fce383da569f77b96683d71de9a587ba","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/example6.png","hash":"68d74c5001b82eda81bf49ed063b72c1c9ef2078","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/example2.png","hash":"646cf9c4c0cafeec786e7b26d3138eb23a0c54c0","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/qsa.jpg","hash":"fff83c05644ae4e30b98188acc7fa7866ea5ded3","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/q.jpg","hash":"e6d379acfa4ccc453a63a4095574c5c8519daea3","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/example5.png","hash":"32caae8ff14e681b53102503a73ee657f40b4265","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/vq.jpg","hash":"ebeb9cd0ae060891fe557f73707dfcf9803c021c","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/v.jpg","hash":"b4346c668d4fc48a82dc2efff7d5365bdd3ab68a","modified":1558443949765},{"_id":"public/为远程Ubuntu服务器安装图像界面/10.png","hash":"064596db0933c2b12490abd6f3989943741a12d1","modified":1558443949765},{"_id":"public/价值与贝尔曼方程/vs.jpg","hash":"0444cdf1b4c9f8fa54c9eb2413ca41007850b1bc","modified":1558443949765},{"_id":"public/Evolution-Strategies-2017/algorithm1.png","hash":"f4431c520e0ad825bd463cc447323ebe912259c8","modified":1558443949765},{"_id":"public/Evolution-Strategies-2017/mujoco.png","hash":"231bd199e610864138cde0c912057836a6d8cf16","modified":1558443949765},{"_id":"public/Evolution-Strategies-2017/parallelization.png","hash":"1f02681b5fe1680f23b4b48a5ead120f18e07968","modified":1558443949765},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png","hash":"711c592ab41c5c3659c6699b950deb0b064d46d4","modified":1558443949765},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png","hash":"1e46bb570e4a512f232955983ea18b2190d17398","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png","hash":"146aabfccfdf3bfb90309df88304564634ab4aa7","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png","hash":"5ea2f1add0d50e26e0fdece4e6b31641c5c73e8f","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png","hash":"d1d28c63bc96287dc882511a60f0f6a47573836e","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png","hash":"c862d9841a45e1eadcefff91d0ed5f3d65814283","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png","hash":"6138514960948cd4fa20fc9ed6b515919af89110","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-39-26.png","hash":"7811d046eded5e6b1535a4f54657e424ac0e5bff","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-25-17.png","hash":"94927046e1aa72159979c02ebae6e6c749a634d4","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-35-56.png","hash":"feecbf78f4e1264cc735fb38a2a2886cfaf4a036","modified":1558443949766},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png","hash":"14d91d4a1075adb4b2c900f86f08469d360eabe2","modified":1558443949766},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png","hash":"82d79b39f34388c7c3e1d53d0df9c184aff173b5","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_15-02-16.png","hash":"52698fed5a3555474d50f06aebc1817c09aafae6","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_22-38-42.png","hash":"7a1325c15aca2ef2d32e009e97cca73fa3bb05f4","modified":1558443949766},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png","hash":"5f17cce8addd197a11a86b32875c344e11a8c053","modified":1558443949766},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png","hash":"b95f4dcf0d9e2265cf2061a7e539b2bb9e6656a1","modified":1558443949766},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png","hash":"0f20561591ddeadfe0df86f1855f0d02aa5a8dc2","modified":1558443949766},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png","hash":"4f0c7c10d84f0a9736119525b8955cecd38698c1","modified":1558443949766},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png","hash":"2ff022de36958966b11fa2767a8ef352464df350","modified":1558443949766},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png","hash":"cd606d229c598acb674599866015c25fb4b49491","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png","hash":"83a2093c01bce4def53352c4c8d71ec27cccaef0","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png","hash":"a89542c74c04189645d7778481277b6d509245f1","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png","hash":"d66fb1805a685b4fd7b35cc769e1ef4b6d406f0e","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png","hash":"729ff5819f4896a125b6e78fb7f11bc5755ece9e","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png","hash":"d70c211b0801f50eff38b5d5b4d297ed7b705e0f","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png","hash":"bf515ccdeaa1149af9c1d483436cac1e93625fc5","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png","hash":"82c07ac184b8d89aa11e718bcf12293e6554bfb7","modified":1558443949767},{"_id":"public/强化学习之MDP马尔科夫决策过程/MPs.jpg","hash":"3e2a1c41c5cfcbf127dbd97d3e7ff8d3c1b9bf11","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png","hash":"6ffc920c6da4731a3466a2aa04a9f86a8589efa5","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png","hash":"648be7fa6a62443d9da38f531d2e8c4768def0e8","modified":1558443949767},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png","hash":"cc5d08ae28ac589ddd8fc1a32511cd57d2f1e77a","modified":1558443949767},{"_id":"public/强化学习之MDP马尔科夫决策过程/agent-env.png","hash":"dfe83ed4336f01bbdcdd4e711754ecb5512b16e7","modified":1558443949767},{"_id":"public/images/alipay.jpg","hash":"fcff318686daaa2de536e3bbc4d0f692ae87eb61","modified":1558443950330},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1558443950335},{"_id":"public/images/wechatpay.jpg","hash":"0e2196955d6229673c92143a929ff5a54d04a4c7","modified":1558443950337},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558443950338},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558443950338},{"_id":"public/mc-td/td.png","hash":"31e9c68a2ff7e27a51141aee7afbbe7f2bb166b0","modified":1558443950338},{"_id":"public/强化学习的里程碑/KeJieBattleWithAlphaGo.jpeg","hash":"944ea54a8ec7a0d61b08d3548c7ddecf82a6d2d1","modified":1558443950338},{"_id":"public/use-conda-env-in-jupyter/1.png","hash":"4aac952f561c9a1f1327b93faa841d003dd6601c","modified":1558443950338},{"_id":"public/win-rightclick-create-md/20181229105300.png","hash":"8ca42182e6814c4a2fc27b57fff1dbfb89e7c949","modified":1558443950338},{"_id":"public/为远程Ubuntu服务器安装图像界面/1.png","hash":"af326825623bbd798b64c0d7b0d55e80987a3908","modified":1558443950338},{"_id":"public/为远程Ubuntu服务器安装图像界面/6.png","hash":"47bbca2eb1ddc68d9b6cf156cba85ef210735bd2","modified":1558443950338},{"_id":"public/Evolution-Strategies-2017/algorithm2.png","hash":"03ee451c83603dba9a3f7e3febdac0803712c37d","modified":1558443950338},{"_id":"public/Evolution-Strategies-2017/frame-skip.png","hash":"d1bdd98e83cd9ea8779a7e95c70a6175f9e641c1","modified":1558443950338},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png","hash":"7b20a4cb60606cc964ca46914ef232b402ae2fd4","modified":1558443950338},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png","hash":"cfed661288b897840cf511cf5fc55ff09d792ed9","modified":1558443950338},{"_id":"public/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png","hash":"47fd9073f9cba7b1e7772184e1592d888b0e671b","modified":1558443950338},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png","hash":"f847e0683355dd3b8c2f94070d689ab64eee5b8a","modified":1558443950338},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png","hash":"ad2ac085e8d096290882398ddf0f402843be6f86","modified":1558443950338},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png","hash":"5bacfd1dd4315392a705fba900d540a3baca7ef2","modified":1558443950338},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png","hash":"b9985565ba4eb37e3f68440f1266494959b816c7","modified":1558443950339},{"_id":"public/强化学习之MDP马尔科夫决策过程/MDP.jpg","hash":"3ffd4dca7a616a6e6aeafc66698f32899f225780","modified":1558443950339},{"_id":"public/强化学习之MDP马尔科夫决策过程/MP.jpg","hash":"1372f421a8b8fb1c0393b80c2e90fcb1b7cad8b5","modified":1558443950339},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1558443950349},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1558443950349},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1558443950351},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1558443950351},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1558443950351},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1558443950351},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1558443950351},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1558443950351},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1558443950351},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1558443950351},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1558443950351},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1558443950351},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1558443950351},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1558443950351},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1558443950351},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1558443950354},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1558443950354},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1558443950354},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1558443950355},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1558443950355},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1558443950355},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1558443950355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1558443950355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1558443950355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1558443950355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1558443950355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1558443950355},{"_id":"public/lib/fastclick/README.html","hash":"b92d9ea1117f46037c1ec02f1b8368bd1459c548","modified":1558443950355},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7d07ccc0c9899b55f902f13c81bd0527e80b0f52","modified":1558443950355},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a8958b5bb927a3ee46192c7faaf756a838063e2a","modified":1558443950355},{"_id":"public/css/main.css","hash":"fb9886aa86dc2a9487fe92809976314f0e960a19","modified":1558443950355},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1558443950355},{"_id":"public/为远程Ubuntu服务器安装图像界面/3.png","hash":"fe7dfe4d8603d45162f9d1769931d03386efd1fa","modified":1558443950355},{"_id":"public/dynamic-programming/vi.png","hash":"3e2c0e220045b7ec5354565d20a990f8fb09e0d5","modified":1558443950355},{"_id":"public/为远程Ubuntu服务器安装图像界面/4.png","hash":"8f156494735cf0350b426abe850903dc712e08cf","modified":1558443950355},{"_id":"public/create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png","hash":"7593af06e466318684d72dd51e0e7d95f5fae824","modified":1558443950355},{"_id":"public/强化学习之MDP马尔科夫决策过程/M.jpg","hash":"60afd253a45442fa846c2e960a34fe36974f7315","modified":1558443950355},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1558443950386},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1558443950386},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1558443950386},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1558443950386},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1558443950386},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558443950386},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1558443950386},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1558443950386},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1558443950386},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558443950386},{"_id":"public/为远程Ubuntu服务器安装图像界面/7.png","hash":"a588ebe2f2088c621a5260a9a0086b79d40408b9","modified":1558443950387},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1558443950508},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1558443950508},{"_id":"public/dynamic-programming/pi.png","hash":"8bb2d97d896e05a2f74dbd44598f19eb871f94ec","modified":1558443950508},{"_id":"public/价值与贝尔曼方程/example4.png","hash":"11b071b9e060a8222b23394fc1cf4fad7280f7ea","modified":1558443950508},{"_id":"public/Evolution-Strategies-2017/atari.png","hash":"4ac985cb7c9e0797f8bcc02e0d482bde90288468","modified":1558443950509},{"_id":"public/AnderewNg-deeplearning-note-summary/17.png","hash":"8ab98d82828a90fdbbe9550c6e8f4a2aeaf6c33c","modified":1558443950509},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558443950529},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1558443950529},{"_id":"public/为远程Ubuntu服务器安装图像界面/2.png","hash":"249f4af7270f3d1d4d5058938671c596dc66fc5d","modified":1558443950529},{"_id":"public/强化学习之MDP马尔科夫决策过程/MRP.png","hash":"08ab5eba51d5be16a0a9709d32e98137cd316187","modified":1558443950530},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1558443950541},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1558443950541},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1558443950542},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558443950542},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558443950542},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1558443950542},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558443950542},{"_id":"public/AnderewNg-deeplearning-note-summary/16.png","hash":"f40be3c8ef3ef8803c17c9e749547396e3e92e90","modified":1558443950542},{"_id":"public/AnderewNg-deeplearning-note-summary/3.png","hash":"139fafcf0d0ec69aa31336e2f07be08afabc96cf","modified":1558443950542},{"_id":"public/AnderewNg-deeplearning-note-summary/28.png","hash":"4adaa88692fbacfbd2305513e82b14fda94753d2","modified":1558443950542},{"_id":"public/AnderewNg-deeplearning-note-summary/5.png","hash":"30f3723a5f63ceb668c0ceb838b27da85c262cc3","modified":1558443950542},{"_id":"public/AnderewNg-deeplearning-note-summary/6.png","hash":"e4c51c5ffb065d86f98621fc3cbc73037b6d516a","modified":1558443950543},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1558443950592},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1558443950592},{"_id":"public/为远程Ubuntu服务器安装图像界面/5.png","hash":"b649040df6d1ee3c8aff5dbfbfbe4d55168f5d98","modified":1558443950593},{"_id":"public/dynamic-programming/iteration.png","hash":"ad52cf8b064058e77a0ffb995c047d9c0c25e411","modified":1558443950593},{"_id":"public/AnderewNg-deeplearning-note-summary/7.png","hash":"6847e7b98b582d5941ebe109154477ab72be1fba","modified":1558443950593},{"_id":"public/AnderewNg-deeplearning-note-summary/2.png","hash":"900849540a078f00d12be63bb507a039dd37de7a","modified":1558443950593},{"_id":"public/AnderewNg-deeplearning-note-summary/11.png","hash":"806bd3d8b1556a72083f5357c8c5220c127cb5ec","modified":1558443950593},{"_id":"public/AnderewNg-deeplearning-note-summary/4.png","hash":"d80992d6b39c753ac20baec4a50073c907b706e2","modified":1558443950594},{"_id":"public/AnderewNg-deeplearning-note-summary/26.png","hash":"d8cf18e3730c405f6d6c187b44b64a21010c7f0f","modified":1558443950594},{"_id":"public/AnderewNg-deeplearning-note-summary/22.png","hash":"4b16ac8d30269c22ff4c79185ce28c57af303bac","modified":1558443950594},{"_id":"public/AnderewNg-deeplearning-note-summary/1.png","hash":"1fb0066b7b6b502080c42ba8d336d41bb0c86138","modified":1558443950594},{"_id":"public/AnderewNg-deeplearning-note-summary/12.png","hash":"40ee94e807e5fb8107a389669696df5b88c77f6e","modified":1558443950594},{"_id":"public/AnderewNg-deeplearning-note-summary/14.png","hash":"487768f9ce9a801ba04652376a7a1e8e3efbf8ff","modified":1558443950595},{"_id":"public/AnderewNg-deeplearning-note-summary/23.png","hash":"72112f7660bdb4d4f7096607745f7dd4760a86ed","modified":1558443950595},{"_id":"public/AnderewNg-deeplearning-note-summary/21.png","hash":"3c45b12dc0e1e4929ea22ca0d14740062ccc2280","modified":1558443950595},{"_id":"public/AnderewNg-deeplearning-note-summary/25.png","hash":"b1e06712ce17fd066ce754d15090c6f0482de641","modified":1558443950595},{"_id":"public/AnderewNg-deeplearning-note-summary/8.png","hash":"a09129f8740daa1c9d31dbbbf3e690f1967dec03","modified":1558443950596},{"_id":"public/AnderewNg-deeplearning-note-summary/27.png","hash":"1ca67a0009a59aa3ae25ccc21d153a2ceb665fd7","modified":1558443950596},{"_id":"public/AnderewNg-deeplearning-note-summary/9.png","hash":"1e1a8203b22f610b8097db6f862f4abe57aa4fa1","modified":1558443950596},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1558443950615},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1558443950615},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1558443950615},{"_id":"public/AnderewNg-deeplearning-note-summary/15.png","hash":"2c612516fef737d86623692f8bdc75f4c687b8cd","modified":1558443950615},{"_id":"public/AnderewNg-deeplearning-note-summary/19.png","hash":"70457762d1bd3dd19da38c8ef970f889a5c87e34","modified":1558443950615},{"_id":"public/AnderewNg-deeplearning-note-summary/18.png","hash":"c1a2a91e36bed04f9e1e68adf07c2f85edd942d9","modified":1558443950616},{"_id":"public/dynamic-programming/pivsvi.png","hash":"1fc85aa51fb007eac28c7d89b6a8fce5c7415c49","modified":1558443950616},{"_id":"public/AnderewNg-deeplearning-note-summary/13.png","hash":"7381a254604ce2061aaf70e3ebc64cc36da5d78c","modified":1558443950622},{"_id":"public/AnderewNg-deeplearning-note-summary/20.png","hash":"6702cec99aefcb56a3d87b681a65c06dd2db33ab","modified":1558443950622},{"_id":"public/AnderewNg-deeplearning-note-summary/10.png","hash":"471375e196748ccb29bf050bc737a3b96b678513","modified":1558443950637},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558443950656},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1558443950656},{"_id":"public/AnderewNg-deeplearning-note-summary/24.png","hash":"f567c2f97adc1279c643338f6783a4308e3f17cf","modified":1558443950657},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558443950672},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1558443950679},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1558443950683}],"Category":[{"name":"Docker","_id":"cjvxtaa960005m8veo9tqzaci"},{"name":"DeepLearning","_id":"cjvxtaa9f000cm8veti7esjvy"},{"name":"小知识","_id":"cjvxtaa9j000im8veqebwfkum"},{"name":"Conda","_id":"cjvxtaa9l000nm8vexhgqb978"},{"name":"ReinforcementLearning","_id":"cjvxtaa9t0012m8vev8gax4xs"},{"name":"Ubuntu","_id":"cjvxtaa9y001fm8ve7q7l17ty"},{"name":"Unity","parent":"cjvxtaa960005m8veo9tqzaci","_id":"cjvxtaabv002hm8vezzf9lt3g"}],"Data":[],"Page":[{"title":"About","date":"2019-01-02T07:30:04.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2019-01-02 15:30:04\ntype: \"about\"\ncomments: false\n---","updated":"2019-01-05T06:10:15.877Z","path":"about/index.html","layout":"page","_id":"cjvxtaa4z0000m8verb4ffx15","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-01-02T07:40:45.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-01-02 15:40:45\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-01-05T06:10:15.878Z","path":"categories/index.html","layout":"page","_id":"cjvxtaa8y0001m8ver3k2harf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2019-01-02T07:46:05.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2019-01-02 15:46:05\ntype: \"schedule\"\n---\n","updated":"2019-01-05T06:10:15.878Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjvxtaa930003m8ve24hv3svy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2019-01-02T07:46:11.000Z","type":"sitemap","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2019-01-02 15:46:11\ntype: \"sitemap\"\n---\n","updated":"2019-01-05T06:10:15.879Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"cjvxtaa990007m8veift0mhlu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tagcloud","date":"2019-01-02T07:32:57.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tagcloud\ndate: 2019-01-02 15:32:57\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-01-05T06:10:15.880Z","path":"tags/index.html","layout":"page","_id":"cjvxtaa9c0009m8ve5lumjdwj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker常用以及组合命令学习","copyright":true,"top":1,"date":"2019-01-03T05:52:04.000Z","_content":"\n本文记录了使用Docker过程中的一些常用的、复杂的命令。\n\n<!--more-->\n\n- 停止并删除正在运行的容器\n`docker rm $(docker stop $(docker ps -aq))`\n\n- 查看容器的长ID\n`docker inspect -f '{?{.ID}}' [name]`\n**去掉命令中的`?`,因为双括号会转义失败**\n\n- 宿主机向容器内传输文件/文件夹\n`docker cp 本地文件路径 ID全称:容器路径`\n\n- 容器传输文件/文件夹到宿主机\n`docker cp ID全称:容器文件路径 本地路径`\n\n- 修改本地已有镜像的名字\n`docker tag [ImageID] [NewImageNmae]:[tag]`\n","source":"_posts/Docker命令学习.md","raw":"---\ntitle: Docker常用以及组合命令学习\ncopyright: true\ntop: 1\ndate: 2019-01-03 13:52:04\ncategories: Docker\ntags:\n- docker\n\n---\n\n本文记录了使用Docker过程中的一些常用的、复杂的命令。\n\n<!--more-->\n\n- 停止并删除正在运行的容器\n`docker rm $(docker stop $(docker ps -aq))`\n\n- 查看容器的长ID\n`docker inspect -f '{?{.ID}}' [name]`\n**去掉命令中的`?`,因为双括号会转义失败**\n\n- 宿主机向容器内传输文件/文件夹\n`docker cp 本地文件路径 ID全称:容器路径`\n\n- 容器传输文件/文件夹到宿主机\n`docker cp ID全称:容器文件路径 本地路径`\n\n- 修改本地已有镜像的名字\n`docker tag [ImageID] [NewImageNmae]:[tag]`\n","slug":"Docker命令学习","published":1,"updated":"2019-05-13T11:45:43.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa8z0002m8ve2zl36o2r","content":"<p>本文记录了使用Docker过程中的一些常用的、复杂的命令。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>停止并删除正在运行的容器<br><code>docker rm $(docker stop $(docker ps -aq))</code></p>\n</li>\n<li><p>查看容器的长ID<br><code>docker inspect -f &#39;{?{.ID}}&#39; [name]</code><br><strong>去掉命令中的<code>?</code>,因为双括号会转义失败</strong></p>\n</li>\n<li><p>宿主机向容器内传输文件/文件夹<br><code>docker cp 本地文件路径 ID全称:容器路径</code></p>\n</li>\n<li><p>容器传输文件/文件夹到宿主机<br><code>docker cp ID全称:容器文件路径 本地路径</code></p>\n</li>\n<li><p>修改本地已有镜像的名字<br><code>docker tag [ImageID] [NewImageNmae]:[tag]</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文记录了使用Docker过程中的一些常用的、复杂的命令。</p>","more":"<ul>\n<li><p>停止并删除正在运行的容器<br><code>docker rm $(docker stop $(docker ps -aq))</code></p>\n</li>\n<li><p>查看容器的长ID<br><code>docker inspect -f &#39;{?{.ID}}&#39; [name]</code><br><strong>去掉命令中的<code>?</code>,因为双括号会转义失败</strong></p>\n</li>\n<li><p>宿主机向容器内传输文件/文件夹<br><code>docker cp 本地文件路径 ID全称:容器路径</code></p>\n</li>\n<li><p>容器传输文件/文件夹到宿主机<br><code>docker cp ID全称:容器文件路径 本地路径</code></p>\n</li>\n<li><p>修改本地已有镜像的名字<br><code>docker tag [ImageID] [NewImageNmae]:[tag]</code></p>\n</li>\n</ul>"},{"title":"吴恩达deeplearning.ai课程笔记总结","copyright":true,"top":1,"date":"2019-03-25T10:30:30.000Z","_content":"\n在吴恩达机器学习系列课程完结后不久，一位名叫[Tess Ferrandez](https://www.slideshare.net/TessFerrandez?utm_campaign=profiletracking&utm_medium=sssite&utm_source=ssslideview \"Tess Ferrandez小姐姐的主页\")的小姐姐在推特上分享了一套自己的课程笔记，瞬间收获了3k+赞和1k+转发。\n\n不同于满屏公式代码的黑白笔记，这套信息图不仅知识点满满，且行文构图都像插画一样颜值颇高。吴恩达自己也在推特上转发称赞了这一位有诚意的学习者，毕竟他一直倡导学习是一件简单快乐的事情。\n\nLink: [笔记源地址](https://www.slideshare.net/TessFerrandez/notes-from-coursera-deep-learning-courses-by-andrew-ng \"笔记源地址\")\n\n<!--more-->\n\n# 深度学习介绍\n![](./AnderewNg-deeplearning-note-summary/1.png)\n# 逻辑回归\n![](./AnderewNg-deeplearning-note-summary/2.png)\n# 浅层神经网络\n![](./AnderewNg-deeplearning-note-summary/3.png)\n# 深层神经网络\n![](./AnderewNg-deeplearning-note-summary/4.png)\n# 机器学习应用程序设置\n![](./AnderewNg-deeplearning-note-summary/5.png)\n# 正则化——防止过拟合\n![](./AnderewNg-deeplearning-note-summary/6.png)\n# 优化训练\n![](./AnderewNg-deeplearning-note-summary/7.png)\n# 优化算法\n![](./AnderewNg-deeplearning-note-summary/8.png)\n# 超参数调试\n![](./AnderewNg-deeplearning-note-summary/9.png)\n# 机器学习项目构建\n![](./AnderewNg-deeplearning-note-summary/10.png)\n# 错误分析\n![](./AnderewNg-deeplearning-note-summary/11.png)\n# 训练 vs 验证/测试 失配\n![](./AnderewNg-deeplearning-note-summary/12.png)\n# 扩展学习\n![](./AnderewNg-deeplearning-note-summary/13.png)\n# 卷积基础\n![](./AnderewNg-deeplearning-note-summary/14.png)\n# Padding\n![](./AnderewNg-deeplearning-note-summary/15.png)\n# 深层 CNN\n![](./AnderewNg-deeplearning-note-summary/16.png)\n# 典型的 CNN 模型\n![](./AnderewNg-deeplearning-note-summary/17.png)\n# ResNet\n![](./AnderewNg-deeplearning-note-summary/18.png)\n# 实用建议\n![](./AnderewNg-deeplearning-note-summary/19.png)\n# 检测算法\n![](./AnderewNg-deeplearning-note-summary/20.png)\n# 人脸识别\n![](./AnderewNg-deeplearning-note-summary/21.png)\n# 神经风格迁移\n![](./AnderewNg-deeplearning-note-summary/22.png)\n# 循环神经网络\n![](./AnderewNg-deeplearning-note-summary/23.png)\n# 更多 RNN 模型\n![](./AnderewNg-deeplearning-note-summary/24.png)\n# NLP-词嵌入\n![](./AnderewNg-deeplearning-note-summary/25.png)\n# 词嵌入详解\n![](./AnderewNg-deeplearning-note-summary/26.png)\n# 序列到序列基本模型\n![](./AnderewNg-deeplearning-note-summary/27.png)\n# 序列到序列\n![](./AnderewNg-deeplearning-note-summary/28.png)","source":"_posts/AnderewNg-deeplearning-note-summary.md","raw":"---\ntitle: 吴恩达deeplearning.ai课程笔记总结\ncopyright: true\ntop: 1\ndate: 2019-03-25 18:30:30\ncategories: DeepLearning\ntags:\n- note\n- deeplearning\n---\n\n在吴恩达机器学习系列课程完结后不久，一位名叫[Tess Ferrandez](https://www.slideshare.net/TessFerrandez?utm_campaign=profiletracking&utm_medium=sssite&utm_source=ssslideview \"Tess Ferrandez小姐姐的主页\")的小姐姐在推特上分享了一套自己的课程笔记，瞬间收获了3k+赞和1k+转发。\n\n不同于满屏公式代码的黑白笔记，这套信息图不仅知识点满满，且行文构图都像插画一样颜值颇高。吴恩达自己也在推特上转发称赞了这一位有诚意的学习者，毕竟他一直倡导学习是一件简单快乐的事情。\n\nLink: [笔记源地址](https://www.slideshare.net/TessFerrandez/notes-from-coursera-deep-learning-courses-by-andrew-ng \"笔记源地址\")\n\n<!--more-->\n\n# 深度学习介绍\n![](./AnderewNg-deeplearning-note-summary/1.png)\n# 逻辑回归\n![](./AnderewNg-deeplearning-note-summary/2.png)\n# 浅层神经网络\n![](./AnderewNg-deeplearning-note-summary/3.png)\n# 深层神经网络\n![](./AnderewNg-deeplearning-note-summary/4.png)\n# 机器学习应用程序设置\n![](./AnderewNg-deeplearning-note-summary/5.png)\n# 正则化——防止过拟合\n![](./AnderewNg-deeplearning-note-summary/6.png)\n# 优化训练\n![](./AnderewNg-deeplearning-note-summary/7.png)\n# 优化算法\n![](./AnderewNg-deeplearning-note-summary/8.png)\n# 超参数调试\n![](./AnderewNg-deeplearning-note-summary/9.png)\n# 机器学习项目构建\n![](./AnderewNg-deeplearning-note-summary/10.png)\n# 错误分析\n![](./AnderewNg-deeplearning-note-summary/11.png)\n# 训练 vs 验证/测试 失配\n![](./AnderewNg-deeplearning-note-summary/12.png)\n# 扩展学习\n![](./AnderewNg-deeplearning-note-summary/13.png)\n# 卷积基础\n![](./AnderewNg-deeplearning-note-summary/14.png)\n# Padding\n![](./AnderewNg-deeplearning-note-summary/15.png)\n# 深层 CNN\n![](./AnderewNg-deeplearning-note-summary/16.png)\n# 典型的 CNN 模型\n![](./AnderewNg-deeplearning-note-summary/17.png)\n# ResNet\n![](./AnderewNg-deeplearning-note-summary/18.png)\n# 实用建议\n![](./AnderewNg-deeplearning-note-summary/19.png)\n# 检测算法\n![](./AnderewNg-deeplearning-note-summary/20.png)\n# 人脸识别\n![](./AnderewNg-deeplearning-note-summary/21.png)\n# 神经风格迁移\n![](./AnderewNg-deeplearning-note-summary/22.png)\n# 循环神经网络\n![](./AnderewNg-deeplearning-note-summary/23.png)\n# 更多 RNN 模型\n![](./AnderewNg-deeplearning-note-summary/24.png)\n# NLP-词嵌入\n![](./AnderewNg-deeplearning-note-summary/25.png)\n# 词嵌入详解\n![](./AnderewNg-deeplearning-note-summary/26.png)\n# 序列到序列基本模型\n![](./AnderewNg-deeplearning-note-summary/27.png)\n# 序列到序列\n![](./AnderewNg-deeplearning-note-summary/28.png)","slug":"AnderewNg-deeplearning-note-summary","published":1,"updated":"2019-05-13T11:41:12.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa940004m8veaipm4m46","content":"<p>在吴恩达机器学习系列课程完结后不久，一位名叫<a href=\"https://www.slideshare.net/TessFerrandez?utm_campaign=profiletracking&amp;utm_medium=sssite&amp;utm_source=ssslideview\" title=\"Tess Ferrandez小姐姐的主页\" rel=\"external nofollow\" target=\"_blank\">Tess Ferrandez</a>的小姐姐在推特上分享了一套自己的课程笔记，瞬间收获了3k+赞和1k+转发。</p>\n<p>不同于满屏公式代码的黑白笔记，这套信息图不仅知识点满满，且行文构图都像插画一样颜值颇高。吴恩达自己也在推特上转发称赞了这一位有诚意的学习者，毕竟他一直倡导学习是一件简单快乐的事情。</p>\n<p>Link: <a href=\"https://www.slideshare.net/TessFerrandez/notes-from-coursera-deep-learning-courses-by-andrew-ng\" title=\"笔记源地址\" rel=\"external nofollow\" target=\"_blank\">笔记源地址</a></p>\n<a id=\"more\"></a>\n<h1 id=\"深度学习介绍\"><a href=\"#深度学习介绍\" class=\"headerlink\" title=\"深度学习介绍\"></a>深度学习介绍</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/1.png\" alt=\"\"></p>\n<h1 id=\"逻辑回归\"><a href=\"#逻辑回归\" class=\"headerlink\" title=\"逻辑回归\"></a>逻辑回归</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/2.png\" alt=\"\"></p>\n<h1 id=\"浅层神经网络\"><a href=\"#浅层神经网络\" class=\"headerlink\" title=\"浅层神经网络\"></a>浅层神经网络</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/3.png\" alt=\"\"></p>\n<h1 id=\"深层神经网络\"><a href=\"#深层神经网络\" class=\"headerlink\" title=\"深层神经网络\"></a>深层神经网络</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/4.png\" alt=\"\"></p>\n<h1 id=\"机器学习应用程序设置\"><a href=\"#机器学习应用程序设置\" class=\"headerlink\" title=\"机器学习应用程序设置\"></a>机器学习应用程序设置</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/5.png\" alt=\"\"></p>\n<h1 id=\"正则化——防止过拟合\"><a href=\"#正则化——防止过拟合\" class=\"headerlink\" title=\"正则化——防止过拟合\"></a>正则化——防止过拟合</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/6.png\" alt=\"\"></p>\n<h1 id=\"优化训练\"><a href=\"#优化训练\" class=\"headerlink\" title=\"优化训练\"></a>优化训练</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/7.png\" alt=\"\"></p>\n<h1 id=\"优化算法\"><a href=\"#优化算法\" class=\"headerlink\" title=\"优化算法\"></a>优化算法</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/8.png\" alt=\"\"></p>\n<h1 id=\"超参数调试\"><a href=\"#超参数调试\" class=\"headerlink\" title=\"超参数调试\"></a>超参数调试</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/9.png\" alt=\"\"></p>\n<h1 id=\"机器学习项目构建\"><a href=\"#机器学习项目构建\" class=\"headerlink\" title=\"机器学习项目构建\"></a>机器学习项目构建</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/10.png\" alt=\"\"></p>\n<h1 id=\"错误分析\"><a href=\"#错误分析\" class=\"headerlink\" title=\"错误分析\"></a>错误分析</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/11.png\" alt=\"\"></p>\n<h1 id=\"训练-vs-验证-测试-失配\"><a href=\"#训练-vs-验证-测试-失配\" class=\"headerlink\" title=\"训练 vs 验证/测试 失配\"></a>训练 vs 验证/测试 失配</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/12.png\" alt=\"\"></p>\n<h1 id=\"扩展学习\"><a href=\"#扩展学习\" class=\"headerlink\" title=\"扩展学习\"></a>扩展学习</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/13.png\" alt=\"\"></p>\n<h1 id=\"卷积基础\"><a href=\"#卷积基础\" class=\"headerlink\" title=\"卷积基础\"></a>卷积基础</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/14.png\" alt=\"\"></p>\n<h1 id=\"Padding\"><a href=\"#Padding\" class=\"headerlink\" title=\"Padding\"></a>Padding</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/15.png\" alt=\"\"></p>\n<h1 id=\"深层-CNN\"><a href=\"#深层-CNN\" class=\"headerlink\" title=\"深层 CNN\"></a>深层 CNN</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/16.png\" alt=\"\"></p>\n<h1 id=\"典型的-CNN-模型\"><a href=\"#典型的-CNN-模型\" class=\"headerlink\" title=\"典型的 CNN 模型\"></a>典型的 CNN 模型</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/17.png\" alt=\"\"></p>\n<h1 id=\"ResNet\"><a href=\"#ResNet\" class=\"headerlink\" title=\"ResNet\"></a>ResNet</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/18.png\" alt=\"\"></p>\n<h1 id=\"实用建议\"><a href=\"#实用建议\" class=\"headerlink\" title=\"实用建议\"></a>实用建议</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/19.png\" alt=\"\"></p>\n<h1 id=\"检测算法\"><a href=\"#检测算法\" class=\"headerlink\" title=\"检测算法\"></a>检测算法</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/20.png\" alt=\"\"></p>\n<h1 id=\"人脸识别\"><a href=\"#人脸识别\" class=\"headerlink\" title=\"人脸识别\"></a>人脸识别</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/21.png\" alt=\"\"></p>\n<h1 id=\"神经风格迁移\"><a href=\"#神经风格迁移\" class=\"headerlink\" title=\"神经风格迁移\"></a>神经风格迁移</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/22.png\" alt=\"\"></p>\n<h1 id=\"循环神经网络\"><a href=\"#循环神经网络\" class=\"headerlink\" title=\"循环神经网络\"></a>循环神经网络</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/23.png\" alt=\"\"></p>\n<h1 id=\"更多-RNN-模型\"><a href=\"#更多-RNN-模型\" class=\"headerlink\" title=\"更多 RNN 模型\"></a>更多 RNN 模型</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/24.png\" alt=\"\"></p>\n<h1 id=\"NLP-词嵌入\"><a href=\"#NLP-词嵌入\" class=\"headerlink\" title=\"NLP-词嵌入\"></a>NLP-词嵌入</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/25.png\" alt=\"\"></p>\n<h1 id=\"词嵌入详解\"><a href=\"#词嵌入详解\" class=\"headerlink\" title=\"词嵌入详解\"></a>词嵌入详解</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/26.png\" alt=\"\"></p>\n<h1 id=\"序列到序列基本模型\"><a href=\"#序列到序列基本模型\" class=\"headerlink\" title=\"序列到序列基本模型\"></a>序列到序列基本模型</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/27.png\" alt=\"\"></p>\n<h1 id=\"序列到序列\"><a href=\"#序列到序列\" class=\"headerlink\" title=\"序列到序列\"></a>序列到序列</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/28.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在吴恩达机器学习系列课程完结后不久，一位名叫<a href=\"https://www.slideshare.net/TessFerrandez?utm_campaign=profiletracking&amp;utm_medium=sssite&amp;utm_source=ssslideview\" title=\"Tess Ferrandez小姐姐的主页\" rel=\"external nofollow\" target=\"_blank\">Tess Ferrandez</a>的小姐姐在推特上分享了一套自己的课程笔记，瞬间收获了3k+赞和1k+转发。</p>\n<p>不同于满屏公式代码的黑白笔记，这套信息图不仅知识点满满，且行文构图都像插画一样颜值颇高。吴恩达自己也在推特上转发称赞了这一位有诚意的学习者，毕竟他一直倡导学习是一件简单快乐的事情。</p>\n<p>Link: <a href=\"https://www.slideshare.net/TessFerrandez/notes-from-coursera-deep-learning-courses-by-andrew-ng\" title=\"笔记源地址\" rel=\"external nofollow\" target=\"_blank\">笔记源地址</a></p>","more":"<h1 id=\"深度学习介绍\"><a href=\"#深度学习介绍\" class=\"headerlink\" title=\"深度学习介绍\"></a>深度学习介绍</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/1.png\" alt=\"\"></p>\n<h1 id=\"逻辑回归\"><a href=\"#逻辑回归\" class=\"headerlink\" title=\"逻辑回归\"></a>逻辑回归</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/2.png\" alt=\"\"></p>\n<h1 id=\"浅层神经网络\"><a href=\"#浅层神经网络\" class=\"headerlink\" title=\"浅层神经网络\"></a>浅层神经网络</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/3.png\" alt=\"\"></p>\n<h1 id=\"深层神经网络\"><a href=\"#深层神经网络\" class=\"headerlink\" title=\"深层神经网络\"></a>深层神经网络</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/4.png\" alt=\"\"></p>\n<h1 id=\"机器学习应用程序设置\"><a href=\"#机器学习应用程序设置\" class=\"headerlink\" title=\"机器学习应用程序设置\"></a>机器学习应用程序设置</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/5.png\" alt=\"\"></p>\n<h1 id=\"正则化——防止过拟合\"><a href=\"#正则化——防止过拟合\" class=\"headerlink\" title=\"正则化——防止过拟合\"></a>正则化——防止过拟合</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/6.png\" alt=\"\"></p>\n<h1 id=\"优化训练\"><a href=\"#优化训练\" class=\"headerlink\" title=\"优化训练\"></a>优化训练</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/7.png\" alt=\"\"></p>\n<h1 id=\"优化算法\"><a href=\"#优化算法\" class=\"headerlink\" title=\"优化算法\"></a>优化算法</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/8.png\" alt=\"\"></p>\n<h1 id=\"超参数调试\"><a href=\"#超参数调试\" class=\"headerlink\" title=\"超参数调试\"></a>超参数调试</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/9.png\" alt=\"\"></p>\n<h1 id=\"机器学习项目构建\"><a href=\"#机器学习项目构建\" class=\"headerlink\" title=\"机器学习项目构建\"></a>机器学习项目构建</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/10.png\" alt=\"\"></p>\n<h1 id=\"错误分析\"><a href=\"#错误分析\" class=\"headerlink\" title=\"错误分析\"></a>错误分析</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/11.png\" alt=\"\"></p>\n<h1 id=\"训练-vs-验证-测试-失配\"><a href=\"#训练-vs-验证-测试-失配\" class=\"headerlink\" title=\"训练 vs 验证/测试 失配\"></a>训练 vs 验证/测试 失配</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/12.png\" alt=\"\"></p>\n<h1 id=\"扩展学习\"><a href=\"#扩展学习\" class=\"headerlink\" title=\"扩展学习\"></a>扩展学习</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/13.png\" alt=\"\"></p>\n<h1 id=\"卷积基础\"><a href=\"#卷积基础\" class=\"headerlink\" title=\"卷积基础\"></a>卷积基础</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/14.png\" alt=\"\"></p>\n<h1 id=\"Padding\"><a href=\"#Padding\" class=\"headerlink\" title=\"Padding\"></a>Padding</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/15.png\" alt=\"\"></p>\n<h1 id=\"深层-CNN\"><a href=\"#深层-CNN\" class=\"headerlink\" title=\"深层 CNN\"></a>深层 CNN</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/16.png\" alt=\"\"></p>\n<h1 id=\"典型的-CNN-模型\"><a href=\"#典型的-CNN-模型\" class=\"headerlink\" title=\"典型的 CNN 模型\"></a>典型的 CNN 模型</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/17.png\" alt=\"\"></p>\n<h1 id=\"ResNet\"><a href=\"#ResNet\" class=\"headerlink\" title=\"ResNet\"></a>ResNet</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/18.png\" alt=\"\"></p>\n<h1 id=\"实用建议\"><a href=\"#实用建议\" class=\"headerlink\" title=\"实用建议\"></a>实用建议</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/19.png\" alt=\"\"></p>\n<h1 id=\"检测算法\"><a href=\"#检测算法\" class=\"headerlink\" title=\"检测算法\"></a>检测算法</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/20.png\" alt=\"\"></p>\n<h1 id=\"人脸识别\"><a href=\"#人脸识别\" class=\"headerlink\" title=\"人脸识别\"></a>人脸识别</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/21.png\" alt=\"\"></p>\n<h1 id=\"神经风格迁移\"><a href=\"#神经风格迁移\" class=\"headerlink\" title=\"神经风格迁移\"></a>神经风格迁移</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/22.png\" alt=\"\"></p>\n<h1 id=\"循环神经网络\"><a href=\"#循环神经网络\" class=\"headerlink\" title=\"循环神经网络\"></a>循环神经网络</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/23.png\" alt=\"\"></p>\n<h1 id=\"更多-RNN-模型\"><a href=\"#更多-RNN-模型\" class=\"headerlink\" title=\"更多 RNN 模型\"></a>更多 RNN 模型</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/24.png\" alt=\"\"></p>\n<h1 id=\"NLP-词嵌入\"><a href=\"#NLP-词嵌入\" class=\"headerlink\" title=\"NLP-词嵌入\"></a>NLP-词嵌入</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/25.png\" alt=\"\"></p>\n<h1 id=\"词嵌入详解\"><a href=\"#词嵌入详解\" class=\"headerlink\" title=\"词嵌入详解\"></a>词嵌入详解</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/26.png\" alt=\"\"></p>\n<h1 id=\"序列到序列基本模型\"><a href=\"#序列到序列基本模型\" class=\"headerlink\" title=\"序列到序列基本模型\"></a>序列到序列基本模型</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/27.png\" alt=\"\"></p>\n<h1 id=\"序列到序列\"><a href=\"#序列到序列\" class=\"headerlink\" title=\"序列到序列\"></a>序列到序列</h1><p><img src=\"./AnderewNg-deeplearning-note-summary/28.png\" alt=\"\"></p>"},{"title":"Git命令学习记录","date":"2018-12-29T07:48:51.000Z","updated":"2019-01-02T06:38:24.000Z","_content":"\n本文记录了使用Git过程中一些常用的、复杂的命令。\n\n<!--more-->\n\n- 删除远程仓库的文件,保留本地的文件\n\n  ```\n  git rm -r /path/to/filename\n  git commit -m \"msg\"\n  git push\n  ```\n\n- 删除远程仓库的文件,同时删除本地文件\n\n  ```\n  git rm /path/to/filename\n  git commit -m \"msg\"\n  git push\n  ```\n\n\n- 查看本地所有分支\n\n  ```\n  git branch -a\n  ```\n  \n- 查看本地分支\n\n  ```\n  git branch\n  ```\n\n- 切换分支\n\n  ```\n  git checkout [branchname]\n  ```\n  \n- 查看各个分支当前所指的对象\n\n  ```\n  git log --oneline --decorate\n  ```\n  \n- 如果我同一项目有两个不同的版本，怎么切换某一版本到master分支呢？比如说我有两个分支名字为A和B，目前默认master分支指向A，现在我想把master切换至B，该怎么做呢？\n  \n  ```\n  git branch -m master A\n  把当前的master分支内容放置分支A\n  git branch -m B master\n  将分支B重命名为master\n  git push -f origin master\n  更新master分支\n  ```\n  \n- 如果在本地git仓库下有另外一个clone过来的git仓库，那么当使用`git add .`，然后再`git commit ...`时会报错。并且上传到仓库的文件夹是空的，解决方案如下：\n  1. `cd`到`clone`的仓库目录下，执行`rd /s/q .git`命令，删除`clone`的仓库目录下的`.git`文件夹\n  2. 回到仓库根目录删除仓库中的空文件夹\n\n     2.1 `git rm -r --cached \"themes/[branchname]\"`\n     \n     2.2 `git commit -m \"remove empty folder\"`\n     \n     2.3 `git push origin master`\n     \n  3. 在仓库根目录重新提交代码\n\n     3.1 `git add .`\n     \n     3.2 `git commit -m \"repush\"`\n     \n     3.3 `git push origin master`","source":"_posts/Git-learn.md","raw":"---\ntitle: Git命令学习记录\ndate: 2018-12-29 15:48:51\nupdated: 2019-01-02 14:38:24\ncategories: 小知识\ntags: Git\n---\n\n本文记录了使用Git过程中一些常用的、复杂的命令。\n\n<!--more-->\n\n- 删除远程仓库的文件,保留本地的文件\n\n  ```\n  git rm -r /path/to/filename\n  git commit -m \"msg\"\n  git push\n  ```\n\n- 删除远程仓库的文件,同时删除本地文件\n\n  ```\n  git rm /path/to/filename\n  git commit -m \"msg\"\n  git push\n  ```\n\n\n- 查看本地所有分支\n\n  ```\n  git branch -a\n  ```\n  \n- 查看本地分支\n\n  ```\n  git branch\n  ```\n\n- 切换分支\n\n  ```\n  git checkout [branchname]\n  ```\n  \n- 查看各个分支当前所指的对象\n\n  ```\n  git log --oneline --decorate\n  ```\n  \n- 如果我同一项目有两个不同的版本，怎么切换某一版本到master分支呢？比如说我有两个分支名字为A和B，目前默认master分支指向A，现在我想把master切换至B，该怎么做呢？\n  \n  ```\n  git branch -m master A\n  把当前的master分支内容放置分支A\n  git branch -m B master\n  将分支B重命名为master\n  git push -f origin master\n  更新master分支\n  ```\n  \n- 如果在本地git仓库下有另外一个clone过来的git仓库，那么当使用`git add .`，然后再`git commit ...`时会报错。并且上传到仓库的文件夹是空的，解决方案如下：\n  1. `cd`到`clone`的仓库目录下，执行`rd /s/q .git`命令，删除`clone`的仓库目录下的`.git`文件夹\n  2. 回到仓库根目录删除仓库中的空文件夹\n\n     2.1 `git rm -r --cached \"themes/[branchname]\"`\n     \n     2.2 `git commit -m \"remove empty folder\"`\n     \n     2.3 `git push origin master`\n     \n  3. 在仓库根目录重新提交代码\n\n     3.1 `git add .`\n     \n     3.2 `git commit -m \"repush\"`\n     \n     3.3 `git push origin master`","slug":"Git-learn","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa990008m8ve34c3mmwh","content":"<p>本文记录了使用Git过程中一些常用的、复杂的命令。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>删除远程仓库的文件,保留本地的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r /path/to/filename</span><br><span class=\"line\">git commit -m &quot;msg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程仓库的文件,同时删除本地文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm /path/to/filename</span><br><span class=\"line\">git commit -m &quot;msg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看本地所有分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>查看本地分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branchname]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>查看各个分支当前所指的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline --decorate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果我同一项目有两个不同的版本，怎么切换某一版本到master分支呢？比如说我有两个分支名字为A和B，目前默认master分支指向A，现在我想把master切换至B，该怎么做呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m master A</span><br><span class=\"line\">把当前的master分支内容放置分支A</span><br><span class=\"line\">git branch -m B master</span><br><span class=\"line\">将分支B重命名为master</span><br><span class=\"line\">git push -f origin master</span><br><span class=\"line\">更新master分支</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果在本地git仓库下有另外一个clone过来的git仓库，那么当使用<code>git add .</code>，然后再<code>git commit ...</code>时会报错。并且上传到仓库的文件夹是空的，解决方案如下：</p>\n<ol>\n<li><code>cd</code>到<code>clone</code>的仓库目录下，执行<code>rd /s/q .git</code>命令，删除<code>clone</code>的仓库目录下的<code>.git</code>文件夹</li>\n<li><p>回到仓库根目录删除仓库中的空文件夹</p>\n<p>2.1 <code>git rm -r --cached &quot;themes/[branchname]&quot;</code></p>\n<p>2.2 <code>git commit -m &quot;remove empty folder&quot;</code></p>\n<p>2.3 <code>git push origin master</code></p>\n</li>\n<li><p>在仓库根目录重新提交代码</p>\n<p>3.1 <code>git add .</code></p>\n<p>3.2 <code>git commit -m &quot;repush&quot;</code></p>\n<p>3.3 <code>git push origin master</code></p>\n</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文记录了使用Git过程中一些常用的、复杂的命令。</p>","more":"<ul>\n<li><p>删除远程仓库的文件,保留本地的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r /path/to/filename</span><br><span class=\"line\">git commit -m &quot;msg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程仓库的文件,同时删除本地文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm /path/to/filename</span><br><span class=\"line\">git commit -m &quot;msg&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看本地所有分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>查看本地分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branchname]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>查看各个分支当前所指的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline --decorate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果我同一项目有两个不同的版本，怎么切换某一版本到master分支呢？比如说我有两个分支名字为A和B，目前默认master分支指向A，现在我想把master切换至B，该怎么做呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m master A</span><br><span class=\"line\">把当前的master分支内容放置分支A</span><br><span class=\"line\">git branch -m B master</span><br><span class=\"line\">将分支B重命名为master</span><br><span class=\"line\">git push -f origin master</span><br><span class=\"line\">更新master分支</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果在本地git仓库下有另外一个clone过来的git仓库，那么当使用<code>git add .</code>，然后再<code>git commit ...</code>时会报错。并且上传到仓库的文件夹是空的，解决方案如下：</p>\n<ol>\n<li><code>cd</code>到<code>clone</code>的仓库目录下，执行<code>rd /s/q .git</code>命令，删除<code>clone</code>的仓库目录下的<code>.git</code>文件夹</li>\n<li><p>回到仓库根目录删除仓库中的空文件夹</p>\n<p>2.1 <code>git rm -r --cached &quot;themes/[branchname]&quot;</code></p>\n<p>2.2 <code>git commit -m &quot;remove empty folder&quot;</code></p>\n<p>2.3 <code>git push origin master</code></p>\n</li>\n<li><p>在仓库根目录重新提交代码</p>\n<p>3.1 <code>git add .</code></p>\n<p>3.2 <code>git commit -m &quot;repush&quot;</code></p>\n<p>3.3 <code>git push origin master</code></p>\n</li>\n</ol>\n</li>\n</ul>"},{"title":"conda环境和pip包的转移","copyright":true,"top":1,"date":"2019-04-14T08:52:41.000Z","_content":"\n本文记录了如何导出、导入自己的conda环境，对于pip安装的包如何导出、导入。\n\n<!--more-->\n\n# Conda 环境\n\n1. 激活环境\n`conda activate [env_name]`\n2. 导出环境\n`conda env export > [env_filename].yaml`\n当前环境将被保存在定义的`.yaml`文件中\n3. 导入环境\n`conda env create -f [env_filename].yaml`\n移植过来的conda环境只安装了原环境中使用`conda install`等命令安装的包, 使用`pip`命令安装的包需要重新安装\n\n# pip包\n\n1. 导出\n`pip freeze > requirements.txt`\n2. 导入\n`pip install -r requirements.txt`\n","source":"_posts/conda环境和pip包的转移.md","raw":"---\ntitle: conda环境和pip包的转移\ncopyright: true\ntop: 1\ndate: 2019-04-14 16:52:41\ncategories: Conda\ntags:\n- conda\n---\n\n本文记录了如何导出、导入自己的conda环境，对于pip安装的包如何导出、导入。\n\n<!--more-->\n\n# Conda 环境\n\n1. 激活环境\n`conda activate [env_name]`\n2. 导出环境\n`conda env export > [env_filename].yaml`\n当前环境将被保存在定义的`.yaml`文件中\n3. 导入环境\n`conda env create -f [env_filename].yaml`\n移植过来的conda环境只安装了原环境中使用`conda install`等命令安装的包, 使用`pip`命令安装的包需要重新安装\n\n# pip包\n\n1. 导出\n`pip freeze > requirements.txt`\n2. 导入\n`pip install -r requirements.txt`\n","slug":"conda环境和pip包的转移","published":1,"updated":"2019-05-13T11:42:19.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9d000am8vextgp6tl5","content":"<p>本文记录了如何导出、导入自己的conda环境，对于pip安装的包如何导出、导入。</p>\n<a id=\"more\"></a>\n<h1 id=\"Conda-环境\"><a href=\"#Conda-环境\" class=\"headerlink\" title=\"Conda 环境\"></a>Conda 环境</h1><ol>\n<li>激活环境<br><code>conda activate [env_name]</code></li>\n<li>导出环境<br><code>conda env export &gt; [env_filename].yaml</code><br>当前环境将被保存在定义的<code>.yaml</code>文件中</li>\n<li>导入环境<br><code>conda env create -f [env_filename].yaml</code><br>移植过来的conda环境只安装了原环境中使用<code>conda install</code>等命令安装的包, 使用<code>pip</code>命令安装的包需要重新安装</li>\n</ol>\n<h1 id=\"pip包\"><a href=\"#pip包\" class=\"headerlink\" title=\"pip包\"></a>pip包</h1><ol>\n<li>导出<br><code>pip freeze &gt; requirements.txt</code></li>\n<li>导入<br><code>pip install -r requirements.txt</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>本文记录了如何导出、导入自己的conda环境，对于pip安装的包如何导出、导入。</p>","more":"<h1 id=\"Conda-环境\"><a href=\"#Conda-环境\" class=\"headerlink\" title=\"Conda 环境\"></a>Conda 环境</h1><ol>\n<li>激活环境<br><code>conda activate [env_name]</code></li>\n<li>导出环境<br><code>conda env export &gt; [env_filename].yaml</code><br>当前环境将被保存在定义的<code>.yaml</code>文件中</li>\n<li>导入环境<br><code>conda env create -f [env_filename].yaml</code><br>移植过来的conda环境只安装了原环境中使用<code>conda install</code>等命令安装的包, 使用<code>pip</code>命令安装的包需要重新安装</li>\n</ol>\n<h1 id=\"pip包\"><a href=\"#pip包\" class=\"headerlink\" title=\"pip包\"></a>pip包</h1><ol>\n<li>导出<br><code>pip freeze &gt; requirements.txt</code></li>\n<li>导入<br><code>pip install -r requirements.txt</code></li>\n</ol>"},{"title":"MarkDown基本语法","date":"2018-12-29T07:23:57.000Z","_content":"\n本文介绍了Markdown的基本语法。\n\n<!--more-->\n\n所有使用Markdown语法标记的符号后要加一个空格`Space`\n\n# 一、 标题\t{{ '{#' }}...}\n\n使用`#`来设置标题级数,一个`#`则代表一级标题,字体大小最大\n\n`#` \n\n# 一级标题\n\n`##`\n\n## 二级标题\n\n`###`\n\n### 三级标题\n\n`####`\n\n#### 四级标题\n\n`#####`\n\n##### 五级标题\n\n`######`\n\n###### 六级标题 \n\n# 二、 列表\n\n## 1. 无序列表\n使用`-`、`+`、`*`三个符号都可以\n\n- 使用`-`\n\n+ 使用`+`\n\n* 使用`*`\n\n如果在列表中想取消下一行的列表性质,需要按下退格`Backspace`删除列表前的圆点后,然后按`Shift`+`Tab`组合键来退回首位.\n\n- 一级列表\n  - 二级列表\n    - 三级列表\n      - 四级列表\n\n共有三级标题\n\n## 2. 有序列表\n\n数字加点加空格,如`1.[Space]`、`2.[Space]`\n\n需要往前挪动请按`Tab`键,往后挪动请按`Shift`+`Tab`组合键\n\n1. 第一级\n2. 第二级\n   1. 第二级第一小节\n   2. 第二级第二小节\n      1. 第二级第二小节第一小小节\n      2. 第二级第二小节第二小小节\n   3. 第二级第三小节\n3. 第三级\n\n# 三、 字体\n\n- *斜体*\n\n  用法:`*[内容]*`或`_[内容]_`,包含在两个`*`星号或两个`_`下划线中间的内容会倾斜\n\n  `*Hello World*`:*Hello World*\n\n  `_Hello World_`:_Hello World_\n\n- **加粗**\n\n  用法:`**[内容]**`,包含在四个`*`星号中间的内容会加粗\n\n  `**Hello World**`:**Hello World**\n\n- ***斜体加粗***\n\n  用法:`***[内容]***`,包含在六个`*`星号中间的内容会加粗并斜体\n\n  `***Hello World***`:***Hello World***\n\n- ~~删除线~~\n\n  用法:`~~[内容]~~`,包含在四个`~`波浪号中间的内容会添加删除线\n\n  `~~Hello World~~`:~~Hello World~~\n\n# 四、 引用\n\n`>`表示引用,与`#`用法相同\n\n`>`\n\n> 一级引用\n\n`>>`\n\n> > 二级引用\n\n`>>>`\n\n> > > 三级引用\n\n退格使用`Shift`+`Tab`\n\n# 五、 分割线\n\n大于等于三个的`-`或`+`或`*`\n\n`---`\n\n---\n\n`+++`\n\n+++\n\n`***`\n\n***\n\n# 六、 图片\n\n语法:`![图片文字](图片地址 \"鼠标放置时显示的信息\")`\n\n例子:\n\n`![大桥](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1546072097132&di=8669a22f7be9af8266cb1580d15c155d&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg \"美丽的桥梁\")`\n\n![大桥](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1546072097132&di=8669a22f7be9af8266cb1580d15c155d&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg \"美丽的桥梁\")\n\n# 七、 超链接\n\n语法:`[超链接名](超链接地址 \"鼠标放置时显示的信息\")`\n\n例子:`[百度一下,你就知道](www.baidu.com \"我就是百度\")`\n\n[百度一下,你就知道](https://www.baidu.com \"我就是百度\")\n\n# 八、 代码\n\n## 1. 单行\n\n使用<code>&#96;</code>反引号包裹\n\n## 2.多行,代码块\n\n使用三个反引号包裹\n\n<code>&#96;&#96;&#96;</code>\n\n使用<code>&#96;&#96;&#96;</code>+编程语言可以打开代码编辑器\n\n如 <code>&#96;&#96;&#96;</code>+python\n\n```python\nimport sys\n这是一个python语法的编译器\n```\n\n# 九、 表格\n\n每一行都使用`|`隔开\n\n第二行使用`:`设置对齐,两边都加表示文字居中,加在左边表示居左\n\n```\n|标题1|标题2|标题3|\n|-|:-:|:-|\n|1|2|3|\n```\n\n| 标题1 | 标题2 | 标题3 |\n| ----- | :---: | :---- |\n| 1     |   2   | 3     |\n\n\n\n\n\n# 十、 流程图\n\n```\n​```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n​```\n```\n\n```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n\n\n","source":"_posts/MarkDown-Grammar.md","raw":"---\ntitle:  MarkDown基本语法\ndate:   2018-12-29 15:23:57\ncategories: 小知识\ntags: markdown\n---\n\n本文介绍了Markdown的基本语法。\n\n<!--more-->\n\n所有使用Markdown语法标记的符号后要加一个空格`Space`\n\n# 一、 标题\t{{ '{#' }}...}\n\n使用`#`来设置标题级数,一个`#`则代表一级标题,字体大小最大\n\n`#` \n\n# 一级标题\n\n`##`\n\n## 二级标题\n\n`###`\n\n### 三级标题\n\n`####`\n\n#### 四级标题\n\n`#####`\n\n##### 五级标题\n\n`######`\n\n###### 六级标题 \n\n# 二、 列表\n\n## 1. 无序列表\n使用`-`、`+`、`*`三个符号都可以\n\n- 使用`-`\n\n+ 使用`+`\n\n* 使用`*`\n\n如果在列表中想取消下一行的列表性质,需要按下退格`Backspace`删除列表前的圆点后,然后按`Shift`+`Tab`组合键来退回首位.\n\n- 一级列表\n  - 二级列表\n    - 三级列表\n      - 四级列表\n\n共有三级标题\n\n## 2. 有序列表\n\n数字加点加空格,如`1.[Space]`、`2.[Space]`\n\n需要往前挪动请按`Tab`键,往后挪动请按`Shift`+`Tab`组合键\n\n1. 第一级\n2. 第二级\n   1. 第二级第一小节\n   2. 第二级第二小节\n      1. 第二级第二小节第一小小节\n      2. 第二级第二小节第二小小节\n   3. 第二级第三小节\n3. 第三级\n\n# 三、 字体\n\n- *斜体*\n\n  用法:`*[内容]*`或`_[内容]_`,包含在两个`*`星号或两个`_`下划线中间的内容会倾斜\n\n  `*Hello World*`:*Hello World*\n\n  `_Hello World_`:_Hello World_\n\n- **加粗**\n\n  用法:`**[内容]**`,包含在四个`*`星号中间的内容会加粗\n\n  `**Hello World**`:**Hello World**\n\n- ***斜体加粗***\n\n  用法:`***[内容]***`,包含在六个`*`星号中间的内容会加粗并斜体\n\n  `***Hello World***`:***Hello World***\n\n- ~~删除线~~\n\n  用法:`~~[内容]~~`,包含在四个`~`波浪号中间的内容会添加删除线\n\n  `~~Hello World~~`:~~Hello World~~\n\n# 四、 引用\n\n`>`表示引用,与`#`用法相同\n\n`>`\n\n> 一级引用\n\n`>>`\n\n> > 二级引用\n\n`>>>`\n\n> > > 三级引用\n\n退格使用`Shift`+`Tab`\n\n# 五、 分割线\n\n大于等于三个的`-`或`+`或`*`\n\n`---`\n\n---\n\n`+++`\n\n+++\n\n`***`\n\n***\n\n# 六、 图片\n\n语法:`![图片文字](图片地址 \"鼠标放置时显示的信息\")`\n\n例子:\n\n`![大桥](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1546072097132&di=8669a22f7be9af8266cb1580d15c155d&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg \"美丽的桥梁\")`\n\n![大桥](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1546072097132&di=8669a22f7be9af8266cb1580d15c155d&imgtype=0&src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg \"美丽的桥梁\")\n\n# 七、 超链接\n\n语法:`[超链接名](超链接地址 \"鼠标放置时显示的信息\")`\n\n例子:`[百度一下,你就知道](www.baidu.com \"我就是百度\")`\n\n[百度一下,你就知道](https://www.baidu.com \"我就是百度\")\n\n# 八、 代码\n\n## 1. 单行\n\n使用<code>&#96;</code>反引号包裹\n\n## 2.多行,代码块\n\n使用三个反引号包裹\n\n<code>&#96;&#96;&#96;</code>\n\n使用<code>&#96;&#96;&#96;</code>+编程语言可以打开代码编辑器\n\n如 <code>&#96;&#96;&#96;</code>+python\n\n```python\nimport sys\n这是一个python语法的编译器\n```\n\n# 九、 表格\n\n每一行都使用`|`隔开\n\n第二行使用`:`设置对齐,两边都加表示文字居中,加在左边表示居左\n\n```\n|标题1|标题2|标题3|\n|-|:-:|:-|\n|1|2|3|\n```\n\n| 标题1 | 标题2 | 标题3 |\n| ----- | :---: | :---- |\n| 1     |   2   | 3     |\n\n\n\n\n\n# 十、 流程图\n\n```\n​```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n​```\n```\n\n```flow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n\n\n","slug":"MarkDown-Grammar","published":1,"updated":"2019-05-13T11:49:05.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9e000bm8vejqrzkadz","content":"<p>本文介绍了Markdown的基本语法。</p>\n<a id=\"more\"></a>\n<p>所有使用Markdown语法标记的符号后要加一个空格<code>Space</code></p>\n<h1 id=\"一、-标题-…\"><a href=\"#一、-标题-…\" class=\"headerlink\" title=\"一、 标题    …}\"></a>一、 标题    {#…}</h1><p>使用<code>#</code>来设置标题级数,一个<code>#</code>则代表一级标题,字体大小最大</p>\n<p><code>#</code> </p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><p><code>##</code></p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p><code>###</code></p>\n<h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><p><code>####</code></p>\n<h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><p><code>#####</code></p>\n<h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><p><code>######</code></p>\n<h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h1 id=\"二、-列表\"><a href=\"#二、-列表\" class=\"headerlink\" title=\"二、 列表\"></a>二、 列表</h1><h2 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1. 无序列表\"></a>1. 无序列表</h2><p>使用<code>-</code>、<code>+</code>、<code>*</code>三个符号都可以</p>\n<ul>\n<li>使用<code>-</code></li>\n</ul>\n<ul>\n<li>使用<code>+</code></li>\n</ul>\n<ul>\n<li>使用<code>*</code></li>\n</ul>\n<p>如果在列表中想取消下一行的列表性质,需要按下退格<code>Backspace</code>删除列表前的圆点后,然后按<code>Shift</code>+<code>Tab</code>组合键来退回首位.</p>\n<ul>\n<li>一级列表<ul>\n<li>二级列表<ul>\n<li>三级列表<ul>\n<li>四级列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>共有三级标题</p>\n<h2 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2. 有序列表\"></a>2. 有序列表</h2><p>数字加点加空格,如<code>1.[Space]</code>、<code>2.[Space]</code></p>\n<p>需要往前挪动请按<code>Tab</code>键,往后挪动请按<code>Shift</code>+<code>Tab</code>组合键</p>\n<ol>\n<li>第一级</li>\n<li>第二级<ol>\n<li>第二级第一小节</li>\n<li>第二级第二小节<ol>\n<li>第二级第二小节第一小小节</li>\n<li>第二级第二小节第二小小节</li>\n</ol>\n</li>\n<li>第二级第三小节</li>\n</ol>\n</li>\n<li>第三级</li>\n</ol>\n<h1 id=\"三、-字体\"><a href=\"#三、-字体\" class=\"headerlink\" title=\"三、 字体\"></a>三、 字体</h1><ul>\n<li><p><em>斜体</em></p>\n<p>用法:<code>*[内容]*</code>或<code>_[内容]_</code>,包含在两个<code>*</code>星号或两个<code>_</code>下划线中间的内容会倾斜</p>\n<p><code>*Hello World*</code>:<em>Hello World</em></p>\n<p><code>_Hello World_</code>:_Hello World_</p>\n</li>\n<li><p><strong>加粗</strong></p>\n<p>用法:<code>**[内容]**</code>,包含在四个<code>*</code>星号中间的内容会加粗</p>\n<p><code>**Hello World**</code>:<strong>Hello World</strong></p>\n</li>\n<li><p><strong><em>斜体加粗</em></strong></p>\n<p>用法:<code>***[内容]***</code>,包含在六个<code>*</code>星号中间的内容会加粗并斜体</p>\n<p><code>***Hello World***</code>:<strong><em>Hello World</em></strong></p>\n</li>\n<li><p><del>删除线</del></p>\n<p>用法:<code>~~[内容]~~</code>,包含在四个<code>~</code>波浪号中间的内容会添加删除线</p>\n<p><code>~~Hello World~~</code>:<del>Hello World</del></p>\n</li>\n</ul>\n<h1 id=\"四、-引用\"><a href=\"#四、-引用\" class=\"headerlink\" title=\"四、 引用\"></a>四、 引用</h1><p><code>&gt;</code>表示引用,与<code>#</code>用法相同</p>\n<p><code>&gt;</code></p>\n<blockquote>\n<p>一级引用</p>\n</blockquote>\n<p><code>&gt;&gt;</code></p>\n<blockquote>\n<blockquote>\n<p>二级引用</p>\n</blockquote>\n</blockquote>\n<p><code>&gt;&gt;&gt;</code></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>三级引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>退格使用<code>Shift</code>+<code>Tab</code></p>\n<h1 id=\"五、-分割线\"><a href=\"#五、-分割线\" class=\"headerlink\" title=\"五、 分割线\"></a>五、 分割线</h1><p>大于等于三个的<code>-</code>或<code>+</code>或<code>*</code></p>\n<p><code>---</code></p>\n<hr>\n<p><code>+++</code></p>\n<p>+++</p>\n<p><code>***</code></p>\n<hr>\n<h1 id=\"六、-图片\"><a href=\"#六、-图片\" class=\"headerlink\" title=\"六、 图片\"></a>六、 图片</h1><p>语法:<code>![图片文字](图片地址 &quot;鼠标放置时显示的信息&quot;)</code></p>\n<p>例子:</p>\n<p><code>![大桥](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg &quot;美丽的桥梁&quot;)</code></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg\" alt=\"大桥\" title=\"美丽的桥梁\"></p>\n<h1 id=\"七、-超链接\"><a href=\"#七、-超链接\" class=\"headerlink\" title=\"七、 超链接\"></a>七、 超链接</h1><p>语法:<code>[超链接名](超链接地址 &quot;鼠标放置时显示的信息&quot;)</code></p>\n<p>例子:<code>[百度一下,你就知道](www.baidu.com &quot;我就是百度&quot;)</code></p>\n<p><a href=\"https://www.baidu.com\" title=\"我就是百度\" rel=\"external nofollow\" target=\"_blank\">百度一下,你就知道</a></p>\n<h1 id=\"八、-代码\"><a href=\"#八、-代码\" class=\"headerlink\" title=\"八、 代码\"></a>八、 代码</h1><h2 id=\"1-单行\"><a href=\"#1-单行\" class=\"headerlink\" title=\"1. 单行\"></a>1. 单行</h2><p>使用<code>&#96;</code>反引号包裹</p>\n<h2 id=\"2-多行-代码块\"><a href=\"#2-多行-代码块\" class=\"headerlink\" title=\"2.多行,代码块\"></a>2.多行,代码块</h2><p>使用三个反引号包裹</p>\n<p><code>&#96;&#96;&#96;</code></p>\n<p>使用<code>&#96;&#96;&#96;</code>+编程语言可以打开代码编辑器</p>\n<p>如 <code>&#96;&#96;&#96;</code>+python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">这是一个python语法的编译器</span><br></pre></td></tr></table></figure>\n<h1 id=\"九、-表格\"><a href=\"#九、-表格\" class=\"headerlink\" title=\"九、 表格\"></a>九、 表格</h1><p>每一行都使用<code>|</code>隔开</p>\n<p>第二行使用<code>:</code>设置对齐,两边都加表示文字居中,加在左边表示居左</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|标题1|标题2|标题3|</span><br><span class=\"line\">|-|:-:|:-|</span><br><span class=\"line\">|1|2|3|</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>标题1</th>\n<th style=\"text-align:center\">标题2</th>\n<th style=\"text-align:left\">标题3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">3</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"十、-流程图\"><a href=\"#十、-流程图\" class=\"headerlink\" title=\"十、 流程图\"></a>十、 流程图</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​```flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>本文介绍了Markdown的基本语法。</p>","more":"<p>所有使用Markdown语法标记的符号后要加一个空格<code>Space</code></p>\n<h1 id=\"一、-标题-…\"><a href=\"#一、-标题-…\" class=\"headerlink\" title=\"一、 标题    …}\"></a>一、 标题    {#…}</h1><p>使用<code>#</code>来设置标题级数,一个<code>#</code>则代表一级标题,字体大小最大</p>\n<p><code>#</code> </p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><p><code>##</code></p>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p><code>###</code></p>\n<h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><p><code>####</code></p>\n<h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><p><code>#####</code></p>\n<h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><p><code>######</code></p>\n<h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h1 id=\"二、-列表\"><a href=\"#二、-列表\" class=\"headerlink\" title=\"二、 列表\"></a>二、 列表</h1><h2 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1. 无序列表\"></a>1. 无序列表</h2><p>使用<code>-</code>、<code>+</code>、<code>*</code>三个符号都可以</p>\n<ul>\n<li>使用<code>-</code></li>\n</ul>\n<ul>\n<li>使用<code>+</code></li>\n</ul>\n<ul>\n<li>使用<code>*</code></li>\n</ul>\n<p>如果在列表中想取消下一行的列表性质,需要按下退格<code>Backspace</code>删除列表前的圆点后,然后按<code>Shift</code>+<code>Tab</code>组合键来退回首位.</p>\n<ul>\n<li>一级列表<ul>\n<li>二级列表<ul>\n<li>三级列表<ul>\n<li>四级列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>共有三级标题</p>\n<h2 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2. 有序列表\"></a>2. 有序列表</h2><p>数字加点加空格,如<code>1.[Space]</code>、<code>2.[Space]</code></p>\n<p>需要往前挪动请按<code>Tab</code>键,往后挪动请按<code>Shift</code>+<code>Tab</code>组合键</p>\n<ol>\n<li>第一级</li>\n<li>第二级<ol>\n<li>第二级第一小节</li>\n<li>第二级第二小节<ol>\n<li>第二级第二小节第一小小节</li>\n<li>第二级第二小节第二小小节</li>\n</ol>\n</li>\n<li>第二级第三小节</li>\n</ol>\n</li>\n<li>第三级</li>\n</ol>\n<h1 id=\"三、-字体\"><a href=\"#三、-字体\" class=\"headerlink\" title=\"三、 字体\"></a>三、 字体</h1><ul>\n<li><p><em>斜体</em></p>\n<p>用法:<code>*[内容]*</code>或<code>_[内容]_</code>,包含在两个<code>*</code>星号或两个<code>_</code>下划线中间的内容会倾斜</p>\n<p><code>*Hello World*</code>:<em>Hello World</em></p>\n<p><code>_Hello World_</code>:_Hello World_</p>\n</li>\n<li><p><strong>加粗</strong></p>\n<p>用法:<code>**[内容]**</code>,包含在四个<code>*</code>星号中间的内容会加粗</p>\n<p><code>**Hello World**</code>:<strong>Hello World</strong></p>\n</li>\n<li><p><strong><em>斜体加粗</em></strong></p>\n<p>用法:<code>***[内容]***</code>,包含在六个<code>*</code>星号中间的内容会加粗并斜体</p>\n<p><code>***Hello World***</code>:<strong><em>Hello World</em></strong></p>\n</li>\n<li><p><del>删除线</del></p>\n<p>用法:<code>~~[内容]~~</code>,包含在四个<code>~</code>波浪号中间的内容会添加删除线</p>\n<p><code>~~Hello World~~</code>:<del>Hello World</del></p>\n</li>\n</ul>\n<h1 id=\"四、-引用\"><a href=\"#四、-引用\" class=\"headerlink\" title=\"四、 引用\"></a>四、 引用</h1><p><code>&gt;</code>表示引用,与<code>#</code>用法相同</p>\n<p><code>&gt;</code></p>\n<blockquote>\n<p>一级引用</p>\n</blockquote>\n<p><code>&gt;&gt;</code></p>\n<blockquote>\n<blockquote>\n<p>二级引用</p>\n</blockquote>\n</blockquote>\n<p><code>&gt;&gt;&gt;</code></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>三级引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>退格使用<code>Shift</code>+<code>Tab</code></p>\n<h1 id=\"五、-分割线\"><a href=\"#五、-分割线\" class=\"headerlink\" title=\"五、 分割线\"></a>五、 分割线</h1><p>大于等于三个的<code>-</code>或<code>+</code>或<code>*</code></p>\n<p><code>---</code></p>\n<hr>\n<p><code>+++</code></p>\n<p>+++</p>\n<p><code>***</code></p>\n<hr>\n<h1 id=\"六、-图片\"><a href=\"#六、-图片\" class=\"headerlink\" title=\"六、 图片\"></a>六、 图片</h1><p>语法:<code>![图片文字](图片地址 &quot;鼠标放置时显示的信息&quot;)</code></p>\n<p>例子:</p>\n<p><code>![大桥](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg &quot;美丽的桥梁&quot;)</code></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg\" alt=\"大桥\" title=\"美丽的桥梁\"></p>\n<h1 id=\"七、-超链接\"><a href=\"#七、-超链接\" class=\"headerlink\" title=\"七、 超链接\"></a>七、 超链接</h1><p>语法:<code>[超链接名](超链接地址 &quot;鼠标放置时显示的信息&quot;)</code></p>\n<p>例子:<code>[百度一下,你就知道](www.baidu.com &quot;我就是百度&quot;)</code></p>\n<p><a href=\"https://www.baidu.com\" title=\"我就是百度\" rel=\"external nofollow\" target=\"_blank\">百度一下,你就知道</a></p>\n<h1 id=\"八、-代码\"><a href=\"#八、-代码\" class=\"headerlink\" title=\"八、 代码\"></a>八、 代码</h1><h2 id=\"1-单行\"><a href=\"#1-单行\" class=\"headerlink\" title=\"1. 单行\"></a>1. 单行</h2><p>使用<code>&#96;</code>反引号包裹</p>\n<h2 id=\"2-多行-代码块\"><a href=\"#2-多行-代码块\" class=\"headerlink\" title=\"2.多行,代码块\"></a>2.多行,代码块</h2><p>使用三个反引号包裹</p>\n<p><code>&#96;&#96;&#96;</code></p>\n<p>使用<code>&#96;&#96;&#96;</code>+编程语言可以打开代码编辑器</p>\n<p>如 <code>&#96;&#96;&#96;</code>+python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">这是一个python语法的编译器</span><br></pre></td></tr></table></figure>\n<h1 id=\"九、-表格\"><a href=\"#九、-表格\" class=\"headerlink\" title=\"九、 表格\"></a>九、 表格</h1><p>每一行都使用<code>|</code>隔开</p>\n<p>第二行使用<code>:</code>设置对齐,两边都加表示文字居中,加在左边表示居左</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|标题1|标题2|标题3|</span><br><span class=\"line\">|-|:-:|:-|</span><br><span class=\"line\">|1|2|3|</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>标题1</th>\n<th style=\"text-align:center\">标题2</th>\n<th style=\"text-align:left\">标题3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">3</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"十、-流程图\"><a href=\"#十、-流程图\" class=\"headerlink\" title=\"十、 流程图\"></a>十、 流程图</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​```flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>"},{"title":"Monte Carlo and Temporal-Difference","copyright":true,"mathjax":true,"password":123,"top":1,"date":"2019-05-13T11:11:58.000Z","keywords":null,"description":null,"_content":"\n本位介绍了强化学习中解决Model-Free问题的两个基本解决思路：蒙特卡洛Monte Carlo与时间差分Temporal-Difference。\n\n<!--more-->\n\n![](./mc-td/dp.png)\n\n![](./mc-td/mc.png)\n\n![](./mc-td/td.png)\n\n\n\n# 蒙特卡洛方法 Monte Carlo Methods\n\n\n\n# 时间差分学习 Temporal-Difference Learning\n\n","source":"_posts/mc-td.md","raw":"---\ntitle: Monte Carlo and Temporal-Difference\ncopyright: true\nmathjax: true\npassword: 123\ntop: 1\ndate: 2019-05-13 19:11:58\ncategories: ReinforcementLearning\ntags:\n- rl\nkeywords:\ndescription:\n---\n\n本位介绍了强化学习中解决Model-Free问题的两个基本解决思路：蒙特卡洛Monte Carlo与时间差分Temporal-Difference。\n\n<!--more-->\n\n![](./mc-td/dp.png)\n\n![](./mc-td/mc.png)\n\n![](./mc-td/td.png)\n\n\n\n# 蒙特卡洛方法 Monte Carlo Methods\n\n\n\n# 时间差分学习 Temporal-Difference Learning\n\n","slug":"mc-td","published":1,"updated":"2019-05-13T12:43:42.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9g000fm8veog2s26w7","content":"<p>本位介绍了强化学习中解决Model-Free问题的两个基本解决思路：蒙特卡洛Monte Carlo与时间差分Temporal-Difference。</p>\n<a id=\"more\"></a>\n<p><img src=\"./mc-td/dp.png\" alt=\"\"></p>\n<p><img src=\"./mc-td/mc.png\" alt=\"\"></p>\n<p><img src=\"./mc-td/td.png\" alt=\"\"></p>\n<h1 id=\"蒙特卡洛方法-Monte-Carlo-Methods\"><a href=\"#蒙特卡洛方法-Monte-Carlo-Methods\" class=\"headerlink\" title=\"蒙特卡洛方法 Monte Carlo Methods\"></a>蒙特卡洛方法 Monte Carlo Methods</h1><h1 id=\"时间差分学习-Temporal-Difference-Learning\"><a href=\"#时间差分学习-Temporal-Difference-Learning\" class=\"headerlink\" title=\"时间差分学习 Temporal-Difference Learning\"></a>时间差分学习 Temporal-Difference Learning</h1>","site":{"data":{}},"excerpt":"<p>本位介绍了强化学习中解决Model-Free问题的两个基本解决思路：蒙特卡洛Monte Carlo与时间差分Temporal-Difference。</p>","more":"<p><img src=\"./mc-td/dp.png\" alt=\"\"></p>\n<p><img src=\"./mc-td/mc.png\" alt=\"\"></p>\n<p><img src=\"./mc-td/td.png\" alt=\"\"></p>\n<h1 id=\"蒙特卡洛方法-Monte-Carlo-Methods\"><a href=\"#蒙特卡洛方法-Monte-Carlo-Methods\" class=\"headerlink\" title=\"蒙特卡洛方法 Monte Carlo Methods\"></a>蒙特卡洛方法 Monte Carlo Methods</h1><h1 id=\"时间差分学习-Temporal-Difference-Learning\"><a href=\"#时间差分学习-Temporal-Difference-Learning\" class=\"headerlink\" title=\"时间差分学习 Temporal-Difference Learning\"></a>时间差分学习 Temporal-Difference Learning</h1>"},{"title":"强化学习的类别","copyright":true,"top":1,"date":"2019-05-10T07:18:23.000Z","mathjax":true,"keywords":null,"description":null,"_content":"\n本文讲述了强化学习中各种算法、问题的分类规则。\n\n<!--more-->\n\n# Stationary or not\n\n根据环境十分稳定、可以将强化学习问题分为stationary、non-stationary。\n\n如果状态转移**和**奖励函数是确定的，即选择动作$a$后执行它的结果是确定的，那么这个环境就是stationary。\n\n![](./rl-classification/stationary.png)\n\n如果状态转移**或**奖励函数是不确定的，即选择动作$a$后执行它的结果是不确定的，那么这个环境就是non-stationary。\n\n![](./rl-classification/non-stationary.png)\n\n# Model Based-or-Free\n\n一直对这个问题的认识不清晰，直到最近（2019年5月12日19:13:53）才有了清晰的认识。\n\n需要注意的是，无论是Model-Based还是Model-Free都不是对强化学习问题的分类，而是对算法的分类。之前一直理解的是状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$的都是离散的，转移概率矩阵$\\mathcal{P}$是确定的，这样即是Model-Based，如果状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$或转移概率矩阵$\\mathcal{P}$是不确定的，则是Model-Free，其实这只是对Model的分类，并不是Model-Based与Model-Free的真实含义，Model-Based与Model-Free是对算法求解过程的分类，理解这个可以在阅读国外文献、实验环境时更清晰，提升自己对强化学习算法的理解深度。\n\nModel-Based：\n\n- 智能体Agent在已知模型（$\\mathcal{S,A,R,P}$有限且确定）或者先学习一个模型（使用有监督对状态转移、奖励函数进行学习而得到），并在这个模型中使用**planning**（预测所有状态转移可能）方法来计算解决方案\n\n> Now if we know what all those elements of an MDP are, we can just compute the solution before ever actually executing an action in the environment. In AI, we typically call computing the solution to a decision-making problem before executing an actual decision *planning*. Some classic planning algorithms for MDPs include Value Iteration, Policy Iteration, and whole lot more.\n\nModel-Free:\n\n- 智能体在模型（$\\mathcal{S,A,R,P}$可能确定但没有使用planning方式解决，也可能不确定）中试错，并且使用**learning**（不预测全部可能性）方法来产生最佳策略\n\n> But the RL problem isn’t so kind to us. What makes a problem an RL problem, rather than a planning problem, is the agent does *not* know all the elements of the MDP, precluding it from being able to plan a solution. Specifically, the agent does not know how the world will change in response to its actions (the transition function TT), nor what immediate reward it will receive for doing so (the reward function RR). The agent will simply have to try taking actions in the environment, observe what happens, and somehow, find a good policy from doing so.\n\n根据Model-Based、Model-Free对算法、解决方法进行分类：\n\nModel-Based：DP、Policy Iteration、Value Iteration……\n\nModel-Free：SARSA、Q-Learning、PG……\n\n---\n\n> if you want a way to check if an RL algorithm is model-based or model-free, ask yourself this question: after learning, can the agent make predictions about what the next state and reward will be before it takes each action? If it can, then it’s a model-based RL algorithm. if it cannot, it’s a model-free algorithm.\n\n**使用算法学成策略之后，智能体可以在执行动作前判断该动作的后果，即是Model-Based，反之则是Model-Free**\n\n---\n\n根据Model-Based和Model-Free可以将强化学习算法分类，图片摘自OpenAI Spinning Up，如图所示：\n\n![](./rl-classification/model-classification.png)\n\n>[What is the difference between model-based and model-free reinforcement learning?](https://www.quora.com/What-is-the-difference-between-model-based-and-model-free-reinforcement-learning)\n>\n>[OpenAI Spinning Up : A Taxonomy of RL Algorithms](https://spinningup.openai.com/en/latest/spinningup/rl_intro2.html#a-taxonomy-of-rl-algorithms)\n\n# Policy or Value\n\n强化学习的目的是找到最优策略使得累积期望回报最大化，获得最优策略的方法有直接与间接之分。直接获取策略的图示为：\n\n![](./rl-classification/policy-based.png)\n\n间接获得策略为从值函数中提取最优策略，图示为：\n\n![](./rl-classification/value-based.png)\n\n直接获取策略的方式即为Policy-Based，常见的算法有：\n\n- Policy Gradient\n- PPO\n- SAC\n- ……\n\n间接获得策略的方式即为Value-Based，常见的算法有：\n\n- SARSA\n- Q-Learning\n- DQN\n- ……\n\n# On-policy or Off-policy\n\n在机器学习中，提到On跟Off这两个词我们最容易想到的是On-line Learning与Off-line Learning，那么强化学习与On-line、Off-line有什么关系呢？\n\n---\n\n网上对于On-line Learning与Off-line Learning有不同的解释，按热度排序为下面三种：\n\n对于On-line Learning：\n\n1. 单样本学习，样本用完即丢，样本连续不断输入，非数据集，而是数据流\n2. 单样本的（SGD）\n3. 单样本或批样本学习，样本连续不断输入，非数据集，而是数据流\n\n相应对于Off-line Learning：\n\n1. 批样本或全样本学习多次，静态样本集\n2. 批样本学习\n3. 全样本学习，静态数据集\n\n对于这三种方式，强化学习可以怎样融入呢？\n\n1. 对于第一种，强化学习不属于On-line Learning也不属于Off-line Learning，不属于Off-line Learning是因为样本非静态、非固定，不属于On-line Learning是因为对于Q-Learning、Sarsa、PG、PPO等算法样本用完即丢，对于DQN、TD3等算法样本重复利用。\n2. 对于第二种，强化学习包括On-line Learning及On-line Learning\n3. 低于第三种，强化学习属于On-line Learning\n\n---\n\nOn-policy、Off-policy与On-line、Off-line之间有关系吗？\n\n好像没有关系。虽然它们都是关于样本进行的划分，不过On-Off line learning针对的是样本的使用，而On-Off policy针对的是样本的生成。\n\n---\n\n学习On-policy、Off-policy之前首先需要理解什么是行为策略与目标策略。\n\n行为策略$\\mathcal{Behavior Policy}$：\n\n- 采样时间序列$S_{0},A_{0},R_{0},S_{1},A_{1},R_{2},...,S_{n},A_{n},R_{n}$的策略\n- 官话：指导个体产生与环境进行实际交互行为的策略\n- 未必由一个模型表示\n\n目标策略$\\mathcal{TargetPolicy}$:\n\n- 待优化的策略\n- 官话：用来评价状态或行为价值的策略或者待优化的策略称为目标策略\n\n\n\n同步策略学习$\\mathcal{On-Policy}$:\n\n- 简言之，边采样边学习\n- 官话：如果个体在学习过程中优化的策略与自己的行为策略是同一个策略时，这种学习方式称为**同步策略学习（on-policy learning）**\n- 行为策略与目标策略是同一个\n\n异步策略学习$\\mathcal{Off-Policy}$:\n\n- 简言之，你采样我学习\n- 官话：如果个体在学习过程中优化的策略与自己的行为策略是不同的策略时，这种学习方式称为**异步策略学习（off-policy learning）**\n- 行为策略与目标策略不同，行为策略可能是目标策略的“分身”（双网络结构），或者完全是另一个采样的策略\n\n例如：\n\n\n\n\n\n|             | SARSA | Q-learning |\n|:-----------:|:-----:|:----------:|\n| Choosing A' |   π   |      π     |\n| Updating Q  |   π   |      μ     |\n\n\n\n> [一个以Q-Learning和Sarsa算法做比较的解释](https://stackoverflow.com/a/41420616)\n\n# Stochastic or Deterministic","source":"_posts/rl-classification.md","raw":"---\ntitle: 强化学习的类别\ncopyright: true\ntop: 1\ndate: 2019-05-10 15:18:23\nmathjax: true\nkeywords: \ndescription: \ncategories: ReinforcementLearning\ntags:\n- rl\n---\n\n本文讲述了强化学习中各种算法、问题的分类规则。\n\n<!--more-->\n\n# Stationary or not\n\n根据环境十分稳定、可以将强化学习问题分为stationary、non-stationary。\n\n如果状态转移**和**奖励函数是确定的，即选择动作$a$后执行它的结果是确定的，那么这个环境就是stationary。\n\n![](./rl-classification/stationary.png)\n\n如果状态转移**或**奖励函数是不确定的，即选择动作$a$后执行它的结果是不确定的，那么这个环境就是non-stationary。\n\n![](./rl-classification/non-stationary.png)\n\n# Model Based-or-Free\n\n一直对这个问题的认识不清晰，直到最近（2019年5月12日19:13:53）才有了清晰的认识。\n\n需要注意的是，无论是Model-Based还是Model-Free都不是对强化学习问题的分类，而是对算法的分类。之前一直理解的是状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$的都是离散的，转移概率矩阵$\\mathcal{P}$是确定的，这样即是Model-Based，如果状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$或转移概率矩阵$\\mathcal{P}$是不确定的，则是Model-Free，其实这只是对Model的分类，并不是Model-Based与Model-Free的真实含义，Model-Based与Model-Free是对算法求解过程的分类，理解这个可以在阅读国外文献、实验环境时更清晰，提升自己对强化学习算法的理解深度。\n\nModel-Based：\n\n- 智能体Agent在已知模型（$\\mathcal{S,A,R,P}$有限且确定）或者先学习一个模型（使用有监督对状态转移、奖励函数进行学习而得到），并在这个模型中使用**planning**（预测所有状态转移可能）方法来计算解决方案\n\n> Now if we know what all those elements of an MDP are, we can just compute the solution before ever actually executing an action in the environment. In AI, we typically call computing the solution to a decision-making problem before executing an actual decision *planning*. Some classic planning algorithms for MDPs include Value Iteration, Policy Iteration, and whole lot more.\n\nModel-Free:\n\n- 智能体在模型（$\\mathcal{S,A,R,P}$可能确定但没有使用planning方式解决，也可能不确定）中试错，并且使用**learning**（不预测全部可能性）方法来产生最佳策略\n\n> But the RL problem isn’t so kind to us. What makes a problem an RL problem, rather than a planning problem, is the agent does *not* know all the elements of the MDP, precluding it from being able to plan a solution. Specifically, the agent does not know how the world will change in response to its actions (the transition function TT), nor what immediate reward it will receive for doing so (the reward function RR). The agent will simply have to try taking actions in the environment, observe what happens, and somehow, find a good policy from doing so.\n\n根据Model-Based、Model-Free对算法、解决方法进行分类：\n\nModel-Based：DP、Policy Iteration、Value Iteration……\n\nModel-Free：SARSA、Q-Learning、PG……\n\n---\n\n> if you want a way to check if an RL algorithm is model-based or model-free, ask yourself this question: after learning, can the agent make predictions about what the next state and reward will be before it takes each action? If it can, then it’s a model-based RL algorithm. if it cannot, it’s a model-free algorithm.\n\n**使用算法学成策略之后，智能体可以在执行动作前判断该动作的后果，即是Model-Based，反之则是Model-Free**\n\n---\n\n根据Model-Based和Model-Free可以将强化学习算法分类，图片摘自OpenAI Spinning Up，如图所示：\n\n![](./rl-classification/model-classification.png)\n\n>[What is the difference between model-based and model-free reinforcement learning?](https://www.quora.com/What-is-the-difference-between-model-based-and-model-free-reinforcement-learning)\n>\n>[OpenAI Spinning Up : A Taxonomy of RL Algorithms](https://spinningup.openai.com/en/latest/spinningup/rl_intro2.html#a-taxonomy-of-rl-algorithms)\n\n# Policy or Value\n\n强化学习的目的是找到最优策略使得累积期望回报最大化，获得最优策略的方法有直接与间接之分。直接获取策略的图示为：\n\n![](./rl-classification/policy-based.png)\n\n间接获得策略为从值函数中提取最优策略，图示为：\n\n![](./rl-classification/value-based.png)\n\n直接获取策略的方式即为Policy-Based，常见的算法有：\n\n- Policy Gradient\n- PPO\n- SAC\n- ……\n\n间接获得策略的方式即为Value-Based，常见的算法有：\n\n- SARSA\n- Q-Learning\n- DQN\n- ……\n\n# On-policy or Off-policy\n\n在机器学习中，提到On跟Off这两个词我们最容易想到的是On-line Learning与Off-line Learning，那么强化学习与On-line、Off-line有什么关系呢？\n\n---\n\n网上对于On-line Learning与Off-line Learning有不同的解释，按热度排序为下面三种：\n\n对于On-line Learning：\n\n1. 单样本学习，样本用完即丢，样本连续不断输入，非数据集，而是数据流\n2. 单样本的（SGD）\n3. 单样本或批样本学习，样本连续不断输入，非数据集，而是数据流\n\n相应对于Off-line Learning：\n\n1. 批样本或全样本学习多次，静态样本集\n2. 批样本学习\n3. 全样本学习，静态数据集\n\n对于这三种方式，强化学习可以怎样融入呢？\n\n1. 对于第一种，强化学习不属于On-line Learning也不属于Off-line Learning，不属于Off-line Learning是因为样本非静态、非固定，不属于On-line Learning是因为对于Q-Learning、Sarsa、PG、PPO等算法样本用完即丢，对于DQN、TD3等算法样本重复利用。\n2. 对于第二种，强化学习包括On-line Learning及On-line Learning\n3. 低于第三种，强化学习属于On-line Learning\n\n---\n\nOn-policy、Off-policy与On-line、Off-line之间有关系吗？\n\n好像没有关系。虽然它们都是关于样本进行的划分，不过On-Off line learning针对的是样本的使用，而On-Off policy针对的是样本的生成。\n\n---\n\n学习On-policy、Off-policy之前首先需要理解什么是行为策略与目标策略。\n\n行为策略$\\mathcal{Behavior Policy}$：\n\n- 采样时间序列$S_{0},A_{0},R_{0},S_{1},A_{1},R_{2},...,S_{n},A_{n},R_{n}$的策略\n- 官话：指导个体产生与环境进行实际交互行为的策略\n- 未必由一个模型表示\n\n目标策略$\\mathcal{TargetPolicy}$:\n\n- 待优化的策略\n- 官话：用来评价状态或行为价值的策略或者待优化的策略称为目标策略\n\n\n\n同步策略学习$\\mathcal{On-Policy}$:\n\n- 简言之，边采样边学习\n- 官话：如果个体在学习过程中优化的策略与自己的行为策略是同一个策略时，这种学习方式称为**同步策略学习（on-policy learning）**\n- 行为策略与目标策略是同一个\n\n异步策略学习$\\mathcal{Off-Policy}$:\n\n- 简言之，你采样我学习\n- 官话：如果个体在学习过程中优化的策略与自己的行为策略是不同的策略时，这种学习方式称为**异步策略学习（off-policy learning）**\n- 行为策略与目标策略不同，行为策略可能是目标策略的“分身”（双网络结构），或者完全是另一个采样的策略\n\n例如：\n\n\n\n\n\n|             | SARSA | Q-learning |\n|:-----------:|:-----:|:----------:|\n| Choosing A' |   π   |      π     |\n| Updating Q  |   π   |      μ     |\n\n\n\n> [一个以Q-Learning和Sarsa算法做比较的解释](https://stackoverflow.com/a/41420616)\n\n# Stochastic or Deterministic","slug":"rl-classification","published":1,"updated":"2019-05-13T12:30:28.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9i000gm8vegjsl4apw","content":"<p>本文讲述了强化学习中各种算法、问题的分类规则。</p>\n<a id=\"more\"></a>\n<h1 id=\"Stationary-or-not\"><a href=\"#Stationary-or-not\" class=\"headerlink\" title=\"Stationary or not\"></a>Stationary or not</h1><p>根据环境十分稳定、可以将强化学习问题分为stationary、non-stationary。</p>\n<p>如果状态转移<strong>和</strong>奖励函数是确定的，即选择动作$a$后执行它的结果是确定的，那么这个环境就是stationary。</p>\n<p><img src=\"./rl-classification/stationary.png\" alt=\"\"></p>\n<p>如果状态转移<strong>或</strong>奖励函数是不确定的，即选择动作$a$后执行它的结果是不确定的，那么这个环境就是non-stationary。</p>\n<p><img src=\"./rl-classification/non-stationary.png\" alt=\"\"></p>\n<h1 id=\"Model-Based-or-Free\"><a href=\"#Model-Based-or-Free\" class=\"headerlink\" title=\"Model Based-or-Free\"></a>Model Based-or-Free</h1><p>一直对这个问题的认识不清晰，直到最近（2019年5月12日19:13:53）才有了清晰的认识。</p>\n<p>需要注意的是，无论是Model-Based还是Model-Free都不是对强化学习问题的分类，而是对算法的分类。之前一直理解的是状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$的都是离散的，转移概率矩阵$\\mathcal{P}$是确定的，这样即是Model-Based，如果状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$或转移概率矩阵$\\mathcal{P}$是不确定的，则是Model-Free，其实这只是对Model的分类，并不是Model-Based与Model-Free的真实含义，Model-Based与Model-Free是对算法求解过程的分类，理解这个可以在阅读国外文献、实验环境时更清晰，提升自己对强化学习算法的理解深度。</p>\n<p>Model-Based：</p>\n<ul>\n<li>智能体Agent在已知模型（$\\mathcal{S,A,R,P}$有限且确定）或者先学习一个模型（使用有监督对状态转移、奖励函数进行学习而得到），并在这个模型中使用<strong>planning</strong>（预测所有状态转移可能）方法来计算解决方案</li>\n</ul>\n<blockquote>\n<p>Now if we know what all those elements of an MDP are, we can just compute the solution before ever actually executing an action in the environment. In AI, we typically call computing the solution to a decision-making problem before executing an actual decision <em>planning</em>. Some classic planning algorithms for MDPs include Value Iteration, Policy Iteration, and whole lot more.</p>\n</blockquote>\n<p>Model-Free:</p>\n<ul>\n<li>智能体在模型（$\\mathcal{S,A,R,P}$可能确定但没有使用planning方式解决，也可能不确定）中试错，并且使用<strong>learning</strong>（不预测全部可能性）方法来产生最佳策略</li>\n</ul>\n<blockquote>\n<p>But the RL problem isn’t so kind to us. What makes a problem an RL problem, rather than a planning problem, is the agent does <em>not</em> know all the elements of the MDP, precluding it from being able to plan a solution. Specifically, the agent does not know how the world will change in response to its actions (the transition function TT), nor what immediate reward it will receive for doing so (the reward function RR). The agent will simply have to try taking actions in the environment, observe what happens, and somehow, find a good policy from doing so.</p>\n</blockquote>\n<p>根据Model-Based、Model-Free对算法、解决方法进行分类：</p>\n<p>Model-Based：DP、Policy Iteration、Value Iteration……</p>\n<p>Model-Free：SARSA、Q-Learning、PG……</p>\n<hr>\n<blockquote>\n<p>if you want a way to check if an RL algorithm is model-based or model-free, ask yourself this question: after learning, can the agent make predictions about what the next state and reward will be before it takes each action? If it can, then it’s a model-based RL algorithm. if it cannot, it’s a model-free algorithm.</p>\n</blockquote>\n<p><strong>使用算法学成策略之后，智能体可以在执行动作前判断该动作的后果，即是Model-Based，反之则是Model-Free</strong></p>\n<hr>\n<p>根据Model-Based和Model-Free可以将强化学习算法分类，图片摘自OpenAI Spinning Up，如图所示：</p>\n<p><img src=\"./rl-classification/model-classification.png\" alt=\"\"></p>\n<blockquote>\n<p><a href=\"https://www.quora.com/What-is-the-difference-between-model-based-and-model-free-reinforcement-learning\" rel=\"external nofollow\" target=\"_blank\">What is the difference between model-based and model-free reinforcement learning?</a></p>\n<p><a href=\"https://spinningup.openai.com/en/latest/spinningup/rl_intro2.html#a-taxonomy-of-rl-algorithms\" rel=\"external nofollow\" target=\"_blank\">OpenAI Spinning Up : A Taxonomy of RL Algorithms</a></p>\n</blockquote>\n<h1 id=\"Policy-or-Value\"><a href=\"#Policy-or-Value\" class=\"headerlink\" title=\"Policy or Value\"></a>Policy or Value</h1><p>强化学习的目的是找到最优策略使得累积期望回报最大化，获得最优策略的方法有直接与间接之分。直接获取策略的图示为：</p>\n<p><img src=\"./rl-classification/policy-based.png\" alt=\"\"></p>\n<p>间接获得策略为从值函数中提取最优策略，图示为：</p>\n<p><img src=\"./rl-classification/value-based.png\" alt=\"\"></p>\n<p>直接获取策略的方式即为Policy-Based，常见的算法有：</p>\n<ul>\n<li>Policy Gradient</li>\n<li>PPO</li>\n<li>SAC</li>\n<li>……</li>\n</ul>\n<p>间接获得策略的方式即为Value-Based，常见的算法有：</p>\n<ul>\n<li>SARSA</li>\n<li>Q-Learning</li>\n<li>DQN</li>\n<li>……</li>\n</ul>\n<h1 id=\"On-policy-or-Off-policy\"><a href=\"#On-policy-or-Off-policy\" class=\"headerlink\" title=\"On-policy or Off-policy\"></a>On-policy or Off-policy</h1><p>在机器学习中，提到On跟Off这两个词我们最容易想到的是On-line Learning与Off-line Learning，那么强化学习与On-line、Off-line有什么关系呢？</p>\n<hr>\n<p>网上对于On-line Learning与Off-line Learning有不同的解释，按热度排序为下面三种：</p>\n<p>对于On-line Learning：</p>\n<ol>\n<li>单样本学习，样本用完即丢，样本连续不断输入，非数据集，而是数据流</li>\n<li>单样本的（SGD）</li>\n<li>单样本或批样本学习，样本连续不断输入，非数据集，而是数据流</li>\n</ol>\n<p>相应对于Off-line Learning：</p>\n<ol>\n<li>批样本或全样本学习多次，静态样本集</li>\n<li>批样本学习</li>\n<li>全样本学习，静态数据集</li>\n</ol>\n<p>对于这三种方式，强化学习可以怎样融入呢？</p>\n<ol>\n<li>对于第一种，强化学习不属于On-line Learning也不属于Off-line Learning，不属于Off-line Learning是因为样本非静态、非固定，不属于On-line Learning是因为对于Q-Learning、Sarsa、PG、PPO等算法样本用完即丢，对于DQN、TD3等算法样本重复利用。</li>\n<li>对于第二种，强化学习包括On-line Learning及On-line Learning</li>\n<li>低于第三种，强化学习属于On-line Learning</li>\n</ol>\n<hr>\n<p>On-policy、Off-policy与On-line、Off-line之间有关系吗？</p>\n<p>好像没有关系。虽然它们都是关于样本进行的划分，不过On-Off line learning针对的是样本的使用，而On-Off policy针对的是样本的生成。</p>\n<hr>\n<p>学习On-policy、Off-policy之前首先需要理解什么是行为策略与目标策略。</p>\n<p>行为策略$\\mathcal{Behavior Policy}$：</p>\n<ul>\n<li>采样时间序列$S_{0},A_{0},R_{0},S_{1},A_{1},R_{2},…,S_{n},A_{n},R_{n}$的策略</li>\n<li>官话：指导个体产生与环境进行实际交互行为的策略</li>\n<li>未必由一个模型表示</li>\n</ul>\n<p>目标策略$\\mathcal{TargetPolicy}$:</p>\n<ul>\n<li>待优化的策略</li>\n<li>官话：用来评价状态或行为价值的策略或者待优化的策略称为目标策略</li>\n</ul>\n<p>同步策略学习$\\mathcal{On-Policy}$:</p>\n<ul>\n<li>简言之，边采样边学习</li>\n<li>官话：如果个体在学习过程中优化的策略与自己的行为策略是同一个策略时，这种学习方式称为<strong>同步策略学习（on-policy learning）</strong></li>\n<li>行为策略与目标策略是同一个</li>\n</ul>\n<p>异步策略学习$\\mathcal{Off-Policy}$:</p>\n<ul>\n<li>简言之，你采样我学习</li>\n<li>官话：如果个体在学习过程中优化的策略与自己的行为策略是不同的策略时，这种学习方式称为<strong>异步策略学习（off-policy learning）</strong></li>\n<li>行为策略与目标策略不同，行为策略可能是目标策略的“分身”（双网络结构），或者完全是另一个采样的策略</li>\n</ul>\n<p>例如：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">SARSA</th>\n<th style=\"text-align:center\">Q-learning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Choosing A’</td>\n<td style=\"text-align:center\">π</td>\n<td style=\"text-align:center\">π</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Updating Q</td>\n<td style=\"text-align:center\">π</td>\n<td style=\"text-align:center\">μ</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/a/41420616\" rel=\"external nofollow\" target=\"_blank\">一个以Q-Learning和Sarsa算法做比较的解释</a></p>\n</blockquote>\n<h1 id=\"Stochastic-or-Deterministic\"><a href=\"#Stochastic-or-Deterministic\" class=\"headerlink\" title=\"Stochastic or Deterministic\"></a>Stochastic or Deterministic</h1>","site":{"data":{}},"excerpt":"<p>本文讲述了强化学习中各种算法、问题的分类规则。</p>","more":"<h1 id=\"Stationary-or-not\"><a href=\"#Stationary-or-not\" class=\"headerlink\" title=\"Stationary or not\"></a>Stationary or not</h1><p>根据环境十分稳定、可以将强化学习问题分为stationary、non-stationary。</p>\n<p>如果状态转移<strong>和</strong>奖励函数是确定的，即选择动作$a$后执行它的结果是确定的，那么这个环境就是stationary。</p>\n<p><img src=\"./rl-classification/stationary.png\" alt=\"\"></p>\n<p>如果状态转移<strong>或</strong>奖励函数是不确定的，即选择动作$a$后执行它的结果是不确定的，那么这个环境就是non-stationary。</p>\n<p><img src=\"./rl-classification/non-stationary.png\" alt=\"\"></p>\n<h1 id=\"Model-Based-or-Free\"><a href=\"#Model-Based-or-Free\" class=\"headerlink\" title=\"Model Based-or-Free\"></a>Model Based-or-Free</h1><p>一直对这个问题的认识不清晰，直到最近（2019年5月12日19:13:53）才有了清晰的认识。</p>\n<p>需要注意的是，无论是Model-Based还是Model-Free都不是对强化学习问题的分类，而是对算法的分类。之前一直理解的是状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$的都是离散的，转移概率矩阵$\\mathcal{P}$是确定的，这样即是Model-Based，如果状态空间$\\mathcal{S}$、动作空间$\\mathcal{A}$或转移概率矩阵$\\mathcal{P}$是不确定的，则是Model-Free，其实这只是对Model的分类，并不是Model-Based与Model-Free的真实含义，Model-Based与Model-Free是对算法求解过程的分类，理解这个可以在阅读国外文献、实验环境时更清晰，提升自己对强化学习算法的理解深度。</p>\n<p>Model-Based：</p>\n<ul>\n<li>智能体Agent在已知模型（$\\mathcal{S,A,R,P}$有限且确定）或者先学习一个模型（使用有监督对状态转移、奖励函数进行学习而得到），并在这个模型中使用<strong>planning</strong>（预测所有状态转移可能）方法来计算解决方案</li>\n</ul>\n<blockquote>\n<p>Now if we know what all those elements of an MDP are, we can just compute the solution before ever actually executing an action in the environment. In AI, we typically call computing the solution to a decision-making problem before executing an actual decision <em>planning</em>. Some classic planning algorithms for MDPs include Value Iteration, Policy Iteration, and whole lot more.</p>\n</blockquote>\n<p>Model-Free:</p>\n<ul>\n<li>智能体在模型（$\\mathcal{S,A,R,P}$可能确定但没有使用planning方式解决，也可能不确定）中试错，并且使用<strong>learning</strong>（不预测全部可能性）方法来产生最佳策略</li>\n</ul>\n<blockquote>\n<p>But the RL problem isn’t so kind to us. What makes a problem an RL problem, rather than a planning problem, is the agent does <em>not</em> know all the elements of the MDP, precluding it from being able to plan a solution. Specifically, the agent does not know how the world will change in response to its actions (the transition function TT), nor what immediate reward it will receive for doing so (the reward function RR). The agent will simply have to try taking actions in the environment, observe what happens, and somehow, find a good policy from doing so.</p>\n</blockquote>\n<p>根据Model-Based、Model-Free对算法、解决方法进行分类：</p>\n<p>Model-Based：DP、Policy Iteration、Value Iteration……</p>\n<p>Model-Free：SARSA、Q-Learning、PG……</p>\n<hr>\n<blockquote>\n<p>if you want a way to check if an RL algorithm is model-based or model-free, ask yourself this question: after learning, can the agent make predictions about what the next state and reward will be before it takes each action? If it can, then it’s a model-based RL algorithm. if it cannot, it’s a model-free algorithm.</p>\n</blockquote>\n<p><strong>使用算法学成策略之后，智能体可以在执行动作前判断该动作的后果，即是Model-Based，反之则是Model-Free</strong></p>\n<hr>\n<p>根据Model-Based和Model-Free可以将强化学习算法分类，图片摘自OpenAI Spinning Up，如图所示：</p>\n<p><img src=\"./rl-classification/model-classification.png\" alt=\"\"></p>\n<blockquote>\n<p><a href=\"https://www.quora.com/What-is-the-difference-between-model-based-and-model-free-reinforcement-learning\" rel=\"external nofollow\" target=\"_blank\">What is the difference between model-based and model-free reinforcement learning?</a></p>\n<p><a href=\"https://spinningup.openai.com/en/latest/spinningup/rl_intro2.html#a-taxonomy-of-rl-algorithms\" rel=\"external nofollow\" target=\"_blank\">OpenAI Spinning Up : A Taxonomy of RL Algorithms</a></p>\n</blockquote>\n<h1 id=\"Policy-or-Value\"><a href=\"#Policy-or-Value\" class=\"headerlink\" title=\"Policy or Value\"></a>Policy or Value</h1><p>强化学习的目的是找到最优策略使得累积期望回报最大化，获得最优策略的方法有直接与间接之分。直接获取策略的图示为：</p>\n<p><img src=\"./rl-classification/policy-based.png\" alt=\"\"></p>\n<p>间接获得策略为从值函数中提取最优策略，图示为：</p>\n<p><img src=\"./rl-classification/value-based.png\" alt=\"\"></p>\n<p>直接获取策略的方式即为Policy-Based，常见的算法有：</p>\n<ul>\n<li>Policy Gradient</li>\n<li>PPO</li>\n<li>SAC</li>\n<li>……</li>\n</ul>\n<p>间接获得策略的方式即为Value-Based，常见的算法有：</p>\n<ul>\n<li>SARSA</li>\n<li>Q-Learning</li>\n<li>DQN</li>\n<li>……</li>\n</ul>\n<h1 id=\"On-policy-or-Off-policy\"><a href=\"#On-policy-or-Off-policy\" class=\"headerlink\" title=\"On-policy or Off-policy\"></a>On-policy or Off-policy</h1><p>在机器学习中，提到On跟Off这两个词我们最容易想到的是On-line Learning与Off-line Learning，那么强化学习与On-line、Off-line有什么关系呢？</p>\n<hr>\n<p>网上对于On-line Learning与Off-line Learning有不同的解释，按热度排序为下面三种：</p>\n<p>对于On-line Learning：</p>\n<ol>\n<li>单样本学习，样本用完即丢，样本连续不断输入，非数据集，而是数据流</li>\n<li>单样本的（SGD）</li>\n<li>单样本或批样本学习，样本连续不断输入，非数据集，而是数据流</li>\n</ol>\n<p>相应对于Off-line Learning：</p>\n<ol>\n<li>批样本或全样本学习多次，静态样本集</li>\n<li>批样本学习</li>\n<li>全样本学习，静态数据集</li>\n</ol>\n<p>对于这三种方式，强化学习可以怎样融入呢？</p>\n<ol>\n<li>对于第一种，强化学习不属于On-line Learning也不属于Off-line Learning，不属于Off-line Learning是因为样本非静态、非固定，不属于On-line Learning是因为对于Q-Learning、Sarsa、PG、PPO等算法样本用完即丢，对于DQN、TD3等算法样本重复利用。</li>\n<li>对于第二种，强化学习包括On-line Learning及On-line Learning</li>\n<li>低于第三种，强化学习属于On-line Learning</li>\n</ol>\n<hr>\n<p>On-policy、Off-policy与On-line、Off-line之间有关系吗？</p>\n<p>好像没有关系。虽然它们都是关于样本进行的划分，不过On-Off line learning针对的是样本的使用，而On-Off policy针对的是样本的生成。</p>\n<hr>\n<p>学习On-policy、Off-policy之前首先需要理解什么是行为策略与目标策略。</p>\n<p>行为策略$\\mathcal{Behavior Policy}$：</p>\n<ul>\n<li>采样时间序列$S_{0},A_{0},R_{0},S_{1},A_{1},R_{2},…,S_{n},A_{n},R_{n}$的策略</li>\n<li>官话：指导个体产生与环境进行实际交互行为的策略</li>\n<li>未必由一个模型表示</li>\n</ul>\n<p>目标策略$\\mathcal{TargetPolicy}$:</p>\n<ul>\n<li>待优化的策略</li>\n<li>官话：用来评价状态或行为价值的策略或者待优化的策略称为目标策略</li>\n</ul>\n<p>同步策略学习$\\mathcal{On-Policy}$:</p>\n<ul>\n<li>简言之，边采样边学习</li>\n<li>官话：如果个体在学习过程中优化的策略与自己的行为策略是同一个策略时，这种学习方式称为<strong>同步策略学习（on-policy learning）</strong></li>\n<li>行为策略与目标策略是同一个</li>\n</ul>\n<p>异步策略学习$\\mathcal{Off-Policy}$:</p>\n<ul>\n<li>简言之，你采样我学习</li>\n<li>官话：如果个体在学习过程中优化的策略与自己的行为策略是不同的策略时，这种学习方式称为<strong>异步策略学习（off-policy learning）</strong></li>\n<li>行为策略与目标策略不同，行为策略可能是目标策略的“分身”（双网络结构），或者完全是另一个采样的策略</li>\n</ul>\n<p>例如：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">SARSA</th>\n<th style=\"text-align:center\">Q-learning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Choosing A’</td>\n<td style=\"text-align:center\">π</td>\n<td style=\"text-align:center\">π</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Updating Q</td>\n<td style=\"text-align:center\">π</td>\n<td style=\"text-align:center\">μ</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/a/41420616\" rel=\"external nofollow\" target=\"_blank\">一个以Q-Learning和Sarsa算法做比较的解释</a></p>\n</blockquote>\n<h1 id=\"Stochastic-or-Deterministic\"><a href=\"#Stochastic-or-Deterministic\" class=\"headerlink\" title=\"Stochastic or Deterministic\"></a>Stochastic or Deterministic</h1>"},{"title":"一些在Docker中比较难以安装的库(整理)","copyright":true,"top":1,"date":"2019-03-24T10:57:50.000Z","_content":"\n本文记录了一些在Docker中比较难以安装、频繁报错的库，如cuda、cudnn。\n\n<!--more-->\n\n# 前言\n在配置镜像时, **强烈建议将源更改为国内镜像站**, 因为国外有些镜像站链接速度很慢, 更新也很慢, 很多库无法正确安装\n\n我所使用的镜像站为`sources.list`:\n\n```\ndeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties\ndeb http://archive.canonical.com/ubuntu xenial partner\ndeb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse\n```\n在`Dockerfile`或者在容器内使用命令\n```\nRUN cp /etc/apt/sources.list /etc/apt/sources.list.bak\nCOPY sources.list /etc/apt/sources.list\n```\n将源替换.\n\n# CUDA 9.0 开发者版\n`dockerfile`如下:\n```\nFROM nvidia/cuda:9.0-runtime-ubuntu16.04\nLABEL maintainer \"Keavnn <https://stepneverstop.github.io>\"\n\nRUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \\\n        cuda-libraries-dev-$CUDA_PKG_VERSION \\\n        cuda-nvml-dev-$CUDA_PKG_VERSION \\\n        cuda-minimal-build-$CUDA_PKG_VERSION \\\n        cuda-command-line-tools-$CUDA_PKG_VERSION \\\n        cuda-core-9-0=9.0.176.3-1 \\\n        cuda-cublas-dev-9-0=9.0.176.4-1 \\\n        libnccl-dev=$NCCL_VERSION-1+cuda9.0 && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV LIBRARY_PATH /usr/local/cuda/lib64/stubs\n```\n**--allow-unauthenticated** 这句命令很重要, 不使用的话很有可能安装失败\n\n# cudnn 7.0.5\n- [https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive) 下载cuDNN Libraries for Linux,不要下载 Power 8\n- 把下载好的包上传到FTP服务器, 或者传输到容器内, 或者直接在容器中下载好\n- `cd`到包位置\n- `cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz`\n- `tar -xvf cudnn-9.0-linux-x64-v7.tgz`\n- `cp include/* /usr/local/cuda-9.0/include`\n- `cp lib64/* /usr/local/cuda-9.0/lib64`\n- `chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*` **这一步如果cuda是base版本,则没有include文件夹,需要手动创建后再执行**\n- `export PATH=/usr/local/cuda-9.0/bin:$PATH`\n- `cd`到`/usr/local/cuda-9.0/lib64`\n- `nano ~/.bashrc`,关联环境变量\n- 在最后一行加入`export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH`\n- `source ~/.bashrc`\n- `ldconfig -v`\n- 使用`cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2` 查看cudnn版本\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png)\n\n# jemalloc\n选择安装`jemalloc`,这个工具可以加速编译,碎片整理,具体请自行谷歌\n- `apt-get install autoconf`\n- `apt-get install automake`\n- `apt-get install libtool`\n- `git clone https://github.com/jemalloc/jemalloc.git`\n- `cd jemalloc`\n- `git checkout 4.5.0`安装4.5.0版本的jemalloc,5.x版本的有坑,深坑\n- `./autogen.sh`\n- `make`\n- `make install_bin install_include install_lib`,之所以不使用`make install`是因为会报错,如下: ![](./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png)\n\n# Python3.6\n记得`sudo`\n- `apt-get install software-properties-common`\n- `add-apt-repository ppa:jonathonf/python-3.6`, 按`ENTER`\n- `apt-get update && apt-get install python3.6 -y`\n- 修改系统默认的`python`版本为3.6\n- `cd /usr/bin`, 保险起见,建议分两步\n- `rm python`\n- `ln -s python3.6m python`\n- 如需更新,`pip3 install --upgrade pip`, 8.1.1->19.0.3\n- `python -V`\n![](./something-hard-install-docker/1.png)\n\n","source":"_posts/something-hard-install-docker.md","raw":"---\ntitle: 一些在Docker中比较难以安装的库(整理)\ncopyright: true\ntop: 1\ndate: 2019-03-24 18:57:50\ncategories: Docker\ntags:\n- docker\n---\n\n本文记录了一些在Docker中比较难以安装、频繁报错的库，如cuda、cudnn。\n\n<!--more-->\n\n# 前言\n在配置镜像时, **强烈建议将源更改为国内镜像站**, 因为国外有些镜像站链接速度很慢, 更新也很慢, 很多库无法正确安装\n\n我所使用的镜像站为`sources.list`:\n\n```\ndeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties\ndeb http://archive.canonical.com/ubuntu xenial partner\ndeb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse\n```\n在`Dockerfile`或者在容器内使用命令\n```\nRUN cp /etc/apt/sources.list /etc/apt/sources.list.bak\nCOPY sources.list /etc/apt/sources.list\n```\n将源替换.\n\n# CUDA 9.0 开发者版\n`dockerfile`如下:\n```\nFROM nvidia/cuda:9.0-runtime-ubuntu16.04\nLABEL maintainer \"Keavnn <https://stepneverstop.github.io>\"\n\nRUN apt-get update && apt-get install -y --allow-unauthenticated --no-install-recommends \\\n        cuda-libraries-dev-$CUDA_PKG_VERSION \\\n        cuda-nvml-dev-$CUDA_PKG_VERSION \\\n        cuda-minimal-build-$CUDA_PKG_VERSION \\\n        cuda-command-line-tools-$CUDA_PKG_VERSION \\\n        cuda-core-9-0=9.0.176.3-1 \\\n        cuda-cublas-dev-9-0=9.0.176.4-1 \\\n        libnccl-dev=$NCCL_VERSION-1+cuda9.0 && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV LIBRARY_PATH /usr/local/cuda/lib64/stubs\n```\n**--allow-unauthenticated** 这句命令很重要, 不使用的话很有可能安装失败\n\n# cudnn 7.0.5\n- [https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive) 下载cuDNN Libraries for Linux,不要下载 Power 8\n- 把下载好的包上传到FTP服务器, 或者传输到容器内, 或者直接在容器中下载好\n- `cd`到包位置\n- `cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz`\n- `tar -xvf cudnn-9.0-linux-x64-v7.tgz`\n- `cp include/* /usr/local/cuda-9.0/include`\n- `cp lib64/* /usr/local/cuda-9.0/lib64`\n- `chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*` **这一步如果cuda是base版本,则没有include文件夹,需要手动创建后再执行**\n- `export PATH=/usr/local/cuda-9.0/bin:$PATH`\n- `cd`到`/usr/local/cuda-9.0/lib64`\n- `nano ~/.bashrc`,关联环境变量\n- 在最后一行加入`export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH`\n- `source ~/.bashrc`\n- `ldconfig -v`\n- 使用`cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2` 查看cudnn版本\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png)\n\n# jemalloc\n选择安装`jemalloc`,这个工具可以加速编译,碎片整理,具体请自行谷歌\n- `apt-get install autoconf`\n- `apt-get install automake`\n- `apt-get install libtool`\n- `git clone https://github.com/jemalloc/jemalloc.git`\n- `cd jemalloc`\n- `git checkout 4.5.0`安装4.5.0版本的jemalloc,5.x版本的有坑,深坑\n- `./autogen.sh`\n- `make`\n- `make install_bin install_include install_lib`,之所以不使用`make install`是因为会报错,如下: ![](./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png)\n\n# Python3.6\n记得`sudo`\n- `apt-get install software-properties-common`\n- `add-apt-repository ppa:jonathonf/python-3.6`, 按`ENTER`\n- `apt-get update && apt-get install python3.6 -y`\n- 修改系统默认的`python`版本为3.6\n- `cd /usr/bin`, 保险起见,建议分两步\n- `rm python`\n- `ln -s python3.6m python`\n- 如需更新,`pip3 install --upgrade pip`, 8.1.1->19.0.3\n- `python -V`\n![](./something-hard-install-docker/1.png)\n\n","slug":"something-hard-install-docker","published":1,"updated":"2019-05-13T11:51:19.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9j000km8vewkkgxlp6","content":"<p>本文记录了一些在Docker中比较难以安装、频繁报错的库，如cuda、cudnn。</p>\n<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在配置镜像时, <strong>强烈建议将源更改为国内镜像站</strong>, 因为国外有些镜像站链接速度很慢, 更新也很慢, 很多库无法正确安装</p>\n<p>我所使用的镜像站为<code>sources.list</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class=\"line\">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure>\n<p>在<code>Dockerfile</code>或者在容器内使用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">COPY sources.list /etc/apt/sources.list</span><br></pre></td></tr></table></figure></p>\n<p>将源替换.</p>\n<h1 id=\"CUDA-9-0-开发者版\"><a href=\"#CUDA-9-0-开发者版\" class=\"headerlink\" title=\"CUDA 9.0 开发者版\"></a>CUDA 9.0 开发者版</h1><p><code>dockerfile</code>如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nvidia/cuda:9.0-runtime-ubuntu16.04</span><br><span class=\"line\">LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --allow-unauthenticated --no-install-recommends \\</span><br><span class=\"line\">        cuda-libraries-dev-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-nvml-dev-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-minimal-build-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-command-line-tools-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-core-9-0=9.0.176.3-1 \\</span><br><span class=\"line\">        cuda-cublas-dev-9-0=9.0.176.4-1 \\</span><br><span class=\"line\">        libnccl-dev=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\">ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs</span><br></pre></td></tr></table></figure></p>\n<p><strong>—allow-unauthenticated</strong> 这句命令很重要, 不使用的话很有可能安装失败</p>\n<h1 id=\"cudnn-7-0-5\"><a href=\"#cudnn-7-0-5\" class=\"headerlink\" title=\"cudnn 7.0.5\"></a>cudnn 7.0.5</h1><ul>\n<li><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\" rel=\"external nofollow\" target=\"_blank\">https://developer.nvidia.com/rdp/cudnn-archive</a> 下载cuDNN Libraries for Linux,不要下载 Power 8</li>\n<li>把下载好的包上传到FTP服务器, 或者传输到容器内, 或者直接在容器中下载好</li>\n<li><code>cd</code>到包位置</li>\n<li><code>cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>tar -xvf cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>cp include/* /usr/local/cuda-9.0/include</code></li>\n<li><code>cp lib64/* /usr/local/cuda-9.0/lib64</code></li>\n<li><code>chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*</code> <strong>这一步如果cuda是base版本,则没有include文件夹,需要手动创建后再执行</strong></li>\n<li><code>export PATH=/usr/local/cuda-9.0/bin:$PATH</code></li>\n<li><code>cd</code>到<code>/usr/local/cuda-9.0/lib64</code></li>\n<li><code>nano ~/.bashrc</code>,关联环境变量</li>\n<li>在最后一行加入<code>export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH</code></li>\n<li><code>source ~/.bashrc</code></li>\n<li><code>ldconfig -v</code></li>\n<li>使用<code>cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2</code> 查看cudnn版本<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"jemalloc\"><a href=\"#jemalloc\" class=\"headerlink\" title=\"jemalloc\"></a>jemalloc</h1><p>选择安装<code>jemalloc</code>,这个工具可以加速编译,碎片整理,具体请自行谷歌</p>\n<ul>\n<li><code>apt-get install autoconf</code></li>\n<li><code>apt-get install automake</code></li>\n<li><code>apt-get install libtool</code></li>\n<li><code>git clone https://github.com/jemalloc/jemalloc.git</code></li>\n<li><code>cd jemalloc</code></li>\n<li><code>git checkout 4.5.0</code>安装4.5.0版本的jemalloc,5.x版本的有坑,深坑</li>\n<li><code>./autogen.sh</code></li>\n<li><code>make</code></li>\n<li><code>make install_bin install_include install_lib</code>,之所以不使用<code>make install</code>是因为会报错,如下: <img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"Python3-6\"><a href=\"#Python3-6\" class=\"headerlink\" title=\"Python3.6\"></a>Python3.6</h1><p>记得<code>sudo</code></p>\n<ul>\n<li><code>apt-get install software-properties-common</code></li>\n<li><code>add-apt-repository ppa:jonathonf/python-3.6</code>, 按<code>ENTER</code></li>\n<li><code>apt-get update &amp;&amp; apt-get install python3.6 -y</code></li>\n<li>修改系统默认的<code>python</code>版本为3.6</li>\n<li><code>cd /usr/bin</code>, 保险起见,建议分两步</li>\n<li><code>rm python</code></li>\n<li><code>ln -s python3.6m python</code></li>\n<li>如需更新,<code>pip3 install --upgrade pip</code>, 8.1.1-&gt;19.0.3</li>\n<li><code>python -V</code><br><img src=\"./something-hard-install-docker/1.png\" alt=\"\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文记录了一些在Docker中比较难以安装、频繁报错的库，如cuda、cudnn。</p>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在配置镜像时, <strong>强烈建议将源更改为国内镜像站</strong>, 因为国外有些镜像站链接速度很慢, 更新也很慢, 很多库无法正确安装</p>\n<p>我所使用的镜像站为<code>sources.list</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class=\"line\">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure>\n<p>在<code>Dockerfile</code>或者在容器内使用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">COPY sources.list /etc/apt/sources.list</span><br></pre></td></tr></table></figure></p>\n<p>将源替换.</p>\n<h1 id=\"CUDA-9-0-开发者版\"><a href=\"#CUDA-9-0-开发者版\" class=\"headerlink\" title=\"CUDA 9.0 开发者版\"></a>CUDA 9.0 开发者版</h1><p><code>dockerfile</code>如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nvidia/cuda:9.0-runtime-ubuntu16.04</span><br><span class=\"line\">LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --allow-unauthenticated --no-install-recommends \\</span><br><span class=\"line\">        cuda-libraries-dev-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-nvml-dev-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-minimal-build-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-command-line-tools-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-core-9-0=9.0.176.3-1 \\</span><br><span class=\"line\">        cuda-cublas-dev-9-0=9.0.176.4-1 \\</span><br><span class=\"line\">        libnccl-dev=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\">ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs</span><br></pre></td></tr></table></figure></p>\n<p><strong>—allow-unauthenticated</strong> 这句命令很重要, 不使用的话很有可能安装失败</p>\n<h1 id=\"cudnn-7-0-5\"><a href=\"#cudnn-7-0-5\" class=\"headerlink\" title=\"cudnn 7.0.5\"></a>cudnn 7.0.5</h1><ul>\n<li><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\" rel=\"external nofollow\" target=\"_blank\">https://developer.nvidia.com/rdp/cudnn-archive</a> 下载cuDNN Libraries for Linux,不要下载 Power 8</li>\n<li>把下载好的包上传到FTP服务器, 或者传输到容器内, 或者直接在容器中下载好</li>\n<li><code>cd</code>到包位置</li>\n<li><code>cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>tar -xvf cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>cp include/* /usr/local/cuda-9.0/include</code></li>\n<li><code>cp lib64/* /usr/local/cuda-9.0/lib64</code></li>\n<li><code>chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*</code> <strong>这一步如果cuda是base版本,则没有include文件夹,需要手动创建后再执行</strong></li>\n<li><code>export PATH=/usr/local/cuda-9.0/bin:$PATH</code></li>\n<li><code>cd</code>到<code>/usr/local/cuda-9.0/lib64</code></li>\n<li><code>nano ~/.bashrc</code>,关联环境变量</li>\n<li>在最后一行加入<code>export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH</code></li>\n<li><code>source ~/.bashrc</code></li>\n<li><code>ldconfig -v</code></li>\n<li>使用<code>cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2</code> 查看cudnn版本<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"jemalloc\"><a href=\"#jemalloc\" class=\"headerlink\" title=\"jemalloc\"></a>jemalloc</h1><p>选择安装<code>jemalloc</code>,这个工具可以加速编译,碎片整理,具体请自行谷歌</p>\n<ul>\n<li><code>apt-get install autoconf</code></li>\n<li><code>apt-get install automake</code></li>\n<li><code>apt-get install libtool</code></li>\n<li><code>git clone https://github.com/jemalloc/jemalloc.git</code></li>\n<li><code>cd jemalloc</code></li>\n<li><code>git checkout 4.5.0</code>安装4.5.0版本的jemalloc,5.x版本的有坑,深坑</li>\n<li><code>./autogen.sh</code></li>\n<li><code>make</code></li>\n<li><code>make install_bin install_include install_lib</code>,之所以不使用<code>make install</code>是因为会报错,如下: <img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"Python3-6\"><a href=\"#Python3-6\" class=\"headerlink\" title=\"Python3.6\"></a>Python3.6</h1><p>记得<code>sudo</code></p>\n<ul>\n<li><code>apt-get install software-properties-common</code></li>\n<li><code>add-apt-repository ppa:jonathonf/python-3.6</code>, 按<code>ENTER</code></li>\n<li><code>apt-get update &amp;&amp; apt-get install python3.6 -y</code></li>\n<li>修改系统默认的<code>python</code>版本为3.6</li>\n<li><code>cd /usr/bin</code>, 保险起见,建议分两步</li>\n<li><code>rm python</code></li>\n<li><code>ln -s python3.6m python</code></li>\n<li>如需更新,<code>pip3 install --upgrade pip</code>, 8.1.1-&gt;19.0.3</li>\n<li><code>python -V</code><br><img src=\"./something-hard-install-docker/1.png\" alt=\"\"></li>\n</ul>"},{"title":"在Jupyter Notebook中使用本机的conda环境","copyright":true,"top":1,"date":"2019-03-22T05:16:02.000Z","_content":"\n本文介绍了如何在Jupyter Notebook中使用本机的conda环境进行开发\n\n<!--more-->\n\n# Jupyter下conda多环境管理\n\n## 1. 手撸命令\n\n1. 在`base`环境下安装内核管理工具\n`pip install ipykernel`\n2. 将环境内核添加到`jupyter kernel`中\n`python -m ipykernel install --user --name [env_name] --display-name \"[show name in jupyter]\"`\n3. 查看已在`jupyter`中创建的虚拟环境内核\n`jupyter kernelspec list`\n4. 删除内核\n`jupyter kernelspec uninstall [env_name]`\n\n## 2. 使用插件\n\n简单粗暴, 在`base`环境下使用命令\n`conda install nb_conda`\n![](./use-conda-env-in-jupyter/1.png)\n![](./use-conda-env-in-jupyter/2.png)\n接下来, 看看jupyter中能不能显示`conda`环境\n`jupyter notebook`\n![](./use-conda-env-in-jupyter/3.png)\n在文件内部也可以很方便的切换环境\n![](./use-conda-env-in-jupyter/4.png)\n\n","source":"_posts/use-conda-env-in-jupyter.md","raw":"---\ntitle: 在Jupyter Notebook中使用本机的conda环境\ncopyright: true\ntop: 1\ndate: 2019-03-22 13:16:02\ncategories: Conda\ntags:\n- conda\n- jupyter notebook\n---\n\n本文介绍了如何在Jupyter Notebook中使用本机的conda环境进行开发\n\n<!--more-->\n\n# Jupyter下conda多环境管理\n\n## 1. 手撸命令\n\n1. 在`base`环境下安装内核管理工具\n`pip install ipykernel`\n2. 将环境内核添加到`jupyter kernel`中\n`python -m ipykernel install --user --name [env_name] --display-name \"[show name in jupyter]\"`\n3. 查看已在`jupyter`中创建的虚拟环境内核\n`jupyter kernelspec list`\n4. 删除内核\n`jupyter kernelspec uninstall [env_name]`\n\n## 2. 使用插件\n\n简单粗暴, 在`base`环境下使用命令\n`conda install nb_conda`\n![](./use-conda-env-in-jupyter/1.png)\n![](./use-conda-env-in-jupyter/2.png)\n接下来, 看看jupyter中能不能显示`conda`环境\n`jupyter notebook`\n![](./use-conda-env-in-jupyter/3.png)\n在文件内部也可以很方便的切换环境\n![](./use-conda-env-in-jupyter/4.png)\n\n","slug":"use-conda-env-in-jupyter","published":1,"updated":"2019-05-13T11:52:06.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9k000lm8vew4fz21r4","content":"<p>本文介绍了如何在Jupyter Notebook中使用本机的conda环境进行开发</p>\n<a id=\"more\"></a>\n<h1 id=\"Jupyter下conda多环境管理\"><a href=\"#Jupyter下conda多环境管理\" class=\"headerlink\" title=\"Jupyter下conda多环境管理\"></a>Jupyter下conda多环境管理</h1><h2 id=\"1-手撸命令\"><a href=\"#1-手撸命令\" class=\"headerlink\" title=\"1. 手撸命令\"></a>1. 手撸命令</h2><ol>\n<li>在<code>base</code>环境下安装内核管理工具<br><code>pip install ipykernel</code></li>\n<li>将环境内核添加到<code>jupyter kernel</code>中<br><code>python -m ipykernel install --user --name [env_name] --display-name &quot;[show name in jupyter]&quot;</code></li>\n<li>查看已在<code>jupyter</code>中创建的虚拟环境内核<br><code>jupyter kernelspec list</code></li>\n<li>删除内核<br><code>jupyter kernelspec uninstall [env_name]</code></li>\n</ol>\n<h2 id=\"2-使用插件\"><a href=\"#2-使用插件\" class=\"headerlink\" title=\"2. 使用插件\"></a>2. 使用插件</h2><p>简单粗暴, 在<code>base</code>环境下使用命令<br><code>conda install nb_conda</code><br><img src=\"./use-conda-env-in-jupyter/1.png\" alt=\"\"><br><img src=\"./use-conda-env-in-jupyter/2.png\" alt=\"\"><br>接下来, 看看jupyter中能不能显示<code>conda</code>环境<br><code>jupyter notebook</code><br><img src=\"./use-conda-env-in-jupyter/3.png\" alt=\"\"><br>在文件内部也可以很方便的切换环境<br><img src=\"./use-conda-env-in-jupyter/4.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>本文介绍了如何在Jupyter Notebook中使用本机的conda环境进行开发</p>","more":"<h1 id=\"Jupyter下conda多环境管理\"><a href=\"#Jupyter下conda多环境管理\" class=\"headerlink\" title=\"Jupyter下conda多环境管理\"></a>Jupyter下conda多环境管理</h1><h2 id=\"1-手撸命令\"><a href=\"#1-手撸命令\" class=\"headerlink\" title=\"1. 手撸命令\"></a>1. 手撸命令</h2><ol>\n<li>在<code>base</code>环境下安装内核管理工具<br><code>pip install ipykernel</code></li>\n<li>将环境内核添加到<code>jupyter kernel</code>中<br><code>python -m ipykernel install --user --name [env_name] --display-name &quot;[show name in jupyter]&quot;</code></li>\n<li>查看已在<code>jupyter</code>中创建的虚拟环境内核<br><code>jupyter kernelspec list</code></li>\n<li>删除内核<br><code>jupyter kernelspec uninstall [env_name]</code></li>\n</ol>\n<h2 id=\"2-使用插件\"><a href=\"#2-使用插件\" class=\"headerlink\" title=\"2. 使用插件\"></a>2. 使用插件</h2><p>简单粗暴, 在<code>base</code>环境下使用命令<br><code>conda install nb_conda</code><br><img src=\"./use-conda-env-in-jupyter/1.png\" alt=\"\"><br><img src=\"./use-conda-env-in-jupyter/2.png\" alt=\"\"><br>接下来, 看看jupyter中能不能显示<code>conda</code>环境<br><code>jupyter notebook</code><br><img src=\"./use-conda-env-in-jupyter/3.png\" alt=\"\"><br>在文件内部也可以很方便的切换环境<br><img src=\"./use-conda-env-in-jupyter/4.png\" alt=\"\"></p>"},{"title":"Windows下右键新建.md文件教程","date":"2018-12-28T16:00:00.000Z","copyright":true,"_content":"\n原本创建.md文件需要首先打开markdown文本编辑器，如Typora，或者新建.txt文件然后修改后缀名，本文介绍了如何在Windows操作系统中添加右键创建.md文件的方法。\n\n<!--more-->\n\n# 环境\n\nwindows10操作系统\nTypora编辑器\n\n# 效果图\n\n![](./win-rightclick-create-md/1546050455.jpg)\n\n# 步骤\n\n## 1. 打开注册表\n1. `CMD+R`，打开运行对话框\n2. 输入`regedit`，打开注册表编辑器\n\n## 2. 修改注册表\n1. 在`计算机>HKEY_CLASSES_ROOT`右键查找，输入`Typora`，勾选项，取消勾选值和数据\n\n![](./win-rightclick-create-md/20181229103503.png)\n\n2. 确认运行的程序名字，我的电脑如图所示，运行文件是`Typora.exe`\n\n![](./win-rightclick-create-md/20181229103752.png)\n如果使用的是markdownpad或者其他编辑器，同理\n\n3. 在磁盘任意位置新建一个文件，后缀为`.reg`\n4. 打开编辑刚刚创建好的注册表文件，写入一下内容：\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\.md]\n@=\"Typora.exe\"\n[HKEY_CLASSES_ROOT\\.md\\ShellNew]\n\"NullFile\"=\"\"\n[HKEY_CLASSES_ROOT\\Typora.exe]\n@=\"Markdown\"\n```\n\n`@=\"Typora.exe\"` 代表的是指定.md文件的运行程序\n`@=\"Markdown\"` 代表的是右键时默认的文件名字，这样写新建为`新建Markdown.md`文件，而且右键菜单中显示`MarkDown`\n5. 编辑好之后,另存为,设置如图所示:\n\n![](./win-rightclick-create-md/20181229105408.png)\n\n文件名可以随便设置，但是后缀必须是`.reg`文件,保存类型一定要是`文本文档(*.txt)`,编码选择`Unicode`,非常重要!!!!!\n6. 保存文件后,双击运行,修改注册表即可,现在右键即可达到预期效果,如果不行,请重启一下.\n\n## 3. 编辑新建图标(非必须)\n1. 以`Typora`为例,在注册表`Typora.exe`下点击项`DefaultIcon`,右键修改\n2. 将属性修改为想要设置的Markdown文件图标\n\n![](./win-rightclick-create-md/20181229105300.png)\n\n文档有错或转载请联系邮箱`stepneverstop@qq.com`","source":"_posts/win-rightclick-create-md.md","raw":"---\ntitle:  Windows下右键新建.md文件教程\ndate:   2018-12-29 00:00:00\ncategories: 小知识\ntags: markdown\ncopyright: true\n---\n\n原本创建.md文件需要首先打开markdown文本编辑器，如Typora，或者新建.txt文件然后修改后缀名，本文介绍了如何在Windows操作系统中添加右键创建.md文件的方法。\n\n<!--more-->\n\n# 环境\n\nwindows10操作系统\nTypora编辑器\n\n# 效果图\n\n![](./win-rightclick-create-md/1546050455.jpg)\n\n# 步骤\n\n## 1. 打开注册表\n1. `CMD+R`，打开运行对话框\n2. 输入`regedit`，打开注册表编辑器\n\n## 2. 修改注册表\n1. 在`计算机>HKEY_CLASSES_ROOT`右键查找，输入`Typora`，勾选项，取消勾选值和数据\n\n![](./win-rightclick-create-md/20181229103503.png)\n\n2. 确认运行的程序名字，我的电脑如图所示，运行文件是`Typora.exe`\n\n![](./win-rightclick-create-md/20181229103752.png)\n如果使用的是markdownpad或者其他编辑器，同理\n\n3. 在磁盘任意位置新建一个文件，后缀为`.reg`\n4. 打开编辑刚刚创建好的注册表文件，写入一下内容：\n```\nWindows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\.md]\n@=\"Typora.exe\"\n[HKEY_CLASSES_ROOT\\.md\\ShellNew]\n\"NullFile\"=\"\"\n[HKEY_CLASSES_ROOT\\Typora.exe]\n@=\"Markdown\"\n```\n\n`@=\"Typora.exe\"` 代表的是指定.md文件的运行程序\n`@=\"Markdown\"` 代表的是右键时默认的文件名字，这样写新建为`新建Markdown.md`文件，而且右键菜单中显示`MarkDown`\n5. 编辑好之后,另存为,设置如图所示:\n\n![](./win-rightclick-create-md/20181229105408.png)\n\n文件名可以随便设置，但是后缀必须是`.reg`文件,保存类型一定要是`文本文档(*.txt)`,编码选择`Unicode`,非常重要!!!!!\n6. 保存文件后,双击运行,修改注册表即可,现在右键即可达到预期效果,如果不行,请重启一下.\n\n## 3. 编辑新建图标(非必须)\n1. 以`Typora`为例,在注册表`Typora.exe`下点击项`DefaultIcon`,右键修改\n2. 将属性修改为想要设置的Markdown文件图标\n\n![](./win-rightclick-create-md/20181229105300.png)\n\n文档有错或转载请联系邮箱`stepneverstop@qq.com`","slug":"win-rightclick-create-md","published":1,"updated":"2019-05-13T11:54:23.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9m000qm8vejd2bft2k","content":"<p>原本创建.md文件需要首先打开markdown文本编辑器，如Typora，或者新建.txt文件然后修改后缀名，本文介绍了如何在Windows操作系统中添加右键创建.md文件的方法。</p>\n<a id=\"more\"></a>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>windows10操作系统<br>Typora编辑器</p>\n<h1 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h1><p><img src=\"./win-rightclick-create-md/1546050455.jpg\" alt=\"\"></p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-打开注册表\"><a href=\"#1-打开注册表\" class=\"headerlink\" title=\"1. 打开注册表\"></a>1. 打开注册表</h2><ol>\n<li><code>CMD+R</code>，打开运行对话框</li>\n<li>输入<code>regedit</code>，打开注册表编辑器</li>\n</ol>\n<h2 id=\"2-修改注册表\"><a href=\"#2-修改注册表\" class=\"headerlink\" title=\"2. 修改注册表\"></a>2. 修改注册表</h2><ol>\n<li>在<code>计算机&gt;HKEY_CLASSES_ROOT</code>右键查找，输入<code>Typora</code>，勾选项，取消勾选值和数据</li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229103503.png\" alt=\"\"></p>\n<ol>\n<li>确认运行的程序名字，我的电脑如图所示，运行文件是<code>Typora.exe</code></li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229103752.png\" alt=\"\"><br>如果使用的是markdownpad或者其他编辑器，同理</p>\n<ol>\n<li>在磁盘任意位置新建一个文件，后缀为<code>.reg</code></li>\n<li>打开编辑刚刚创建好的注册表文件，写入一下内容：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\.md]</span><br><span class=\"line\">@=&quot;Typora.exe&quot;</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\.md\\ShellNew]</span><br><span class=\"line\">&quot;NullFile&quot;=&quot;&quot;</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\Typora.exe]</span><br><span class=\"line\">@=&quot;Markdown&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>@=&quot;Typora.exe&quot;</code> 代表的是指定.md文件的运行程序<br><code>@=&quot;Markdown&quot;</code> 代表的是右键时默认的文件名字，这样写新建为<code>新建Markdown.md</code>文件，而且右键菜单中显示<code>MarkDown</code></p>\n<ol>\n<li>编辑好之后,另存为,设置如图所示:</li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229105408.png\" alt=\"\"></p>\n<p>文件名可以随便设置，但是后缀必须是<code>.reg</code>文件,保存类型一定要是<code>文本文档(*.txt)</code>,编码选择<code>Unicode</code>,非常重要!!!!!</p>\n<ol>\n<li>保存文件后,双击运行,修改注册表即可,现在右键即可达到预期效果,如果不行,请重启一下.</li>\n</ol>\n<h2 id=\"3-编辑新建图标-非必须\"><a href=\"#3-编辑新建图标-非必须\" class=\"headerlink\" title=\"3. 编辑新建图标(非必须)\"></a>3. 编辑新建图标(非必须)</h2><ol>\n<li>以<code>Typora</code>为例,在注册表<code>Typora.exe</code>下点击项<code>DefaultIcon</code>,右键修改</li>\n<li>将属性修改为想要设置的Markdown文件图标</li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229105300.png\" alt=\"\"></p>\n<p>文档有错或转载请联系邮箱<code>stepneverstop@qq.com</code></p>\n","site":{"data":{}},"excerpt":"<p>原本创建.md文件需要首先打开markdown文本编辑器，如Typora，或者新建.txt文件然后修改后缀名，本文介绍了如何在Windows操作系统中添加右键创建.md文件的方法。</p>","more":"<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>windows10操作系统<br>Typora编辑器</p>\n<h1 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h1><p><img src=\"./win-rightclick-create-md/1546050455.jpg\" alt=\"\"></p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-打开注册表\"><a href=\"#1-打开注册表\" class=\"headerlink\" title=\"1. 打开注册表\"></a>1. 打开注册表</h2><ol>\n<li><code>CMD+R</code>，打开运行对话框</li>\n<li>输入<code>regedit</code>，打开注册表编辑器</li>\n</ol>\n<h2 id=\"2-修改注册表\"><a href=\"#2-修改注册表\" class=\"headerlink\" title=\"2. 修改注册表\"></a>2. 修改注册表</h2><ol>\n<li>在<code>计算机&gt;HKEY_CLASSES_ROOT</code>右键查找，输入<code>Typora</code>，勾选项，取消勾选值和数据</li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229103503.png\" alt=\"\"></p>\n<ol>\n<li>确认运行的程序名字，我的电脑如图所示，运行文件是<code>Typora.exe</code></li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229103752.png\" alt=\"\"><br>如果使用的是markdownpad或者其他编辑器，同理</p>\n<ol>\n<li>在磁盘任意位置新建一个文件，后缀为<code>.reg</code></li>\n<li>打开编辑刚刚创建好的注册表文件，写入一下内容：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows Registry Editor Version 5.00</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\.md]</span><br><span class=\"line\">@=&quot;Typora.exe&quot;</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\.md\\ShellNew]</span><br><span class=\"line\">&quot;NullFile&quot;=&quot;&quot;</span><br><span class=\"line\">[HKEY_CLASSES_ROOT\\Typora.exe]</span><br><span class=\"line\">@=&quot;Markdown&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>@=&quot;Typora.exe&quot;</code> 代表的是指定.md文件的运行程序<br><code>@=&quot;Markdown&quot;</code> 代表的是右键时默认的文件名字，这样写新建为<code>新建Markdown.md</code>文件，而且右键菜单中显示<code>MarkDown</code></p>\n<ol>\n<li>编辑好之后,另存为,设置如图所示:</li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229105408.png\" alt=\"\"></p>\n<p>文件名可以随便设置，但是后缀必须是<code>.reg</code>文件,保存类型一定要是<code>文本文档(*.txt)</code>,编码选择<code>Unicode</code>,非常重要!!!!!</p>\n<ol>\n<li>保存文件后,双击运行,修改注册表即可,现在右键即可达到预期效果,如果不行,请重启一下.</li>\n</ol>\n<h2 id=\"3-编辑新建图标-非必须\"><a href=\"#3-编辑新建图标-非必须\" class=\"headerlink\" title=\"3. 编辑新建图标(非必须)\"></a>3. 编辑新建图标(非必须)</h2><ol>\n<li>以<code>Typora</code>为例,在注册表<code>Typora.exe</code>下点击项<code>DefaultIcon</code>,右键修改</li>\n<li>将属性修改为想要设置的Markdown文件图标</li>\n</ol>\n<p><img src=\"./win-rightclick-create-md/20181229105300.png\" alt=\"\"></p>\n<p>文档有错或转载请联系邮箱<code>stepneverstop@qq.com</code></p>"},{"title":"为远程Ubuntu服务器安装图像界面","copyright":true,"top":1,"date":"2019-01-09T06:25:43.000Z","_content":"\n# 为远程服务器Ubuntu系统安装图形界面\n\n<!--more-->\n\n## 资源\n\n- [X2GO](https://wiki.x2go.org/doku.php/doc:installation:x2goclient)\n\n## 在服务器上安装X2go服务器\n\n1. 安装这个`add-apt-repository`命令\n\n\t- `apt-get install -y python-software-properties software-properties-common`\n\n2. 添加PPA\n\n\t- `apt-add-repository -y ppa:x2go/stable`\n\t\n3. 更新包列表并安装`x2go`服务器端\n\t- `apt-get update`\n\t- `apt-get install x2goserver x2goserver-xsession`\n\n### 安装XFCE图像界面\n\n在安装`XFCE`桌面环境时，有可能会出错，原因是perl为系统使用`zh_CN.UTF-8`，但系统不知道`zh_CN.UTF-8`是什么东西，所以需要安装一个中文语言，系统就知道`zh_CN.UTF-8`了，这个时候perl就不会报错了\n​\t- `apt-get install language-pack-zh-hans `\n​\t- `apt-get install xfce4`\n\n### 安装GNOME图像界面\n\n`apt-get install -y gnome`\n*没有测试成功,似乎是不兼容的问题*\n\n### 安装MATE图像界面\n\n`apt-get install -y mate`\n![](./为远程Ubuntu服务器安装图像界面/9.png)\n\n### 安装LXDE图像界面\n\n`apt-get install -y xorg lxde`\n![](./为远程Ubuntu服务器安装图像界面/10.png)\n\n### **重要配置**\n开启远程连接时有可能会出现`mesg: ttyname failed: Inappropriate ioctl for device`错误，所以需要修改一下文件\n​\t- `nano /root/.profile`\n​\t- 把`mesg n` 替换成 `tty -s && mesg n`\n\n## 在客户端上安装X2go客户端\n\n### MAC\n\n1. 安装`Xquartz` [XQuartz](https://www.xquartz.org/)\n\n![](./为远程Ubuntu服务器安装图像界面/1.png)\n\n2. 输入命令\n\n`echo \"*VT100.translations: #override Meta <KeyPress> V: insert-selection(PRIMARY, CUT_BUFFER0) \\n\" > ~/.Xdefaults `\n\n3. 安装`X2Go Client` [X2Go Client](https://code.x2go.org/releases/binary-macosx/x2goclient/)\n\n4. 打开客户端，设置连接\n\n![](./为远程Ubuntu服务器安装图像界面/2.png)\n\n5. 检查客户端设置，确保X11被正确引导\n\n![](./为远程Ubuntu服务器安装图像界面/3.png)\n\n6. 开始连接\n\n![](./为远程Ubuntu服务器安装图像界面/4.png)\n\n7. 连接成功\n\n![](./为远程Ubuntu服务器安装图像界面/5.png)\n\n### Windows\n\n1. 安装`x2goclient` [x2goclient](https://code.x2go.org/releases/binary-win32/x2goclient/releases/4.1.2.0-2018.06.22/)\n\n![](./为远程Ubuntu服务器安装图像界面/6.png)\n\n2. 配置好之后连接成功\n\n![](./为远程Ubuntu服务器安装图像界面/7.png)\n\n## Linux下各种图像界面测评\n\n![](./为远程Ubuntu服务器安装图像界面/8.png)","source":"_posts/为远程Ubuntu服务器安装图像界面.md","raw":"---\ntitle: 为远程Ubuntu服务器安装图像界面\ncopyright: true\ntop: 1\ndate: 2019-01-09 14:25:43\ncategories: Ubuntu\ntags: \n- ubuntu\n- x2go\n\n---\n\n# 为远程服务器Ubuntu系统安装图形界面\n\n<!--more-->\n\n## 资源\n\n- [X2GO](https://wiki.x2go.org/doku.php/doc:installation:x2goclient)\n\n## 在服务器上安装X2go服务器\n\n1. 安装这个`add-apt-repository`命令\n\n\t- `apt-get install -y python-software-properties software-properties-common`\n\n2. 添加PPA\n\n\t- `apt-add-repository -y ppa:x2go/stable`\n\t\n3. 更新包列表并安装`x2go`服务器端\n\t- `apt-get update`\n\t- `apt-get install x2goserver x2goserver-xsession`\n\n### 安装XFCE图像界面\n\n在安装`XFCE`桌面环境时，有可能会出错，原因是perl为系统使用`zh_CN.UTF-8`，但系统不知道`zh_CN.UTF-8`是什么东西，所以需要安装一个中文语言，系统就知道`zh_CN.UTF-8`了，这个时候perl就不会报错了\n​\t- `apt-get install language-pack-zh-hans `\n​\t- `apt-get install xfce4`\n\n### 安装GNOME图像界面\n\n`apt-get install -y gnome`\n*没有测试成功,似乎是不兼容的问题*\n\n### 安装MATE图像界面\n\n`apt-get install -y mate`\n![](./为远程Ubuntu服务器安装图像界面/9.png)\n\n### 安装LXDE图像界面\n\n`apt-get install -y xorg lxde`\n![](./为远程Ubuntu服务器安装图像界面/10.png)\n\n### **重要配置**\n开启远程连接时有可能会出现`mesg: ttyname failed: Inappropriate ioctl for device`错误，所以需要修改一下文件\n​\t- `nano /root/.profile`\n​\t- 把`mesg n` 替换成 `tty -s && mesg n`\n\n## 在客户端上安装X2go客户端\n\n### MAC\n\n1. 安装`Xquartz` [XQuartz](https://www.xquartz.org/)\n\n![](./为远程Ubuntu服务器安装图像界面/1.png)\n\n2. 输入命令\n\n`echo \"*VT100.translations: #override Meta <KeyPress> V: insert-selection(PRIMARY, CUT_BUFFER0) \\n\" > ~/.Xdefaults `\n\n3. 安装`X2Go Client` [X2Go Client](https://code.x2go.org/releases/binary-macosx/x2goclient/)\n\n4. 打开客户端，设置连接\n\n![](./为远程Ubuntu服务器安装图像界面/2.png)\n\n5. 检查客户端设置，确保X11被正确引导\n\n![](./为远程Ubuntu服务器安装图像界面/3.png)\n\n6. 开始连接\n\n![](./为远程Ubuntu服务器安装图像界面/4.png)\n\n7. 连接成功\n\n![](./为远程Ubuntu服务器安装图像界面/5.png)\n\n### Windows\n\n1. 安装`x2goclient` [x2goclient](https://code.x2go.org/releases/binary-win32/x2goclient/releases/4.1.2.0-2018.06.22/)\n\n![](./为远程Ubuntu服务器安装图像界面/6.png)\n\n2. 配置好之后连接成功\n\n![](./为远程Ubuntu服务器安装图像界面/7.png)\n\n## Linux下各种图像界面测评\n\n![](./为远程Ubuntu服务器安装图像界面/8.png)","slug":"为远程Ubuntu服务器安装图像界面","published":1,"updated":"2019-05-10T01:24:58.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9n000sm8ve51ep8e8g","content":"<h1 id=\"为远程服务器Ubuntu系统安装图形界面\"><a href=\"#为远程服务器Ubuntu系统安装图形界面\" class=\"headerlink\" title=\"为远程服务器Ubuntu系统安装图形界面\"></a>为远程服务器Ubuntu系统安装图形界面</h1><a id=\"more\"></a>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://wiki.x2go.org/doku.php/doc:installation:x2goclient\" rel=\"external nofollow\" target=\"_blank\">X2GO</a></li>\n</ul>\n<h2 id=\"在服务器上安装X2go服务器\"><a href=\"#在服务器上安装X2go服务器\" class=\"headerlink\" title=\"在服务器上安装X2go服务器\"></a>在服务器上安装X2go服务器</h2><ol>\n<li><p>安装这个<code>add-apt-repository</code>命令</p>\n<ul>\n<li><code>apt-get install -y python-software-properties software-properties-common</code></li>\n</ul>\n</li>\n<li><p>添加PPA</p>\n<ul>\n<li><code>apt-add-repository -y ppa:x2go/stable</code></li>\n</ul>\n</li>\n<li><p>更新包列表并安装<code>x2go</code>服务器端</p>\n<ul>\n<li><code>apt-get update</code></li>\n<li><code>apt-get install x2goserver x2goserver-xsession</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装XFCE图像界面\"><a href=\"#安装XFCE图像界面\" class=\"headerlink\" title=\"安装XFCE图像界面\"></a>安装XFCE图像界面</h3><p>在安装<code>XFCE</code>桌面环境时，有可能会出错，原因是perl为系统使用<code>zh_CN.UTF-8</code>，但系统不知道<code>zh_CN.UTF-8</code>是什么东西，所以需要安装一个中文语言，系统就知道<code>zh_CN.UTF-8</code>了，这个时候perl就不会报错了<br>​    - <code>apt-get install language-pack-zh-hans</code><br>​    - <code>apt-get install xfce4</code></p>\n<h3 id=\"安装GNOME图像界面\"><a href=\"#安装GNOME图像界面\" class=\"headerlink\" title=\"安装GNOME图像界面\"></a>安装GNOME图像界面</h3><p><code>apt-get install -y gnome</code><br><em>没有测试成功,似乎是不兼容的问题</em></p>\n<h3 id=\"安装MATE图像界面\"><a href=\"#安装MATE图像界面\" class=\"headerlink\" title=\"安装MATE图像界面\"></a>安装MATE图像界面</h3><p><code>apt-get install -y mate</code><br><img src=\"./为远程Ubuntu服务器安装图像界面/9.png\" alt=\"\"></p>\n<h3 id=\"安装LXDE图像界面\"><a href=\"#安装LXDE图像界面\" class=\"headerlink\" title=\"安装LXDE图像界面\"></a>安装LXDE图像界面</h3><p><code>apt-get install -y xorg lxde</code><br><img src=\"./为远程Ubuntu服务器安装图像界面/10.png\" alt=\"\"></p>\n<h3 id=\"重要配置\"><a href=\"#重要配置\" class=\"headerlink\" title=\"重要配置\"></a><strong>重要配置</strong></h3><p>开启远程连接时有可能会出现<code>mesg: ttyname failed: Inappropriate ioctl for device</code>错误，所以需要修改一下文件<br>​    - <code>nano /root/.profile</code><br>​    - 把<code>mesg n</code> 替换成 <code>tty -s &amp;&amp; mesg n</code></p>\n<h2 id=\"在客户端上安装X2go客户端\"><a href=\"#在客户端上安装X2go客户端\" class=\"headerlink\" title=\"在客户端上安装X2go客户端\"></a>在客户端上安装X2go客户端</h2><h3 id=\"MAC\"><a href=\"#MAC\" class=\"headerlink\" title=\"MAC\"></a>MAC</h3><ol>\n<li>安装<code>Xquartz</code> <a href=\"https://www.xquartz.org/\" rel=\"external nofollow\" target=\"_blank\">XQuartz</a></li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/1.png\" alt=\"\"></p>\n<ol>\n<li>输入命令</li>\n</ol>\n<p><code>echo &quot;*VT100.translations: #override Meta &lt;KeyPress&gt; V: insert-selection(PRIMARY, CUT_BUFFER0) \\n&quot; &gt; ~/.Xdefaults</code></p>\n<ol>\n<li><p>安装<code>X2Go Client</code> <a href=\"https://code.x2go.org/releases/binary-macosx/x2goclient/\" rel=\"external nofollow\" target=\"_blank\">X2Go Client</a></p>\n</li>\n<li><p>打开客户端，设置连接</p>\n</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/2.png\" alt=\"\"></p>\n<ol>\n<li>检查客户端设置，确保X11被正确引导</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/3.png\" alt=\"\"></p>\n<ol>\n<li>开始连接</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/4.png\" alt=\"\"></p>\n<ol>\n<li>连接成功</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/5.png\" alt=\"\"></p>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ol>\n<li>安装<code>x2goclient</code> <a href=\"https://code.x2go.org/releases/binary-win32/x2goclient/releases/4.1.2.0-2018.06.22/\" rel=\"external nofollow\" target=\"_blank\">x2goclient</a></li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/6.png\" alt=\"\"></p>\n<ol>\n<li>配置好之后连接成功</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/7.png\" alt=\"\"></p>\n<h2 id=\"Linux下各种图像界面测评\"><a href=\"#Linux下各种图像界面测评\" class=\"headerlink\" title=\"Linux下各种图像界面测评\"></a>Linux下各种图像界面测评</h2><p><img src=\"./为远程Ubuntu服务器安装图像界面/8.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"为远程服务器Ubuntu系统安装图形界面\"><a href=\"#为远程服务器Ubuntu系统安装图形界面\" class=\"headerlink\" title=\"为远程服务器Ubuntu系统安装图形界面\"></a>为远程服务器Ubuntu系统安装图形界面</h1>","more":"<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://wiki.x2go.org/doku.php/doc:installation:x2goclient\" rel=\"external nofollow\" target=\"_blank\">X2GO</a></li>\n</ul>\n<h2 id=\"在服务器上安装X2go服务器\"><a href=\"#在服务器上安装X2go服务器\" class=\"headerlink\" title=\"在服务器上安装X2go服务器\"></a>在服务器上安装X2go服务器</h2><ol>\n<li><p>安装这个<code>add-apt-repository</code>命令</p>\n<ul>\n<li><code>apt-get install -y python-software-properties software-properties-common</code></li>\n</ul>\n</li>\n<li><p>添加PPA</p>\n<ul>\n<li><code>apt-add-repository -y ppa:x2go/stable</code></li>\n</ul>\n</li>\n<li><p>更新包列表并安装<code>x2go</code>服务器端</p>\n<ul>\n<li><code>apt-get update</code></li>\n<li><code>apt-get install x2goserver x2goserver-xsession</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装XFCE图像界面\"><a href=\"#安装XFCE图像界面\" class=\"headerlink\" title=\"安装XFCE图像界面\"></a>安装XFCE图像界面</h3><p>在安装<code>XFCE</code>桌面环境时，有可能会出错，原因是perl为系统使用<code>zh_CN.UTF-8</code>，但系统不知道<code>zh_CN.UTF-8</code>是什么东西，所以需要安装一个中文语言，系统就知道<code>zh_CN.UTF-8</code>了，这个时候perl就不会报错了<br>​    - <code>apt-get install language-pack-zh-hans</code><br>​    - <code>apt-get install xfce4</code></p>\n<h3 id=\"安装GNOME图像界面\"><a href=\"#安装GNOME图像界面\" class=\"headerlink\" title=\"安装GNOME图像界面\"></a>安装GNOME图像界面</h3><p><code>apt-get install -y gnome</code><br><em>没有测试成功,似乎是不兼容的问题</em></p>\n<h3 id=\"安装MATE图像界面\"><a href=\"#安装MATE图像界面\" class=\"headerlink\" title=\"安装MATE图像界面\"></a>安装MATE图像界面</h3><p><code>apt-get install -y mate</code><br><img src=\"./为远程Ubuntu服务器安装图像界面/9.png\" alt=\"\"></p>\n<h3 id=\"安装LXDE图像界面\"><a href=\"#安装LXDE图像界面\" class=\"headerlink\" title=\"安装LXDE图像界面\"></a>安装LXDE图像界面</h3><p><code>apt-get install -y xorg lxde</code><br><img src=\"./为远程Ubuntu服务器安装图像界面/10.png\" alt=\"\"></p>\n<h3 id=\"重要配置\"><a href=\"#重要配置\" class=\"headerlink\" title=\"重要配置\"></a><strong>重要配置</strong></h3><p>开启远程连接时有可能会出现<code>mesg: ttyname failed: Inappropriate ioctl for device</code>错误，所以需要修改一下文件<br>​    - <code>nano /root/.profile</code><br>​    - 把<code>mesg n</code> 替换成 <code>tty -s &amp;&amp; mesg n</code></p>\n<h2 id=\"在客户端上安装X2go客户端\"><a href=\"#在客户端上安装X2go客户端\" class=\"headerlink\" title=\"在客户端上安装X2go客户端\"></a>在客户端上安装X2go客户端</h2><h3 id=\"MAC\"><a href=\"#MAC\" class=\"headerlink\" title=\"MAC\"></a>MAC</h3><ol>\n<li>安装<code>Xquartz</code> <a href=\"https://www.xquartz.org/\" rel=\"external nofollow\" target=\"_blank\">XQuartz</a></li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/1.png\" alt=\"\"></p>\n<ol>\n<li>输入命令</li>\n</ol>\n<p><code>echo &quot;*VT100.translations: #override Meta &lt;KeyPress&gt; V: insert-selection(PRIMARY, CUT_BUFFER0) \\n&quot; &gt; ~/.Xdefaults</code></p>\n<ol>\n<li><p>安装<code>X2Go Client</code> <a href=\"https://code.x2go.org/releases/binary-macosx/x2goclient/\" rel=\"external nofollow\" target=\"_blank\">X2Go Client</a></p>\n</li>\n<li><p>打开客户端，设置连接</p>\n</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/2.png\" alt=\"\"></p>\n<ol>\n<li>检查客户端设置，确保X11被正确引导</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/3.png\" alt=\"\"></p>\n<ol>\n<li>开始连接</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/4.png\" alt=\"\"></p>\n<ol>\n<li>连接成功</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/5.png\" alt=\"\"></p>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ol>\n<li>安装<code>x2goclient</code> <a href=\"https://code.x2go.org/releases/binary-win32/x2goclient/releases/4.1.2.0-2018.06.22/\" rel=\"external nofollow\" target=\"_blank\">x2goclient</a></li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/6.png\" alt=\"\"></p>\n<ol>\n<li>配置好之后连接成功</li>\n</ol>\n<p><img src=\"./为远程Ubuntu服务器安装图像界面/7.png\" alt=\"\"></p>\n<h2 id=\"Linux下各种图像界面测评\"><a href=\"#Linux下各种图像界面测评\" class=\"headerlink\" title=\"Linux下各种图像界面测评\"></a>Linux下各种图像界面测评</h2><p><img src=\"./为远程Ubuntu服务器安装图像界面/8.png\" alt=\"\"></p>"},{"title":"SARSA and Q-Learning","copyright":true,"mathjax":true,"password":123,"top":1,"date":"2019-05-13T12:44:45.000Z","keywords":null,"description":null,"_content":"\n本文介绍了两个强化学习中解决Model-Free问题的最经典算法：SARSA和Q-Learning，这两个算法也是On-Policy与Off-Policy的分水岭。\n\n<!--more-->\n\n","source":"_posts/sarsa-and-q-learning.md","raw":"---\ntitle: SARSA and Q-Learning\ncopyright: true\nmathjax: true\npassword: 123\ntop: 1\ndate: 2019-05-13 20:44:45\ncategories: ReinforcementLearning\ntags:\n- rl\nkeywords:\ndescription:\n---\n\n本文介绍了两个强化学习中解决Model-Free问题的最经典算法：SARSA和Q-Learning，这两个算法也是On-Policy与Off-Policy的分水岭。\n\n<!--more-->\n\n","slug":"sarsa-and-q-learning","published":1,"updated":"2019-05-13T12:46:37.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9p000xm8vejdm2j7ea","content":"<p>本文介绍了两个强化学习中解决Model-Free问题的最经典算法：SARSA和Q-Learning，这两个算法也是On-Policy与Off-Policy的分水岭。</p>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<p>本文介绍了两个强化学习中解决Model-Free问题的最经典算法：SARSA和Q-Learning，这两个算法也是On-Policy与Off-Policy的分水岭。</p>","more":""},{"title":"强化学习","copyright":true,"top":100,"date":"2019-05-09T08:24:54.000Z","_content":"\n# 基础知识\n\n- [强化学习基本概念](./强化学习基本概念.html)\n- [强化学习的类别](./rl-classification.html)\n- [强化学习之MDP马尔科夫决策过程](./强化学习之MDP马尔科夫决策过程.html)\n- [价值与贝尔曼方程](./价值与贝尔曼方程.html)\n- [动态规划 Dynamic Programming](./dynamic-programming.html)\n- [Monte Carlo and Temporal-Difference](./mc-td.html)\n- [SARSA and Q-Learning](./sarsa-and-q-learning.html)\n\n\n\n# 论文精读\n\n- [Evolution Strategies as a Scalable Alternative to Reinforcement Learning](./Evolution-Strategies-2017.html)\n\n  \n\n# 相关信息\n\n- [强化学习的里程碑](./强化学习的里程碑.html)\n\n# 学习资源\n\n- [《Reinforcement Learning : An Introduction 2nd Edition》——Sutton](http://incompleteideas.net/book/RLbook2018.pdf)\n  - 基础必读\n  - 通俗易懂\n  - 数学公式很多，虽然很多不太实用，但对理解RL的精髓很有帮助\n- [Reinforcement Learning Course by David Silver, 2015](https://www.youtube.com/playlist?list=PLqYmG7hTraZDM-OYHWgPebj2MfCFzFObQ)\n  - 基础必看，讲述了强化学习的基础算法\n  - 有字幕，通俗易懂\n  - 有课件Slide\n- [OpenAI Spinning Up](https://spinningup.openai.com/en/latest/)\n  - 深度强化学习\n  - 算法很多，解析也很清晰\n  - 有代码仓库，可以查看源代码，方便复现\n- [Medium : Reinforcement Learning]([https://medium.com/search?q=reinforcement%20learning](https://medium.com/search?q=reinforcement learning))\n  - 博文质量不错，内容涵盖基础与进阶\n  - 缺点：更新少\n- [StackOverflow : Reinforcement Learning](https://stackoverflow.com/questions/tagged/reinforcement-learning)\n  - 进阶必备\n  - 多看多交流可以加深自己的理解","source":"_posts/强化学习.md","raw":"---\ntitle: 强化学习\ncopyright: true\ntop: 100\ndate: 2019-05-09 16:24:54\ncategories: ReinforcementLearning\ntags:\n- rl\n---\n\n# 基础知识\n\n- [强化学习基本概念](./强化学习基本概念.html)\n- [强化学习的类别](./rl-classification.html)\n- [强化学习之MDP马尔科夫决策过程](./强化学习之MDP马尔科夫决策过程.html)\n- [价值与贝尔曼方程](./价值与贝尔曼方程.html)\n- [动态规划 Dynamic Programming](./dynamic-programming.html)\n- [Monte Carlo and Temporal-Difference](./mc-td.html)\n- [SARSA and Q-Learning](./sarsa-and-q-learning.html)\n\n\n\n# 论文精读\n\n- [Evolution Strategies as a Scalable Alternative to Reinforcement Learning](./Evolution-Strategies-2017.html)\n\n  \n\n# 相关信息\n\n- [强化学习的里程碑](./强化学习的里程碑.html)\n\n# 学习资源\n\n- [《Reinforcement Learning : An Introduction 2nd Edition》——Sutton](http://incompleteideas.net/book/RLbook2018.pdf)\n  - 基础必读\n  - 通俗易懂\n  - 数学公式很多，虽然很多不太实用，但对理解RL的精髓很有帮助\n- [Reinforcement Learning Course by David Silver, 2015](https://www.youtube.com/playlist?list=PLqYmG7hTraZDM-OYHWgPebj2MfCFzFObQ)\n  - 基础必看，讲述了强化学习的基础算法\n  - 有字幕，通俗易懂\n  - 有课件Slide\n- [OpenAI Spinning Up](https://spinningup.openai.com/en/latest/)\n  - 深度强化学习\n  - 算法很多，解析也很清晰\n  - 有代码仓库，可以查看源代码，方便复现\n- [Medium : Reinforcement Learning]([https://medium.com/search?q=reinforcement%20learning](https://medium.com/search?q=reinforcement learning))\n  - 博文质量不错，内容涵盖基础与进阶\n  - 缺点：更新少\n- [StackOverflow : Reinforcement Learning](https://stackoverflow.com/questions/tagged/reinforcement-learning)\n  - 进阶必备\n  - 多看多交流可以加深自己的理解","slug":"强化学习","published":1,"updated":"2019-05-21T13:05:29.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9r0010m8ve1jz2ow11","content":"<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><ul>\n<li><a href=\"./强化学习基本概念.html\">强化学习基本概念</a></li>\n<li><a href=\"./rl-classification.html\">强化学习的类别</a></li>\n<li><a href=\"./强化学习之MDP马尔科夫决策过程.html\">强化学习之MDP马尔科夫决策过程</a></li>\n<li><a href=\"./价值与贝尔曼方程.html\">价值与贝尔曼方程</a></li>\n<li><a href=\"./dynamic-programming.html\">动态规划 Dynamic Programming</a></li>\n<li><a href=\"./mc-td.html\">Monte Carlo and Temporal-Difference</a></li>\n<li><a href=\"./sarsa-and-q-learning.html\">SARSA and Q-Learning</a></li>\n</ul>\n<h1 id=\"论文精读\"><a href=\"#论文精读\" class=\"headerlink\" title=\"论文精读\"></a>论文精读</h1><ul>\n<li><a href=\"./Evolution-Strategies-2017.html\">Evolution Strategies as a Scalable Alternative to Reinforcement Learning</a></li>\n</ul>\n<h1 id=\"相关信息\"><a href=\"#相关信息\" class=\"headerlink\" title=\"相关信息\"></a>相关信息</h1><ul>\n<li><a href=\"./强化学习的里程碑.html\">强化学习的里程碑</a></li>\n</ul>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><ul>\n<li><a href=\"http://incompleteideas.net/book/RLbook2018.pdf\" rel=\"external nofollow\" target=\"_blank\">《Reinforcement Learning : An Introduction 2nd Edition》——Sutton</a><ul>\n<li>基础必读</li>\n<li>通俗易懂</li>\n<li>数学公式很多，虽然很多不太实用，但对理解RL的精髓很有帮助</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLqYmG7hTraZDM-OYHWgPebj2MfCFzFObQ\" rel=\"external nofollow\" target=\"_blank\">Reinforcement Learning Course by David Silver, 2015</a><ul>\n<li>基础必看，讲述了强化学习的基础算法</li>\n<li>有字幕，通俗易懂</li>\n<li>有课件Slide</li>\n</ul>\n</li>\n<li><a href=\"https://spinningup.openai.com/en/latest/\" rel=\"external nofollow\" target=\"_blank\">OpenAI Spinning Up</a><ul>\n<li>深度强化学习</li>\n<li>算法很多，解析也很清晰</li>\n<li>有代码仓库，可以查看源代码，方便复现</li>\n</ul>\n</li>\n<li><a href=\"[https://medium.com/search?q=reinforcement%20learning](https://medium.com/search?q=reinforcement learning\">Medium : Reinforcement Learning</a>)<ul>\n<li>博文质量不错，内容涵盖基础与进阶</li>\n<li>缺点：更新少</li>\n</ul>\n</li>\n<li><a href=\"https://stackoverflow.com/questions/tagged/reinforcement-learning\" rel=\"external nofollow\" target=\"_blank\">StackOverflow : Reinforcement Learning</a><ul>\n<li>进阶必备</li>\n<li>多看多交流可以加深自己的理解</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><ul>\n<li><a href=\"./强化学习基本概念.html\">强化学习基本概念</a></li>\n<li><a href=\"./rl-classification.html\">强化学习的类别</a></li>\n<li><a href=\"./强化学习之MDP马尔科夫决策过程.html\">强化学习之MDP马尔科夫决策过程</a></li>\n<li><a href=\"./价值与贝尔曼方程.html\">价值与贝尔曼方程</a></li>\n<li><a href=\"./dynamic-programming.html\">动态规划 Dynamic Programming</a></li>\n<li><a href=\"./mc-td.html\">Monte Carlo and Temporal-Difference</a></li>\n<li><a href=\"./sarsa-and-q-learning.html\">SARSA and Q-Learning</a></li>\n</ul>\n<h1 id=\"论文精读\"><a href=\"#论文精读\" class=\"headerlink\" title=\"论文精读\"></a>论文精读</h1><ul>\n<li><a href=\"./Evolution-Strategies-2017.html\">Evolution Strategies as a Scalable Alternative to Reinforcement Learning</a></li>\n</ul>\n<h1 id=\"相关信息\"><a href=\"#相关信息\" class=\"headerlink\" title=\"相关信息\"></a>相关信息</h1><ul>\n<li><a href=\"./强化学习的里程碑.html\">强化学习的里程碑</a></li>\n</ul>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><ul>\n<li><a href=\"http://incompleteideas.net/book/RLbook2018.pdf\" rel=\"external nofollow\" target=\"_blank\">《Reinforcement Learning : An Introduction 2nd Edition》——Sutton</a><ul>\n<li>基础必读</li>\n<li>通俗易懂</li>\n<li>数学公式很多，虽然很多不太实用，但对理解RL的精髓很有帮助</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLqYmG7hTraZDM-OYHWgPebj2MfCFzFObQ\" rel=\"external nofollow\" target=\"_blank\">Reinforcement Learning Course by David Silver, 2015</a><ul>\n<li>基础必看，讲述了强化学习的基础算法</li>\n<li>有字幕，通俗易懂</li>\n<li>有课件Slide</li>\n</ul>\n</li>\n<li><a href=\"https://spinningup.openai.com/en/latest/\" rel=\"external nofollow\" target=\"_blank\">OpenAI Spinning Up</a><ul>\n<li>深度强化学习</li>\n<li>算法很多，解析也很清晰</li>\n<li>有代码仓库，可以查看源代码，方便复现</li>\n</ul>\n</li>\n<li><a href=\"[https://medium.com/search?q=reinforcement%20learning](https://medium.com/search?q=reinforcement learning\">Medium : Reinforcement Learning</a>)<ul>\n<li>博文质量不错，内容涵盖基础与进阶</li>\n<li>缺点：更新少</li>\n</ul>\n</li>\n<li><a href=\"https://stackoverflow.com/questions/tagged/reinforcement-learning\" rel=\"external nofollow\" target=\"_blank\">StackOverflow : Reinforcement Learning</a><ul>\n<li>进阶必备</li>\n<li>多看多交流可以加深自己的理解</li>\n</ul>\n</li>\n</ul>\n"},{"title":"强化学习的里程碑","copyright":true,"top":1,"date":"2019-05-07T00:26:39.000Z","mathjax":true,"_content":"\n# 强化学习的里程碑\n\n<!--more-->\n\n## Alpha Go\n\n> 阿尔法围棋（AlphaGo）是第一个击败人类职业围棋选手、第一个战胜围棋世界冠军的人工智能机器人，由谷歌（Google）旗下**DeepMind**公司戴密斯·哈萨比斯领衔的团队开发。其主要工作原理是“深度学习”。\n\n>> 2016年3月，阿尔法围棋与围棋世界冠军、职业九段棋手李世石进行围棋人机大战，以4比1的总比分获胜；\n\n>> ![](./强化学习的里程碑/LeeSedolBattleWithAlphaGo.jpeg)\n\n>> 2016年末2017年初，该程序在中国棋类网站上以“大师”（Master）为注册账号与中日韩数十位围棋高手进行快棋对决，连续60局无一败绩；\n\n>> 2017年5月，在中国乌镇围棋峰会上，它与排名世界第一的世界围棋冠军柯洁对战，以3比0的总比分获胜。围棋界公认阿尔法围棋的棋力已经超过人类职业围棋顶尖水平，在GoRatings网站公布的世界职业围棋排名中，其等级分曾超过排名人类第一的棋手柯洁。\n\n>> ![](./强化学习的里程碑/KeJieBattleWithAlphaGo.jpeg)\n\n>> 2017年5月27日，在柯洁与阿尔法围棋的人机大战之后，阿尔法围棋团队宣布阿尔法围棋将不再参加围棋比赛。\n\n>> 2017年10月18日，DeepMind团队公布了最强版阿尔法围棋，代号AlphaGo Zero。\n\n2016年3月机器学习一个重要的时间就是：名为AlphaGo的计算机程序打败了围棋世界冠军李世石，比分4：1。按理来说我们对机器在某项比赛、某些运动中击败人类顶尖选手不会感到大惊小怪，最著名的就是97年IBM的“深蓝（Deep Blue）”计算机程序打败了世界象棋冠军Garry Kasparov。\n\n![](./强化学习的里程碑/GKBattleWithDeepBlue.jpeg)\n\n机器同样是使用强大的算力以数倍、数十倍、数百倍的训练时间去击败人类（通常人类训练十年的时间，机器可以模拟训练几百年），为什么Alpha Go的取胜这么重要、这么引人关注（世界各地媒体疯狂报道，一股狂潮如炒作一般）呢？\n\n原因有两个：\n\n1. AlphaGo解决的围棋问题比之前的都要复杂，西洋双陆棋只有$10^{20}$种不同的“棋位”空间配置，深蓝打败人类的国际象棋有$10^{43}$种不同的“棋位”空间配置，而围棋却有$10^{170}$种不同的“棋位”空间配置，这种量级的数字人类已经无法处理（意思是对于这么多种不同的状态，就是目前算力最强的计算机也无能为力）。举个例子，$10^{170}$这个数字比宇宙中存在的原子数还多。为什么AlphaGo可以在围棋上击败人类就如此重要呢？因为机器如果可以解决这个大的状态空间的问题，那么在机器学习也应该能解决很复杂的现实世界中的问题。这意味着机器真正融入我们的劳动力市场，为我们的日常生活提供便利的日子已经不远啦（真的吗？）！\n2. AlphaGo解决的围棋问题不可能通过纯粹的、暴力计算的方式来学习出很好的模型，这就需要为AlphaGo设计一个更加“智能、聪明”的算法。AlphaGo引起热潮的另一个原因就是，其训练算法是一个通用算法，而不是一个专门为解决某项任务特别设计的算法，这与97年IBM的深蓝计算机程序完全不同，因为深蓝只能用于学习下国际象棋，在中国象棋中就不适于训练。此前，AlphaGo的前身已经能够在Atari 49个不同规则、不同游戏模式中使用相同的通用训练算法训练出比人类还厉害的模型，AlphaGo的成功意味着不仅在虚拟环境可以使用这一套学习方法训练模型，而且可以在不同的现实世界问题中使用这一套学习方法、代码结构。\n\n**有能力解决状态空间非常大的问题**和**通用学习算法**是使AlphaGo警报一时的两个主要原因，这也解释了为什么这场比赛在媒体上引起了轰动。有些人认为李世石的失败是机器占据人类劳动力市场的先兆，也有些人认为这预示着人工智能迎来了黄金时代，实际上我们距离真正的人工智能还有很长的路要走，就算机器可以在某项非常复杂的任务中超过人类的表现能力，其也没有真正的思维方式，不会进行思考，说到底也只是曲线的拟合罢了，但是，只有基础做好了，才能向上研究人工智能。\n\n构建AlphaGo和其前身（应用于Atari游戏）的学习算法的设计思路、计算架构在一系列论文和视频中都可以获得，而没有被Google（收购了英国公司DeepMind）私藏。为什么他不私藏呢？这么厉害的代码、设计思路没必要公开出来嘛，因为Google想把自己打造为基于云的机器学习和大数据的领导者，而它在2016年是全球第三大云服务提供商，排在微软和亚马逊之后，它需要把客户从其他平台引流到自己的平台上。由此可见，大公司们之间的竞争反而可以使我们平民获益。\n\n\n> [The Algorithm Behind the Curtain: How DeepMind Built a Machine that Beat a Go Master (1 of 5)](https://randomant.net/the-algorithm-behind-the-curtain/)","source":"_posts/强化学习的里程碑.md","raw":"---\ntitle: 强化学习的里程碑\ncopyright: true\ntop: 1\ndate: 2019-05-07 08:26:39\nmathjax: true\ncategories: ReinforcementLearning\ntags: rl\n---\n\n# 强化学习的里程碑\n\n<!--more-->\n\n## Alpha Go\n\n> 阿尔法围棋（AlphaGo）是第一个击败人类职业围棋选手、第一个战胜围棋世界冠军的人工智能机器人，由谷歌（Google）旗下**DeepMind**公司戴密斯·哈萨比斯领衔的团队开发。其主要工作原理是“深度学习”。\n\n>> 2016年3月，阿尔法围棋与围棋世界冠军、职业九段棋手李世石进行围棋人机大战，以4比1的总比分获胜；\n\n>> ![](./强化学习的里程碑/LeeSedolBattleWithAlphaGo.jpeg)\n\n>> 2016年末2017年初，该程序在中国棋类网站上以“大师”（Master）为注册账号与中日韩数十位围棋高手进行快棋对决，连续60局无一败绩；\n\n>> 2017年5月，在中国乌镇围棋峰会上，它与排名世界第一的世界围棋冠军柯洁对战，以3比0的总比分获胜。围棋界公认阿尔法围棋的棋力已经超过人类职业围棋顶尖水平，在GoRatings网站公布的世界职业围棋排名中，其等级分曾超过排名人类第一的棋手柯洁。\n\n>> ![](./强化学习的里程碑/KeJieBattleWithAlphaGo.jpeg)\n\n>> 2017年5月27日，在柯洁与阿尔法围棋的人机大战之后，阿尔法围棋团队宣布阿尔法围棋将不再参加围棋比赛。\n\n>> 2017年10月18日，DeepMind团队公布了最强版阿尔法围棋，代号AlphaGo Zero。\n\n2016年3月机器学习一个重要的时间就是：名为AlphaGo的计算机程序打败了围棋世界冠军李世石，比分4：1。按理来说我们对机器在某项比赛、某些运动中击败人类顶尖选手不会感到大惊小怪，最著名的就是97年IBM的“深蓝（Deep Blue）”计算机程序打败了世界象棋冠军Garry Kasparov。\n\n![](./强化学习的里程碑/GKBattleWithDeepBlue.jpeg)\n\n机器同样是使用强大的算力以数倍、数十倍、数百倍的训练时间去击败人类（通常人类训练十年的时间，机器可以模拟训练几百年），为什么Alpha Go的取胜这么重要、这么引人关注（世界各地媒体疯狂报道，一股狂潮如炒作一般）呢？\n\n原因有两个：\n\n1. AlphaGo解决的围棋问题比之前的都要复杂，西洋双陆棋只有$10^{20}$种不同的“棋位”空间配置，深蓝打败人类的国际象棋有$10^{43}$种不同的“棋位”空间配置，而围棋却有$10^{170}$种不同的“棋位”空间配置，这种量级的数字人类已经无法处理（意思是对于这么多种不同的状态，就是目前算力最强的计算机也无能为力）。举个例子，$10^{170}$这个数字比宇宙中存在的原子数还多。为什么AlphaGo可以在围棋上击败人类就如此重要呢？因为机器如果可以解决这个大的状态空间的问题，那么在机器学习也应该能解决很复杂的现实世界中的问题。这意味着机器真正融入我们的劳动力市场，为我们的日常生活提供便利的日子已经不远啦（真的吗？）！\n2. AlphaGo解决的围棋问题不可能通过纯粹的、暴力计算的方式来学习出很好的模型，这就需要为AlphaGo设计一个更加“智能、聪明”的算法。AlphaGo引起热潮的另一个原因就是，其训练算法是一个通用算法，而不是一个专门为解决某项任务特别设计的算法，这与97年IBM的深蓝计算机程序完全不同，因为深蓝只能用于学习下国际象棋，在中国象棋中就不适于训练。此前，AlphaGo的前身已经能够在Atari 49个不同规则、不同游戏模式中使用相同的通用训练算法训练出比人类还厉害的模型，AlphaGo的成功意味着不仅在虚拟环境可以使用这一套学习方法训练模型，而且可以在不同的现实世界问题中使用这一套学习方法、代码结构。\n\n**有能力解决状态空间非常大的问题**和**通用学习算法**是使AlphaGo警报一时的两个主要原因，这也解释了为什么这场比赛在媒体上引起了轰动。有些人认为李世石的失败是机器占据人类劳动力市场的先兆，也有些人认为这预示着人工智能迎来了黄金时代，实际上我们距离真正的人工智能还有很长的路要走，就算机器可以在某项非常复杂的任务中超过人类的表现能力，其也没有真正的思维方式，不会进行思考，说到底也只是曲线的拟合罢了，但是，只有基础做好了，才能向上研究人工智能。\n\n构建AlphaGo和其前身（应用于Atari游戏）的学习算法的设计思路、计算架构在一系列论文和视频中都可以获得，而没有被Google（收购了英国公司DeepMind）私藏。为什么他不私藏呢？这么厉害的代码、设计思路没必要公开出来嘛，因为Google想把自己打造为基于云的机器学习和大数据的领导者，而它在2016年是全球第三大云服务提供商，排在微软和亚马逊之后，它需要把客户从其他平台引流到自己的平台上。由此可见，大公司们之间的竞争反而可以使我们平民获益。\n\n\n> [The Algorithm Behind the Curtain: How DeepMind Built a Machine that Beat a Go Master (1 of 5)](https://randomant.net/the-algorithm-behind-the-curtain/)","slug":"强化学习的里程碑","published":1,"updated":"2019-05-10T01:25:19.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaa9u0013m8ve65v4wt93","content":"<h1 id=\"强化学习的里程碑\"><a href=\"#强化学习的里程碑\" class=\"headerlink\" title=\"强化学习的里程碑\"></a>强化学习的里程碑</h1><a id=\"more\"></a>\n<h2 id=\"Alpha-Go\"><a href=\"#Alpha-Go\" class=\"headerlink\" title=\"Alpha Go\"></a>Alpha Go</h2><blockquote>\n<p>阿尔法围棋（AlphaGo）是第一个击败人类职业围棋选手、第一个战胜围棋世界冠军的人工智能机器人，由谷歌（Google）旗下<strong>DeepMind</strong>公司戴密斯·哈萨比斯领衔的团队开发。其主要工作原理是“深度学习”。</p>\n<blockquote>\n<p>2016年3月，阿尔法围棋与围棋世界冠军、职业九段棋手李世石进行围棋人机大战，以4比1的总比分获胜；</p>\n<p><img src=\"./强化学习的里程碑/LeeSedolBattleWithAlphaGo.jpeg\" alt=\"\"></p>\n<p>2016年末2017年初，该程序在中国棋类网站上以“大师”（Master）为注册账号与中日韩数十位围棋高手进行快棋对决，连续60局无一败绩；</p>\n<p>2017年5月，在中国乌镇围棋峰会上，它与排名世界第一的世界围棋冠军柯洁对战，以3比0的总比分获胜。围棋界公认阿尔法围棋的棋力已经超过人类职业围棋顶尖水平，在GoRatings网站公布的世界职业围棋排名中，其等级分曾超过排名人类第一的棋手柯洁。</p>\n<p><img src=\"./强化学习的里程碑/KeJieBattleWithAlphaGo.jpeg\" alt=\"\"></p>\n<p>2017年5月27日，在柯洁与阿尔法围棋的人机大战之后，阿尔法围棋团队宣布阿尔法围棋将不再参加围棋比赛。</p>\n<p>2017年10月18日，DeepMind团队公布了最强版阿尔法围棋，代号AlphaGo Zero。</p>\n</blockquote>\n</blockquote>\n<p>2016年3月机器学习一个重要的时间就是：名为AlphaGo的计算机程序打败了围棋世界冠军李世石，比分4：1。按理来说我们对机器在某项比赛、某些运动中击败人类顶尖选手不会感到大惊小怪，最著名的就是97年IBM的“深蓝（Deep Blue）”计算机程序打败了世界象棋冠军Garry Kasparov。</p>\n<p><img src=\"./强化学习的里程碑/GKBattleWithDeepBlue.jpeg\" alt=\"\"></p>\n<p>机器同样是使用强大的算力以数倍、数十倍、数百倍的训练时间去击败人类（通常人类训练十年的时间，机器可以模拟训练几百年），为什么Alpha Go的取胜这么重要、这么引人关注（世界各地媒体疯狂报道，一股狂潮如炒作一般）呢？</p>\n<p>原因有两个：</p>\n<ol>\n<li>AlphaGo解决的围棋问题比之前的都要复杂，西洋双陆棋只有$10^{20}$种不同的“棋位”空间配置，深蓝打败人类的国际象棋有$10^{43}$种不同的“棋位”空间配置，而围棋却有$10^{170}$种不同的“棋位”空间配置，这种量级的数字人类已经无法处理（意思是对于这么多种不同的状态，就是目前算力最强的计算机也无能为力）。举个例子，$10^{170}$这个数字比宇宙中存在的原子数还多。为什么AlphaGo可以在围棋上击败人类就如此重要呢？因为机器如果可以解决这个大的状态空间的问题，那么在机器学习也应该能解决很复杂的现实世界中的问题。这意味着机器真正融入我们的劳动力市场，为我们的日常生活提供便利的日子已经不远啦（真的吗？）！</li>\n<li>AlphaGo解决的围棋问题不可能通过纯粹的、暴力计算的方式来学习出很好的模型，这就需要为AlphaGo设计一个更加“智能、聪明”的算法。AlphaGo引起热潮的另一个原因就是，其训练算法是一个通用算法，而不是一个专门为解决某项任务特别设计的算法，这与97年IBM的深蓝计算机程序完全不同，因为深蓝只能用于学习下国际象棋，在中国象棋中就不适于训练。此前，AlphaGo的前身已经能够在Atari 49个不同规则、不同游戏模式中使用相同的通用训练算法训练出比人类还厉害的模型，AlphaGo的成功意味着不仅在虚拟环境可以使用这一套学习方法训练模型，而且可以在不同的现实世界问题中使用这一套学习方法、代码结构。</li>\n</ol>\n<p><strong>有能力解决状态空间非常大的问题</strong>和<strong>通用学习算法</strong>是使AlphaGo警报一时的两个主要原因，这也解释了为什么这场比赛在媒体上引起了轰动。有些人认为李世石的失败是机器占据人类劳动力市场的先兆，也有些人认为这预示着人工智能迎来了黄金时代，实际上我们距离真正的人工智能还有很长的路要走，就算机器可以在某项非常复杂的任务中超过人类的表现能力，其也没有真正的思维方式，不会进行思考，说到底也只是曲线的拟合罢了，但是，只有基础做好了，才能向上研究人工智能。</p>\n<p>构建AlphaGo和其前身（应用于Atari游戏）的学习算法的设计思路、计算架构在一系列论文和视频中都可以获得，而没有被Google（收购了英国公司DeepMind）私藏。为什么他不私藏呢？这么厉害的代码、设计思路没必要公开出来嘛，因为Google想把自己打造为基于云的机器学习和大数据的领导者，而它在2016年是全球第三大云服务提供商，排在微软和亚马逊之后，它需要把客户从其他平台引流到自己的平台上。由此可见，大公司们之间的竞争反而可以使我们平民获益。</p>\n<blockquote>\n<p><a href=\"https://randomant.net/the-algorithm-behind-the-curtain/\" rel=\"external nofollow\" target=\"_blank\">The Algorithm Behind the Curtain: How DeepMind Built a Machine that Beat a Go Master (1 of 5)</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"强化学习的里程碑\"><a href=\"#强化学习的里程碑\" class=\"headerlink\" title=\"强化学习的里程碑\"></a>强化学习的里程碑</h1>","more":"<h2 id=\"Alpha-Go\"><a href=\"#Alpha-Go\" class=\"headerlink\" title=\"Alpha Go\"></a>Alpha Go</h2><blockquote>\n<p>阿尔法围棋（AlphaGo）是第一个击败人类职业围棋选手、第一个战胜围棋世界冠军的人工智能机器人，由谷歌（Google）旗下<strong>DeepMind</strong>公司戴密斯·哈萨比斯领衔的团队开发。其主要工作原理是“深度学习”。</p>\n<blockquote>\n<p>2016年3月，阿尔法围棋与围棋世界冠军、职业九段棋手李世石进行围棋人机大战，以4比1的总比分获胜；</p>\n<p><img src=\"./强化学习的里程碑/LeeSedolBattleWithAlphaGo.jpeg\" alt=\"\"></p>\n<p>2016年末2017年初，该程序在中国棋类网站上以“大师”（Master）为注册账号与中日韩数十位围棋高手进行快棋对决，连续60局无一败绩；</p>\n<p>2017年5月，在中国乌镇围棋峰会上，它与排名世界第一的世界围棋冠军柯洁对战，以3比0的总比分获胜。围棋界公认阿尔法围棋的棋力已经超过人类职业围棋顶尖水平，在GoRatings网站公布的世界职业围棋排名中，其等级分曾超过排名人类第一的棋手柯洁。</p>\n<p><img src=\"./强化学习的里程碑/KeJieBattleWithAlphaGo.jpeg\" alt=\"\"></p>\n<p>2017年5月27日，在柯洁与阿尔法围棋的人机大战之后，阿尔法围棋团队宣布阿尔法围棋将不再参加围棋比赛。</p>\n<p>2017年10月18日，DeepMind团队公布了最强版阿尔法围棋，代号AlphaGo Zero。</p>\n</blockquote>\n</blockquote>\n<p>2016年3月机器学习一个重要的时间就是：名为AlphaGo的计算机程序打败了围棋世界冠军李世石，比分4：1。按理来说我们对机器在某项比赛、某些运动中击败人类顶尖选手不会感到大惊小怪，最著名的就是97年IBM的“深蓝（Deep Blue）”计算机程序打败了世界象棋冠军Garry Kasparov。</p>\n<p><img src=\"./强化学习的里程碑/GKBattleWithDeepBlue.jpeg\" alt=\"\"></p>\n<p>机器同样是使用强大的算力以数倍、数十倍、数百倍的训练时间去击败人类（通常人类训练十年的时间，机器可以模拟训练几百年），为什么Alpha Go的取胜这么重要、这么引人关注（世界各地媒体疯狂报道，一股狂潮如炒作一般）呢？</p>\n<p>原因有两个：</p>\n<ol>\n<li>AlphaGo解决的围棋问题比之前的都要复杂，西洋双陆棋只有$10^{20}$种不同的“棋位”空间配置，深蓝打败人类的国际象棋有$10^{43}$种不同的“棋位”空间配置，而围棋却有$10^{170}$种不同的“棋位”空间配置，这种量级的数字人类已经无法处理（意思是对于这么多种不同的状态，就是目前算力最强的计算机也无能为力）。举个例子，$10^{170}$这个数字比宇宙中存在的原子数还多。为什么AlphaGo可以在围棋上击败人类就如此重要呢？因为机器如果可以解决这个大的状态空间的问题，那么在机器学习也应该能解决很复杂的现实世界中的问题。这意味着机器真正融入我们的劳动力市场，为我们的日常生活提供便利的日子已经不远啦（真的吗？）！</li>\n<li>AlphaGo解决的围棋问题不可能通过纯粹的、暴力计算的方式来学习出很好的模型，这就需要为AlphaGo设计一个更加“智能、聪明”的算法。AlphaGo引起热潮的另一个原因就是，其训练算法是一个通用算法，而不是一个专门为解决某项任务特别设计的算法，这与97年IBM的深蓝计算机程序完全不同，因为深蓝只能用于学习下国际象棋，在中国象棋中就不适于训练。此前，AlphaGo的前身已经能够在Atari 49个不同规则、不同游戏模式中使用相同的通用训练算法训练出比人类还厉害的模型，AlphaGo的成功意味着不仅在虚拟环境可以使用这一套学习方法训练模型，而且可以在不同的现实世界问题中使用这一套学习方法、代码结构。</li>\n</ol>\n<p><strong>有能力解决状态空间非常大的问题</strong>和<strong>通用学习算法</strong>是使AlphaGo警报一时的两个主要原因，这也解释了为什么这场比赛在媒体上引起了轰动。有些人认为李世石的失败是机器占据人类劳动力市场的先兆，也有些人认为这预示着人工智能迎来了黄金时代，实际上我们距离真正的人工智能还有很长的路要走，就算机器可以在某项非常复杂的任务中超过人类的表现能力，其也没有真正的思维方式，不会进行思考，说到底也只是曲线的拟合罢了，但是，只有基础做好了，才能向上研究人工智能。</p>\n<p>构建AlphaGo和其前身（应用于Atari游戏）的学习算法的设计思路、计算架构在一系列论文和视频中都可以获得，而没有被Google（收购了英国公司DeepMind）私藏。为什么他不私藏呢？这么厉害的代码、设计思路没必要公开出来嘛，因为Google想把自己打造为基于云的机器学习和大数据的领导者，而它在2016年是全球第三大云服务提供商，排在微软和亚马逊之后，它需要把客户从其他平台引流到自己的平台上。由此可见，大公司们之间的竞争反而可以使我们平民获益。</p>\n<blockquote>\n<p><a href=\"https://randomant.net/the-algorithm-behind-the-curtain/\" rel=\"external nofollow\" target=\"_blank\">The Algorithm Behind the Curtain: How DeepMind Built a Machine that Beat a Go Master (1 of 5)</a></p>\n</blockquote>"},{"title":"Evolution Strategies as a Scalable Alternative to Reinforcement Learning","copyright":true,"mathjax":true,"top":1,"date":"2019-05-21T04:38:54.000Z","keywords":null,"description":null,"_content":"\n这一篇论文讲了强化学习算法的替代可解方案：进化策略。主要思想是对参数空间添加噪音而不是动作空间。\n\n不推荐这篇论文：\n\n- 公式没有详细推理，非常难懂\n- 文中进化策略其实跟强化学习并没有特别大的关系\n- 很多关于进化策略的性质、优势非常难懂，基本上都是文字解释，没有举例\n- 文中措辞不难，但想要理解其本质非常难\n\n<!--more-->\n\n# 简介\n\n进化策略ES是一组/一类算法，而不是一个算法，它属于黑盒优化方法，它由自然进化中的启发式搜索过程而得来：每一代中都有突变的基因，环境对基因突变的效果给出适应性的判断，重组好的突变基因产生下一代，直到最优。\n\n进化策略算法的划分主要有三个依据：基因如何表示（神经网络参数）、突变如何产生（参数优化过程）、基因如何重组（参数重组）。\n\n进化策略ES这种方法通常分为[直接策略搜索](https://pdfs.semanticscholar.org/dd17/8d3f30d801922c98cec9c2d90db05395f244.pdf?_ga=2.257341323.183297583.1558416128-1251761365.1555224483)和[神经进化](https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7307180&tag=1)，黑盒优化方法有很多很好的特性：\n\n1. 不关心奖励分布，奖励密集或稀疏都无所谓\n2. 不需要反向传播梯度\n3. tolerance of potentially arbitrarily long time horizons. 翻译为可以适应长期视野/回报，在长动作序列上有优势\n\n但是，进化策略ES往往不能解决像Q-Learning和PG这样可应用的难的强化学习问题，这篇论文旨在使进化策略可以解决DRL算法可解决的更难的问题。\n\n# 正文精要\n\n> A large source of difficulty in RL stems from the lack of informative gradients of policy performance: such gradients may not exist due to non-smoothness of the environment or policy, or may only be available as high-variance estimates because the environment usually can only be accessed via sampling.  \n\n指出强化学习的难题在于缺乏策略性能的有效梯度：梯度可能由于环境不光滑而不存在、可能由于只能采样环境而存在高方差。\n\n> For MDP-based reinforcement learning algorithms, on the other hand, it is well known that frameskip is a crucial parameter to get right for the optimization to succeed.\n\n对于基于MDP的强化学习算法，**跳帧**是算法优化的关键参数。\n\n> It is common practice in RL to have the agent decide on its actions in a lower frequency than is used in the simulator that runs the environment.\n\nRL通常使智能体在模拟环境中决策频率高于在实际环境中。\n\n---\n\n文中设定一个策略的期望奖励为：\n$$\n\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)\n$$\n关于网络参数$\\theta$的导数为：\n$$\n\\nabla_{\\theta}\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)=\\frac{1}{\\sigma}\\mathbb{E}_{\\epsilon \\sim N(0,I)} \\{F(\\theta+\\sigma\\epsilon)\\epsilon \\}\n$$\n其中，$\\theta$为网络参数，也可以认为是多变量高斯分布的均值，$\\sigma$为固定方差，$\\epsilon$为扰动向量，由各向同性、方差均为1的多变量高斯分布采样得到。**文中没有对该导数推导过程有介绍，好像是使用了Reinforce Trick的方法，但是却不知道具体如何推导出这个形式**。\n\n文中提到的算法1是对一个策略进行多次扰动，每扰动一次就与环境交互得到一个episode，最后只用各个扰动向量$\\epsilon_{i}$与对应的回报$F(\\theta)$相乘，根据该期望进行参数更新。\n\n![](./Evolution-Strategies-2017/algorithm1.png)\n\n算法2是对算法1的并行化处理，设置相同的随机种子，假设n个worker：\n\n1. 各个worker共用一个策略$\\pi$\n2. 每个worker根据高斯分布采样得到扰动向量$\\epsilon$\n3. 各个worker根据扰动后的策略参数采样一个episode\n4. 互相分发各自的回报\n5. **再采样n个扰动向量$\\epsilon$**，使用梯度上升更新参数，然后分发策略\n\n![](./Evolution-Strategies-2017/algorithm2.png)\n\n文中后边提到，其实不必每次都从高斯分布中采样出扰动向量$\\epsilon$，可以在开始训练前直接采样得到m个扰动向量，每次需要扰动向量时直接根据m的值生成一个随机数，取出以该随机数为下标的扰动向量即可。这么做可以减少更新时的时长消耗。\n\n---\n\n> Experiments on Atari and MuJoCo show that it is a viable option with some attractive features: it is invariant to action frequency and delayed rewards, and it does not need temporal discounting or value function approximation. Most importantly, ES is highly parallelizable, which allows us to make up for a decreased data efficiency by scaling to more parallel workers. \n\n文中使用的进化策略ES的优点：\n\n- 与决策间隔无关，也就是对于跳帧间隔的设置鲁棒性很高\n- 不关心延迟奖励\n- 不需要折扣计算回报\n- 不需要值函数近似\n- 可以高度并行化使，我们能够通过扩展到更多并行训练节点来弥补数据效率的下降。\n\n# 实验发现\n\n1. 使用[Virtual Batch Normalization](https://arxiv.org/pdf/1606.03498.pdf)和神经网络策略重参数（文中没有提到重参数的内容，只提到网络参数的影响）可以极大提升进化策略ES的可靠性。实验中，不使用这两种方法算法很“脆弱”，也就是不稳定。\n2. 进化策略ES可以高度并行化。通过引入一个基于通用随机数的新颖通讯策略，即是是1000个子节点也可以达到运行时间的线性加速。\n3. 进化策略ES的数据效率出奇的好。尽管相比A3C算法需要3-10倍的数据量，但是由于具有不需反向传播、没有值函数等特点，这些轻微的数据效率劣势可以被弥补。实验表明，相同计算量下，1小时ES与1天A3C的效果基本相同。\n4. 进化策略ES相比PG类算法的探索性更强。\n5. 进化策略ES的鲁棒性很好。多种不同训练环境可以使用同一组超参数。\n\n# 实验结果\n\n## MuJoCo\n\n与**高度优化**的TRPO算法相比，ES在离散动作更有优势，因为连续动作在参数扰动方面可能过于平滑并且可能妨碍探索。\n\nES和TRPO的网络结构都是：输入层→64，tanh→64，tanh→输出层。\n\n复杂环境如Hopper和Walker2d中，ES样本复杂性相比TRPO高不到10倍；简单场景中，相比低3倍。\n\nTRPO训练500W步，ES训练至TRPO训练过程中各阶段效果所需步长的比例如表所示：\n\n![](./Evolution-Strategies-2017/mujoco.png)\n\n虽然文中说是简单场景低三倍，其实根本就没有明确的低三倍，而且我对文中所提的简单场景复杂场景的划分也持怀疑态度。\n\n## Atari\n\n预处理、网络架构与Atari那篇论文的一模一样，用A3C使用3.2亿帧训练1天的结果与使用ES训练10亿帧的结果相同（保持计算量相同，因为ES不需要反向传播和值函数评估）。使用720块cpu，训练一个游戏只需1小时。\n\n最终，纯图像输入下，与A3C相比，23个游戏ES胜，28个游戏A3C胜。\n\n![](./Evolution-Strategies-2017/atari.png)\n\n## 并行化 Parallelization\n\nES特别适合并行化，因为其通讯低带宽特性（只需各个worker的回报和随机种子）。\n\n测试环境：3D Humanoid walking task\n\n结果：单机18核需11小时，与最先进的强化学习算法性能相当，80台机器1440个CPU核心只需10分钟。\n\n![](./Evolution-Strategies-2017/parallelization.png)\n\n随着核心数增加，训练性能线性加速。\n\n## “跳帧”测试\n\n将强化学习在模拟环境中训练出的模型用于实际环境中式，通常需要降低其决策频率，也就是加大决策间隔。\n\n如果跳帧设置过大，智能体所做的动作往往不够好，如果跳帧设置过小，会导致每个episode的步数过长，加大计算量，恶化训练过程（其实文中这么说并不严谨）。\n\nES的一个优势是梯度计算与回合长度无关，这间接增加了对跳帧间隔的鲁棒性。在Atari游戏Pong中使用四个不同跳帧间隔{1，2，3，4}的学习曲线如下：\n\n![](./Evolution-Strategies-2017/frame-skip.png)\n\n由曲线可以看出，不同的跳帧间隔，训练效果差不多。**但，我对该鲁棒性测试在复杂环境中的效果表示怀疑。我觉得前沿强化学习算法在该训练场景中使用不同的跳帧间隔也可以得到相同结果。**","source":"_posts/Evolution-Strategies-2017.md","raw":"---\ntitle: Evolution Strategies as a Scalable Alternative to Reinforcement Learning\ncopyright: true\nmathjax: true\ntop: 1\ndate: 2019-05-21 12:38:54\ncategories: ReinforcementLearning\ntags:\n- rl\nkeywords:\ndescription:\n---\n\n这一篇论文讲了强化学习算法的替代可解方案：进化策略。主要思想是对参数空间添加噪音而不是动作空间。\n\n不推荐这篇论文：\n\n- 公式没有详细推理，非常难懂\n- 文中进化策略其实跟强化学习并没有特别大的关系\n- 很多关于进化策略的性质、优势非常难懂，基本上都是文字解释，没有举例\n- 文中措辞不难，但想要理解其本质非常难\n\n<!--more-->\n\n# 简介\n\n进化策略ES是一组/一类算法，而不是一个算法，它属于黑盒优化方法，它由自然进化中的启发式搜索过程而得来：每一代中都有突变的基因，环境对基因突变的效果给出适应性的判断，重组好的突变基因产生下一代，直到最优。\n\n进化策略算法的划分主要有三个依据：基因如何表示（神经网络参数）、突变如何产生（参数优化过程）、基因如何重组（参数重组）。\n\n进化策略ES这种方法通常分为[直接策略搜索](https://pdfs.semanticscholar.org/dd17/8d3f30d801922c98cec9c2d90db05395f244.pdf?_ga=2.257341323.183297583.1558416128-1251761365.1555224483)和[神经进化](https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7307180&tag=1)，黑盒优化方法有很多很好的特性：\n\n1. 不关心奖励分布，奖励密集或稀疏都无所谓\n2. 不需要反向传播梯度\n3. tolerance of potentially arbitrarily long time horizons. 翻译为可以适应长期视野/回报，在长动作序列上有优势\n\n但是，进化策略ES往往不能解决像Q-Learning和PG这样可应用的难的强化学习问题，这篇论文旨在使进化策略可以解决DRL算法可解决的更难的问题。\n\n# 正文精要\n\n> A large source of difficulty in RL stems from the lack of informative gradients of policy performance: such gradients may not exist due to non-smoothness of the environment or policy, or may only be available as high-variance estimates because the environment usually can only be accessed via sampling.  \n\n指出强化学习的难题在于缺乏策略性能的有效梯度：梯度可能由于环境不光滑而不存在、可能由于只能采样环境而存在高方差。\n\n> For MDP-based reinforcement learning algorithms, on the other hand, it is well known that frameskip is a crucial parameter to get right for the optimization to succeed.\n\n对于基于MDP的强化学习算法，**跳帧**是算法优化的关键参数。\n\n> It is common practice in RL to have the agent decide on its actions in a lower frequency than is used in the simulator that runs the environment.\n\nRL通常使智能体在模拟环境中决策频率高于在实际环境中。\n\n---\n\n文中设定一个策略的期望奖励为：\n$$\n\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)\n$$\n关于网络参数$\\theta$的导数为：\n$$\n\\nabla_{\\theta}\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)=\\frac{1}{\\sigma}\\mathbb{E}_{\\epsilon \\sim N(0,I)} \\{F(\\theta+\\sigma\\epsilon)\\epsilon \\}\n$$\n其中，$\\theta$为网络参数，也可以认为是多变量高斯分布的均值，$\\sigma$为固定方差，$\\epsilon$为扰动向量，由各向同性、方差均为1的多变量高斯分布采样得到。**文中没有对该导数推导过程有介绍，好像是使用了Reinforce Trick的方法，但是却不知道具体如何推导出这个形式**。\n\n文中提到的算法1是对一个策略进行多次扰动，每扰动一次就与环境交互得到一个episode，最后只用各个扰动向量$\\epsilon_{i}$与对应的回报$F(\\theta)$相乘，根据该期望进行参数更新。\n\n![](./Evolution-Strategies-2017/algorithm1.png)\n\n算法2是对算法1的并行化处理，设置相同的随机种子，假设n个worker：\n\n1. 各个worker共用一个策略$\\pi$\n2. 每个worker根据高斯分布采样得到扰动向量$\\epsilon$\n3. 各个worker根据扰动后的策略参数采样一个episode\n4. 互相分发各自的回报\n5. **再采样n个扰动向量$\\epsilon$**，使用梯度上升更新参数，然后分发策略\n\n![](./Evolution-Strategies-2017/algorithm2.png)\n\n文中后边提到，其实不必每次都从高斯分布中采样出扰动向量$\\epsilon$，可以在开始训练前直接采样得到m个扰动向量，每次需要扰动向量时直接根据m的值生成一个随机数，取出以该随机数为下标的扰动向量即可。这么做可以减少更新时的时长消耗。\n\n---\n\n> Experiments on Atari and MuJoCo show that it is a viable option with some attractive features: it is invariant to action frequency and delayed rewards, and it does not need temporal discounting or value function approximation. Most importantly, ES is highly parallelizable, which allows us to make up for a decreased data efficiency by scaling to more parallel workers. \n\n文中使用的进化策略ES的优点：\n\n- 与决策间隔无关，也就是对于跳帧间隔的设置鲁棒性很高\n- 不关心延迟奖励\n- 不需要折扣计算回报\n- 不需要值函数近似\n- 可以高度并行化使，我们能够通过扩展到更多并行训练节点来弥补数据效率的下降。\n\n# 实验发现\n\n1. 使用[Virtual Batch Normalization](https://arxiv.org/pdf/1606.03498.pdf)和神经网络策略重参数（文中没有提到重参数的内容，只提到网络参数的影响）可以极大提升进化策略ES的可靠性。实验中，不使用这两种方法算法很“脆弱”，也就是不稳定。\n2. 进化策略ES可以高度并行化。通过引入一个基于通用随机数的新颖通讯策略，即是是1000个子节点也可以达到运行时间的线性加速。\n3. 进化策略ES的数据效率出奇的好。尽管相比A3C算法需要3-10倍的数据量，但是由于具有不需反向传播、没有值函数等特点，这些轻微的数据效率劣势可以被弥补。实验表明，相同计算量下，1小时ES与1天A3C的效果基本相同。\n4. 进化策略ES相比PG类算法的探索性更强。\n5. 进化策略ES的鲁棒性很好。多种不同训练环境可以使用同一组超参数。\n\n# 实验结果\n\n## MuJoCo\n\n与**高度优化**的TRPO算法相比，ES在离散动作更有优势，因为连续动作在参数扰动方面可能过于平滑并且可能妨碍探索。\n\nES和TRPO的网络结构都是：输入层→64，tanh→64，tanh→输出层。\n\n复杂环境如Hopper和Walker2d中，ES样本复杂性相比TRPO高不到10倍；简单场景中，相比低3倍。\n\nTRPO训练500W步，ES训练至TRPO训练过程中各阶段效果所需步长的比例如表所示：\n\n![](./Evolution-Strategies-2017/mujoco.png)\n\n虽然文中说是简单场景低三倍，其实根本就没有明确的低三倍，而且我对文中所提的简单场景复杂场景的划分也持怀疑态度。\n\n## Atari\n\n预处理、网络架构与Atari那篇论文的一模一样，用A3C使用3.2亿帧训练1天的结果与使用ES训练10亿帧的结果相同（保持计算量相同，因为ES不需要反向传播和值函数评估）。使用720块cpu，训练一个游戏只需1小时。\n\n最终，纯图像输入下，与A3C相比，23个游戏ES胜，28个游戏A3C胜。\n\n![](./Evolution-Strategies-2017/atari.png)\n\n## 并行化 Parallelization\n\nES特别适合并行化，因为其通讯低带宽特性（只需各个worker的回报和随机种子）。\n\n测试环境：3D Humanoid walking task\n\n结果：单机18核需11小时，与最先进的强化学习算法性能相当，80台机器1440个CPU核心只需10分钟。\n\n![](./Evolution-Strategies-2017/parallelization.png)\n\n随着核心数增加，训练性能线性加速。\n\n## “跳帧”测试\n\n将强化学习在模拟环境中训练出的模型用于实际环境中式，通常需要降低其决策频率，也就是加大决策间隔。\n\n如果跳帧设置过大，智能体所做的动作往往不够好，如果跳帧设置过小，会导致每个episode的步数过长，加大计算量，恶化训练过程（其实文中这么说并不严谨）。\n\nES的一个优势是梯度计算与回合长度无关，这间接增加了对跳帧间隔的鲁棒性。在Atari游戏Pong中使用四个不同跳帧间隔{1，2，3，4}的学习曲线如下：\n\n![](./Evolution-Strategies-2017/frame-skip.png)\n\n由曲线可以看出，不同的跳帧间隔，训练效果差不多。**但，我对该鲁棒性测试在复杂环境中的效果表示怀疑。我觉得前沿强化学习算法在该训练场景中使用不同的跳帧间隔也可以得到相同结果。**","slug":"Evolution-Strategies-2017","published":1,"updated":"2019-05-21T13:04:30.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaabb0026m8vei2w5qjt2","content":"<p>这一篇论文讲了强化学习算法的替代可解方案：进化策略。主要思想是对参数空间添加噪音而不是动作空间。</p>\n<p>不推荐这篇论文：</p>\n<ul>\n<li>公式没有详细推理，非常难懂</li>\n<li>文中进化策略其实跟强化学习并没有特别大的关系</li>\n<li>很多关于进化策略的性质、优势非常难懂，基本上都是文字解释，没有举例</li>\n<li>文中措辞不难，但想要理解其本质非常难</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>进化策略ES是一组/一类算法，而不是一个算法，它属于黑盒优化方法，它由自然进化中的启发式搜索过程而得来：每一代中都有突变的基因，环境对基因突变的效果给出适应性的判断，重组好的突变基因产生下一代，直到最优。</p>\n<p>进化策略算法的划分主要有三个依据：基因如何表示（神经网络参数）、突变如何产生（参数优化过程）、基因如何重组（参数重组）。</p>\n<p>进化策略ES这种方法通常分为<a href=\"https://pdfs.semanticscholar.org/dd17/8d3f30d801922c98cec9c2d90db05395f244.pdf?_ga=2.257341323.183297583.1558416128-1251761365.1555224483\" rel=\"external nofollow\" target=\"_blank\">直接策略搜索</a>和<a href=\"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=7307180&amp;tag=1\" rel=\"external nofollow\" target=\"_blank\">神经进化</a>，黑盒优化方法有很多很好的特性：</p>\n<ol>\n<li>不关心奖励分布，奖励密集或稀疏都无所谓</li>\n<li>不需要反向传播梯度</li>\n<li>tolerance of potentially arbitrarily long time horizons. 翻译为可以适应长期视野/回报，在长动作序列上有优势</li>\n</ol>\n<p>但是，进化策略ES往往不能解决像Q-Learning和PG这样可应用的难的强化学习问题，这篇论文旨在使进化策略可以解决DRL算法可解决的更难的问题。</p>\n<h1 id=\"正文精要\"><a href=\"#正文精要\" class=\"headerlink\" title=\"正文精要\"></a>正文精要</h1><blockquote>\n<p>A large source of difficulty in RL stems from the lack of informative gradients of policy performance: such gradients may not exist due to non-smoothness of the environment or policy, or may only be available as high-variance estimates because the environment usually can only be accessed via sampling.  </p>\n</blockquote>\n<p>指出强化学习的难题在于缺乏策略性能的有效梯度：梯度可能由于环境不光滑而不存在、可能由于只能采样环境而存在高方差。</p>\n<blockquote>\n<p>For MDP-based reinforcement learning algorithms, on the other hand, it is well known that frameskip is a crucial parameter to get right for the optimization to succeed.</p>\n</blockquote>\n<p>对于基于MDP的强化学习算法，<strong>跳帧</strong>是算法优化的关键参数。</p>\n<blockquote>\n<p>It is common practice in RL to have the agent decide on its actions in a lower frequency than is used in the simulator that runs the environment.</p>\n</blockquote>\n<p>RL通常使智能体在模拟环境中决策频率高于在实际环境中。</p>\n<hr>\n<p>文中设定一个策略的期望奖励为：</p>\n<script type=\"math/tex; mode=display\">\n\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)</script><p>关于网络参数$\\theta$的导数为：</p>\n<script type=\"math/tex; mode=display\">\n\\nabla_{\\theta}\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)=\\frac{1}{\\sigma}\\mathbb{E}_{\\epsilon \\sim N(0,I)} \\{F(\\theta+\\sigma\\epsilon)\\epsilon \\}</script><p>其中，$\\theta$为网络参数，也可以认为是多变量高斯分布的均值，$\\sigma$为固定方差，$\\epsilon$为扰动向量，由各向同性、方差均为1的多变量高斯分布采样得到。<strong>文中没有对该导数推导过程有介绍，好像是使用了Reinforce Trick的方法，但是却不知道具体如何推导出这个形式</strong>。</p>\n<p>文中提到的算法1是对一个策略进行多次扰动，每扰动一次就与环境交互得到一个episode，最后只用各个扰动向量$\\epsilon_{i}$与对应的回报$F(\\theta)$相乘，根据该期望进行参数更新。</p>\n<p><img src=\"./Evolution-Strategies-2017/algorithm1.png\" alt=\"\"></p>\n<p>算法2是对算法1的并行化处理，设置相同的随机种子，假设n个worker：</p>\n<ol>\n<li>各个worker共用一个策略$\\pi$</li>\n<li>每个worker根据高斯分布采样得到扰动向量$\\epsilon$</li>\n<li>各个worker根据扰动后的策略参数采样一个episode</li>\n<li>互相分发各自的回报</li>\n<li><strong>再采样n个扰动向量$\\epsilon$</strong>，使用梯度上升更新参数，然后分发策略</li>\n</ol>\n<p><img src=\"./Evolution-Strategies-2017/algorithm2.png\" alt=\"\"></p>\n<p>文中后边提到，其实不必每次都从高斯分布中采样出扰动向量$\\epsilon$，可以在开始训练前直接采样得到m个扰动向量，每次需要扰动向量时直接根据m的值生成一个随机数，取出以该随机数为下标的扰动向量即可。这么做可以减少更新时的时长消耗。</p>\n<hr>\n<blockquote>\n<p>Experiments on Atari and MuJoCo show that it is a viable option with some attractive features: it is invariant to action frequency and delayed rewards, and it does not need temporal discounting or value function approximation. Most importantly, ES is highly parallelizable, which allows us to make up for a decreased data efficiency by scaling to more parallel workers. </p>\n</blockquote>\n<p>文中使用的进化策略ES的优点：</p>\n<ul>\n<li>与决策间隔无关，也就是对于跳帧间隔的设置鲁棒性很高</li>\n<li>不关心延迟奖励</li>\n<li>不需要折扣计算回报</li>\n<li>不需要值函数近似</li>\n<li>可以高度并行化使，我们能够通过扩展到更多并行训练节点来弥补数据效率的下降。</li>\n</ul>\n<h1 id=\"实验发现\"><a href=\"#实验发现\" class=\"headerlink\" title=\"实验发现\"></a>实验发现</h1><ol>\n<li>使用<a href=\"https://arxiv.org/pdf/1606.03498.pdf\" rel=\"external nofollow\" target=\"_blank\">Virtual Batch Normalization</a>和神经网络策略重参数（文中没有提到重参数的内容，只提到网络参数的影响）可以极大提升进化策略ES的可靠性。实验中，不使用这两种方法算法很“脆弱”，也就是不稳定。</li>\n<li>进化策略ES可以高度并行化。通过引入一个基于通用随机数的新颖通讯策略，即是是1000个子节点也可以达到运行时间的线性加速。</li>\n<li>进化策略ES的数据效率出奇的好。尽管相比A3C算法需要3-10倍的数据量，但是由于具有不需反向传播、没有值函数等特点，这些轻微的数据效率劣势可以被弥补。实验表明，相同计算量下，1小时ES与1天A3C的效果基本相同。</li>\n<li>进化策略ES相比PG类算法的探索性更强。</li>\n<li>进化策略ES的鲁棒性很好。多种不同训练环境可以使用同一组超参数。</li>\n</ol>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><h2 id=\"MuJoCo\"><a href=\"#MuJoCo\" class=\"headerlink\" title=\"MuJoCo\"></a>MuJoCo</h2><p>与<strong>高度优化</strong>的TRPO算法相比，ES在离散动作更有优势，因为连续动作在参数扰动方面可能过于平滑并且可能妨碍探索。</p>\n<p>ES和TRPO的网络结构都是：输入层→64，tanh→64，tanh→输出层。</p>\n<p>复杂环境如Hopper和Walker2d中，ES样本复杂性相比TRPO高不到10倍；简单场景中，相比低3倍。</p>\n<p>TRPO训练500W步，ES训练至TRPO训练过程中各阶段效果所需步长的比例如表所示：</p>\n<p><img src=\"./Evolution-Strategies-2017/mujoco.png\" alt=\"\"></p>\n<p>虽然文中说是简单场景低三倍，其实根本就没有明确的低三倍，而且我对文中所提的简单场景复杂场景的划分也持怀疑态度。</p>\n<h2 id=\"Atari\"><a href=\"#Atari\" class=\"headerlink\" title=\"Atari\"></a>Atari</h2><p>预处理、网络架构与Atari那篇论文的一模一样，用A3C使用3.2亿帧训练1天的结果与使用ES训练10亿帧的结果相同（保持计算量相同，因为ES不需要反向传播和值函数评估）。使用720块cpu，训练一个游戏只需1小时。</p>\n<p>最终，纯图像输入下，与A3C相比，23个游戏ES胜，28个游戏A3C胜。</p>\n<p><img src=\"./Evolution-Strategies-2017/atari.png\" alt=\"\"></p>\n<h2 id=\"并行化-Parallelization\"><a href=\"#并行化-Parallelization\" class=\"headerlink\" title=\"并行化 Parallelization\"></a>并行化 Parallelization</h2><p>ES特别适合并行化，因为其通讯低带宽特性（只需各个worker的回报和随机种子）。</p>\n<p>测试环境：3D Humanoid walking task</p>\n<p>结果：单机18核需11小时，与最先进的强化学习算法性能相当，80台机器1440个CPU核心只需10分钟。</p>\n<p><img src=\"./Evolution-Strategies-2017/parallelization.png\" alt=\"\"></p>\n<p>随着核心数增加，训练性能线性加速。</p>\n<h2 id=\"“跳帧”测试\"><a href=\"#“跳帧”测试\" class=\"headerlink\" title=\"“跳帧”测试\"></a>“跳帧”测试</h2><p>将强化学习在模拟环境中训练出的模型用于实际环境中式，通常需要降低其决策频率，也就是加大决策间隔。</p>\n<p>如果跳帧设置过大，智能体所做的动作往往不够好，如果跳帧设置过小，会导致每个episode的步数过长，加大计算量，恶化训练过程（其实文中这么说并不严谨）。</p>\n<p>ES的一个优势是梯度计算与回合长度无关，这间接增加了对跳帧间隔的鲁棒性。在Atari游戏Pong中使用四个不同跳帧间隔{1，2，3，4}的学习曲线如下：</p>\n<p><img src=\"./Evolution-Strategies-2017/frame-skip.png\" alt=\"\"></p>\n<p>由曲线可以看出，不同的跳帧间隔，训练效果差不多。<strong>但，我对该鲁棒性测试在复杂环境中的效果表示怀疑。我觉得前沿强化学习算法在该训练场景中使用不同的跳帧间隔也可以得到相同结果。</strong></p>\n","site":{"data":{}},"excerpt":"<p>这一篇论文讲了强化学习算法的替代可解方案：进化策略。主要思想是对参数空间添加噪音而不是动作空间。</p>\n<p>不推荐这篇论文：</p>\n<ul>\n<li>公式没有详细推理，非常难懂</li>\n<li>文中进化策略其实跟强化学习并没有特别大的关系</li>\n<li>很多关于进化策略的性质、优势非常难懂，基本上都是文字解释，没有举例</li>\n<li>文中措辞不难，但想要理解其本质非常难</li>\n</ul>","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>进化策略ES是一组/一类算法，而不是一个算法，它属于黑盒优化方法，它由自然进化中的启发式搜索过程而得来：每一代中都有突变的基因，环境对基因突变的效果给出适应性的判断，重组好的突变基因产生下一代，直到最优。</p>\n<p>进化策略算法的划分主要有三个依据：基因如何表示（神经网络参数）、突变如何产生（参数优化过程）、基因如何重组（参数重组）。</p>\n<p>进化策略ES这种方法通常分为<a href=\"https://pdfs.semanticscholar.org/dd17/8d3f30d801922c98cec9c2d90db05395f244.pdf?_ga=2.257341323.183297583.1558416128-1251761365.1555224483\" rel=\"external nofollow\" target=\"_blank\">直接策略搜索</a>和<a href=\"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=7307180&amp;tag=1\" rel=\"external nofollow\" target=\"_blank\">神经进化</a>，黑盒优化方法有很多很好的特性：</p>\n<ol>\n<li>不关心奖励分布，奖励密集或稀疏都无所谓</li>\n<li>不需要反向传播梯度</li>\n<li>tolerance of potentially arbitrarily long time horizons. 翻译为可以适应长期视野/回报，在长动作序列上有优势</li>\n</ol>\n<p>但是，进化策略ES往往不能解决像Q-Learning和PG这样可应用的难的强化学习问题，这篇论文旨在使进化策略可以解决DRL算法可解决的更难的问题。</p>\n<h1 id=\"正文精要\"><a href=\"#正文精要\" class=\"headerlink\" title=\"正文精要\"></a>正文精要</h1><blockquote>\n<p>A large source of difficulty in RL stems from the lack of informative gradients of policy performance: such gradients may not exist due to non-smoothness of the environment or policy, or may only be available as high-variance estimates because the environment usually can only be accessed via sampling.  </p>\n</blockquote>\n<p>指出强化学习的难题在于缺乏策略性能的有效梯度：梯度可能由于环境不光滑而不存在、可能由于只能采样环境而存在高方差。</p>\n<blockquote>\n<p>For MDP-based reinforcement learning algorithms, on the other hand, it is well known that frameskip is a crucial parameter to get right for the optimization to succeed.</p>\n</blockquote>\n<p>对于基于MDP的强化学习算法，<strong>跳帧</strong>是算法优化的关键参数。</p>\n<blockquote>\n<p>It is common practice in RL to have the agent decide on its actions in a lower frequency than is used in the simulator that runs the environment.</p>\n</blockquote>\n<p>RL通常使智能体在模拟环境中决策频率高于在实际环境中。</p>\n<hr>\n<p>文中设定一个策略的期望奖励为：</p>\n<script type=\"math/tex; mode=display\">\n\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)</script><p>关于网络参数$\\theta$的导数为：</p>\n<script type=\"math/tex; mode=display\">\n\\nabla_{\\theta}\\mathbb{E}_{\\epsilon \\sim N(0,I)}F(\\theta+\\sigma\\epsilon)=\\frac{1}{\\sigma}\\mathbb{E}_{\\epsilon \\sim N(0,I)} \\{F(\\theta+\\sigma\\epsilon)\\epsilon \\}</script><p>其中，$\\theta$为网络参数，也可以认为是多变量高斯分布的均值，$\\sigma$为固定方差，$\\epsilon$为扰动向量，由各向同性、方差均为1的多变量高斯分布采样得到。<strong>文中没有对该导数推导过程有介绍，好像是使用了Reinforce Trick的方法，但是却不知道具体如何推导出这个形式</strong>。</p>\n<p>文中提到的算法1是对一个策略进行多次扰动，每扰动一次就与环境交互得到一个episode，最后只用各个扰动向量$\\epsilon_{i}$与对应的回报$F(\\theta)$相乘，根据该期望进行参数更新。</p>\n<p><img src=\"./Evolution-Strategies-2017/algorithm1.png\" alt=\"\"></p>\n<p>算法2是对算法1的并行化处理，设置相同的随机种子，假设n个worker：</p>\n<ol>\n<li>各个worker共用一个策略$\\pi$</li>\n<li>每个worker根据高斯分布采样得到扰动向量$\\epsilon$</li>\n<li>各个worker根据扰动后的策略参数采样一个episode</li>\n<li>互相分发各自的回报</li>\n<li><strong>再采样n个扰动向量$\\epsilon$</strong>，使用梯度上升更新参数，然后分发策略</li>\n</ol>\n<p><img src=\"./Evolution-Strategies-2017/algorithm2.png\" alt=\"\"></p>\n<p>文中后边提到，其实不必每次都从高斯分布中采样出扰动向量$\\epsilon$，可以在开始训练前直接采样得到m个扰动向量，每次需要扰动向量时直接根据m的值生成一个随机数，取出以该随机数为下标的扰动向量即可。这么做可以减少更新时的时长消耗。</p>\n<hr>\n<blockquote>\n<p>Experiments on Atari and MuJoCo show that it is a viable option with some attractive features: it is invariant to action frequency and delayed rewards, and it does not need temporal discounting or value function approximation. Most importantly, ES is highly parallelizable, which allows us to make up for a decreased data efficiency by scaling to more parallel workers. </p>\n</blockquote>\n<p>文中使用的进化策略ES的优点：</p>\n<ul>\n<li>与决策间隔无关，也就是对于跳帧间隔的设置鲁棒性很高</li>\n<li>不关心延迟奖励</li>\n<li>不需要折扣计算回报</li>\n<li>不需要值函数近似</li>\n<li>可以高度并行化使，我们能够通过扩展到更多并行训练节点来弥补数据效率的下降。</li>\n</ul>\n<h1 id=\"实验发现\"><a href=\"#实验发现\" class=\"headerlink\" title=\"实验发现\"></a>实验发现</h1><ol>\n<li>使用<a href=\"https://arxiv.org/pdf/1606.03498.pdf\" rel=\"external nofollow\" target=\"_blank\">Virtual Batch Normalization</a>和神经网络策略重参数（文中没有提到重参数的内容，只提到网络参数的影响）可以极大提升进化策略ES的可靠性。实验中，不使用这两种方法算法很“脆弱”，也就是不稳定。</li>\n<li>进化策略ES可以高度并行化。通过引入一个基于通用随机数的新颖通讯策略，即是是1000个子节点也可以达到运行时间的线性加速。</li>\n<li>进化策略ES的数据效率出奇的好。尽管相比A3C算法需要3-10倍的数据量，但是由于具有不需反向传播、没有值函数等特点，这些轻微的数据效率劣势可以被弥补。实验表明，相同计算量下，1小时ES与1天A3C的效果基本相同。</li>\n<li>进化策略ES相比PG类算法的探索性更强。</li>\n<li>进化策略ES的鲁棒性很好。多种不同训练环境可以使用同一组超参数。</li>\n</ol>\n<h1 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h1><h2 id=\"MuJoCo\"><a href=\"#MuJoCo\" class=\"headerlink\" title=\"MuJoCo\"></a>MuJoCo</h2><p>与<strong>高度优化</strong>的TRPO算法相比，ES在离散动作更有优势，因为连续动作在参数扰动方面可能过于平滑并且可能妨碍探索。</p>\n<p>ES和TRPO的网络结构都是：输入层→64，tanh→64，tanh→输出层。</p>\n<p>复杂环境如Hopper和Walker2d中，ES样本复杂性相比TRPO高不到10倍；简单场景中，相比低3倍。</p>\n<p>TRPO训练500W步，ES训练至TRPO训练过程中各阶段效果所需步长的比例如表所示：</p>\n<p><img src=\"./Evolution-Strategies-2017/mujoco.png\" alt=\"\"></p>\n<p>虽然文中说是简单场景低三倍，其实根本就没有明确的低三倍，而且我对文中所提的简单场景复杂场景的划分也持怀疑态度。</p>\n<h2 id=\"Atari\"><a href=\"#Atari\" class=\"headerlink\" title=\"Atari\"></a>Atari</h2><p>预处理、网络架构与Atari那篇论文的一模一样，用A3C使用3.2亿帧训练1天的结果与使用ES训练10亿帧的结果相同（保持计算量相同，因为ES不需要反向传播和值函数评估）。使用720块cpu，训练一个游戏只需1小时。</p>\n<p>最终，纯图像输入下，与A3C相比，23个游戏ES胜，28个游戏A3C胜。</p>\n<p><img src=\"./Evolution-Strategies-2017/atari.png\" alt=\"\"></p>\n<h2 id=\"并行化-Parallelization\"><a href=\"#并行化-Parallelization\" class=\"headerlink\" title=\"并行化 Parallelization\"></a>并行化 Parallelization</h2><p>ES特别适合并行化，因为其通讯低带宽特性（只需各个worker的回报和随机种子）。</p>\n<p>测试环境：3D Humanoid walking task</p>\n<p>结果：单机18核需11小时，与最先进的强化学习算法性能相当，80台机器1440个CPU核心只需10分钟。</p>\n<p><img src=\"./Evolution-Strategies-2017/parallelization.png\" alt=\"\"></p>\n<p>随着核心数增加，训练性能线性加速。</p>\n<h2 id=\"“跳帧”测试\"><a href=\"#“跳帧”测试\" class=\"headerlink\" title=\"“跳帧”测试\"></a>“跳帧”测试</h2><p>将强化学习在模拟环境中训练出的模型用于实际环境中式，通常需要降低其决策频率，也就是加大决策间隔。</p>\n<p>如果跳帧设置过大，智能体所做的动作往往不够好，如果跳帧设置过小，会导致每个episode的步数过长，加大计算量，恶化训练过程（其实文中这么说并不严谨）。</p>\n<p>ES的一个优势是梯度计算与回合长度无关，这间接增加了对跳帧间隔的鲁棒性。在Atari游戏Pong中使用四个不同跳帧间隔{1，2，3，4}的学习曲线如下：</p>\n<p><img src=\"./Evolution-Strategies-2017/frame-skip.png\" alt=\"\"></p>\n<p>由曲线可以看出，不同的跳帧间隔，训练效果差不多。<strong>但，我对该鲁棒性测试在复杂环境中的效果表示怀疑。我觉得前沿强化学习算法在该训练场景中使用不同的跳帧间隔也可以得到相同结果。</strong></p>"},{"title":"Build一个基于Mxnet的Sniper镜像","copyright":true,"top":1,"date":"2019-01-02T13:58:44.000Z","_content":"\n本文记录了如何在学校机器学习平台上创建一个基于Mxnet的Sniper镜像。\n\n<!--more-->\n\n# 说明\n\n由于此镜像是用于学校机器学习平台,所以文中会出现FTP服务器等字眼,其实是在平台上使用镜像创建一个容器时,平台会**自动**将服务器上我所申请的文件存储区`mount`到创建的容器,我通过`FileZilla`FTP工具与在平台申请的文件存储区进行连接\n​\t\n本文教程虽然有了一个FTP过程,但是如果是生成本地镜像,不考虑FTP,无视文中相关部分即可\n\n**虽然本文中写了关于压缩的相关内容,但是最终并没有使用压缩,原因是由于压缩后出现未知问题,导致在平台上创建的容器不能使用宿主机的NVIDIA驱动,并不能成功运行Demo**\n\n# 环境\n\n本机环境\n- windows 10 专业版\n- docker client version 18.09.0\n- docker server version 18.09.0\n- FTP工具 FileZilla\n\n平台环境\n- docker version 17.06.2-ce\n\n镜像环境\n- python 2.7.12\n- CUDA version 9.0.176\n- pip 9.0.3\n\n[SNIPER](https://github.com/mahyarnajibi/SNIPER)\n[机器学习平台](http://10.0.4.228),这是学校资源\n\n# 一 配置基础镜像\n\n从学校机器学习平台上拉取原始镜像,因为这个镜像配好了一些基本的环境,如python2.x,CUDA9.0等等,所以直接使用它们的镜像作为基础镜像比较省心省力\n`docker pull hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh`\n\n拉取到镜像之后,可以选择使用`Dockerfile`来生成我们需要的镜像,但是往往我们需要在镜像中添加许多库/包/插件,而且使用`Dockerfile`来生成镜像很容易出BUG.当然,最好的方式是使用`Dockerfile`,前提是你能确保`Dockerfile`文件中的每一行命令都不会出错.\n在当前情况下,我选择使用从容器生成镜像的方法,这种方式会使得最终生成的镜像占内存巨大,但是可以在容器内部调试每一步配置过程.\n使用`docker run -itd --name [name] hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh`开启一个容器\n\n使用`docker ps -a`查看正在运行的容器`ID`\n\n使用`docker exec -it [name] /bin/bash`进入容器\n\n在容器中使用`cat /etc/issue`命令查看容器的操作系统版本\n\n结果输出: `Ubuntu 16.04.4 LTS \\n \\l`\n\n## 安装 apt-file\n\n安装`apt-file`\n\n`apt-get install apt-file -y`\n\n出现错误:\n\n![](./create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png)\n\n使用`apt-get install apt-file -y --fix-missing`同样不能解决问题\n\n考虑**换源**\n\n`cp /etc/apt/sources.list /etc/apt/sources.list.bak`备份系统原有的源\n\n安装Linux下的文本编辑器`nano`,执行命令`apt-get install nano -y`\n安装`nano`成功后,执行`nano /etc/apt/sources.list`修改源文件\n在打开的文件中,将内容替换为\n```\n# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted\ndeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties\ndeb http://archive.canonical.com/ubuntu xenial partner\ndeb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse\n```\n\n这里使用的源是阿里的镜像站,也可以使用网易163的,源如下:\n```\ndeb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse\n```\n\n更改好源文件后,执行`sudo apt-get update`更新源\n\n再次执行`apt-get install apt-file -y`,可以成功安装`apt-file`包\n\n之后执行`apt-file update`更新apt-file cache\n使用`apt-file find [name]`可以查找计算机上文件的位置,很方便\n使用`apt-file search [name]`可以搜索缺少的库,解决文件缺失依赖\n选择好自己需要的包,然后使用`apt-get install [name]`即可\n\n- 如果需要把镜像上传到云上使用,有可能需要网络服务,\n- 执行`apt-get install net-tools`安装ifconfig\n- 执行`apt-get install iputils-ping`安装ping\n\n此时为了避免诸如使用`ping [IP]`有效,但是`ping [HOST]`无效的情况,需要使用`nano /etc/resolv.conf`修改配置文件\n将`namespace`后的IP地址更改为`8.8.8.8`或者`4.4.4.4`\n*或者使用`echo \"nameserver 114.114.114.114 > /etc/resolv.conf\"`也可以*\n退出保存即可\n\n*有可能上述修改DNS的方式并不成功,原因是在云上运行容器时,配置文件自动修改,如果发生这种情况,请每次在新开一个容器时,手动修改配置文件的DNS服务器,使其可以使用网络服务*\n\n# 二 安装编译依赖各种包\n\n在电脑上空闲的地方,从Github拉取Sniper项目\n\n`git clone --recursive https://github.com/mahyarnajibi/SNIPER.git`\n\n- 因为我是在学校机器学习平台上运行docker容器,所以选择直接将clone下的文件上传至容器`mount`的ftp服务器,使用的软件是`FileZilla`\n\n- 上传成功后可以在容器内通过`cd /data/[file or folder name]`进行访问\n\n如果要在本地镜像内操作的话,也可以直接把本机文件或文件夹拷贝过去\n`docker cp 本地文件路径 ID全称:容器路径`\n\n---\n\n`cd /data/SNIPER/SNIPER-mxnet`\n`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n输出信息:\n![](./create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png)\n\n## 安装 jemalloc\n\n选择安装`jemalloc`,这个工具可以加速编译,碎片整理,具体请自行谷歌\n- `apt-get install autoconf`\n- `apt-get install automake`\n- `apt-get install libtool`\n- `git clone https://github.com/jemalloc/jemalloc.git`\n- `cd jemalloc`\n- `git checkout 4.5.0`安装4.5.0版本的jemalloc,5.x版本的有坑,深坑\n- `./autogen.sh`\n- `make`\n- `make install_bin install_include install_lib`,之所以不使用`make install`是因为会报错,如下: ![](./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png)\n\n切换至`SNIPER-mxnet`文件夹,再次`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n虽然可以编译,但是有以下信息: \n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png)\n强迫症必须搞定它,果断`ctrl+c`终止编译\n\n## 安装 pkg-config\n\n- 打开[https://pkg-config.freedesktop.org/releases/](https://pkg-config.freedesktop.org/releases/)\n- 下载最新的,现在看到的是`pkg-config-0.29.2.tar.gz`\n- 下载好之后,通过`FileZilla`等工具传输到FTP服务器\n- 在容器内`cd`到压缩包位置\n- `tar -xf pkg-config-0.29.2.tar.gz`\n- `cd pkg-config-0.29.2`\n- `./configure --with-internal-glib`,注意,中间是一个空格,非常关键\n- `make && make install`\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png)\n\n再次`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n算了，还是安装一下cudnn吧\n\n## 安装 cudnn7.0\n- [https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive) 下载cuDNN Libraries for Linux,不要下载 Power 8\n- 把下载好的包上传到FTP服务器\n- `cd`到包位置\n- `cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz`\n- `tar -xvf cudnn-9.0-linux-x64-v7.tgz`\n- `cp include/* /usr/local/cuda-9.0/include`\n- `cp lib64/* /usr/local/cuda-9.0/lib64`\n- `chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*`\n- `export PATH=/usr/local/cuda-9.0/bin:$PATH`\n- `cd`到`/usr/local/cuda-9.0/lib64`\n- `nano ~/.bashrc`,关联环境变量\n- 在最后一行加入`export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH`\n- `source ~/.bashrc`\n- `ldconfig -v`\n- 使用`cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2` 查看cudnn版本\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png)\n\n## 安装 OpenCV\n- 使用`pkg-config opencv --modversion`查看\n- 发现已经有OpenCV\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png)\n\n## 安装 OpenBLAS\n- `apt-get install libopenblas-dev`\n\n## 编译 Mxnet\n\n`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n![](./create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png)\n\n**心好累,总共make了将近两个半小时**\n\n编译`c++`文件`bash scripts/compile.sh`\n这一步一定要在`/SNIPER/`文件夹下,不然贼坑,绝对不要`cd`到`/SNIPER/scripts`文件夹下再`bash compile.sh`,因为代码内有`cd lib/nms`等,如果不在`/SNIPER`文件夹下,会找不到文件\n\n如果出现`syntax error near unexpected token `$'\\r''`错误,可以使用`sed`命令将`\\r`去掉,或者是在[Github](https://github.com/mahyarnajibi/SNIPER/blob/master/scripts/compile.sh)上将代码复制,使用`nano`编辑然后粘贴\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png)\n可以使用`cat -v [filename]`查看\n![]./create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png)\n以`^M`结尾的代表你所处理的文件换行符是dos格式的`\"\\r\\n\"`\n\n我选择第二种笨方法,因为涉及的代码并不多\n\n执行结果:\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png)\n\n## 安装 dos2unix\n\n由于发现这种简单的复制粘贴方式并不能很好的解决,所以查了一些[相关资料](https://blog.csdn.net/lovelovelovelovelo/article/details/79239068)\n选择使用`dos2unix`来转换\n\n- `apt-get install dos2unix`\n- `dos2unix [filename]`\n\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png)\n问题解决啦\n\n## 安装依赖\n\n在`/SNIPER/`文件夹下`pip install -r requirements.txt`\n一定要确保镜像内可以联网\n\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png)\n\n## 测试Demo\n\n- `bash download_sniper_detector.sh`,download_sniper_detector.sh\n文件在`/SNIPER/scripts`文件夹下\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png)\n- `cd .. && python demo.py`\n![](./create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png)\n\n**运行成功!!!**\n\n# 三 生成镜像\n- 使用`exit`退出容器\n- 使用`docker ps -a`查看容器ID\n- 使用`docker stop [ID]`停止容器\n- 使用`docker commit -a \"作者信息\" -m \"附带信息\" [ID] [name]:[tag]`生成镜像,会返回一个`sha256`开头的长ID,这个就是生成的镜像ID\n- 使用`docker images`查看生成的镜像\n- 如果需要的话,使用`docker push [name]:[tag]`将刚刚生成的镜像推送到云上\n\n# 四 压缩镜像\n\n**压缩镜像非常麻烦,但是也是有方法的,目前大概三种方法**\n\n1. 使用`Dockerfile`生成镜像\n2. 这种方法需要让容器在运行状态,使用`docker export [ID] | docker import - [name]:[tag]`导出容器快照,并从快照生成镜像,这种方式可以大大压缩镜像,但是缺点是有可能会使得镜像中的环境变量、开放端口、默认进入命令改变或消失.使用这种方式时,最好在生成镜像之后,创建一个`Dockerfile`文件,`From`这个镜像,并添加端口和命令入口\n3. 使用`docker-squash`压缩镜像,这个方法适用于Linux和Mac系统\n\n目前可以运行的镜像是13.6G\n![](./create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png)\n`hub.hoc.ccshu.net/wjs/sniper:v1.1`\n现在要对它进行压缩\n\n## 第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去\n\n- 开启一个容器`docker run -itd --name [name] [id]`\n- 复制容器内文件到本地`docker cp [长ID]:[容器内路径] [本地路径]`,将放置在本地的文件夹上传至FTP服务器\n- 进入容器`docker exec -it [name] /bin/bash`\n- 删除容器内文件夹`/SNIPER/`,使用`rm -rf SNIPER`,**一定要小心使用**\n- 退出容器`exit`\n\n## 第二步,压缩镜像\n\n压缩容器\n`docker export [ID] | docker import - [name]:[tag]`\n\n可以看到,镜像体积少了大约2个G\n![](./create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png)\n\n由于使用这种方法会使得镜像丢失部分信息,所以,创建一个新的`Dockerfile`,在其中添加缺失的信息\n\n## 第三步,完善镜像\n\n在任意位置新建`Dockerfile`\n输入\n```\nFROM [name]:[tag]\nEXPOSE 22\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png)\n\n然后`docker build -t [name]:[tag] .`,不要忘了最后的`.`\n\n## 第四步 Push\n\n`docker push [name]:[tag]`\n\n至此,所有配置以及完成\n镜像在`hoc.hoc.ccshu.net`的私有仓库里\nSNIPER文件夹放置在机器学习平台服务器`mount`的目录里\n\n# 五 测试\n\n- 在平台上创建容器\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png)\n\n- 耐心等待创建完成\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png)\n\n- 创建成功\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png)\n\n- 测试结果\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png)\n**测试失败**\n\n**但是,使用未压缩的镜像测试成功**\n","source":"_posts/create-sniper-docker-image.md","raw":"---\ntitle: Build一个基于Mxnet的Sniper镜像\ncopyright: true\ntop: 1\ndate: 2019-01-02 21:58:44\ncategories:  Docker\ntags:\n- docker\n- mxnet\n- sniper\n\n---\n\n本文记录了如何在学校机器学习平台上创建一个基于Mxnet的Sniper镜像。\n\n<!--more-->\n\n# 说明\n\n由于此镜像是用于学校机器学习平台,所以文中会出现FTP服务器等字眼,其实是在平台上使用镜像创建一个容器时,平台会**自动**将服务器上我所申请的文件存储区`mount`到创建的容器,我通过`FileZilla`FTP工具与在平台申请的文件存储区进行连接\n​\t\n本文教程虽然有了一个FTP过程,但是如果是生成本地镜像,不考虑FTP,无视文中相关部分即可\n\n**虽然本文中写了关于压缩的相关内容,但是最终并没有使用压缩,原因是由于压缩后出现未知问题,导致在平台上创建的容器不能使用宿主机的NVIDIA驱动,并不能成功运行Demo**\n\n# 环境\n\n本机环境\n- windows 10 专业版\n- docker client version 18.09.0\n- docker server version 18.09.0\n- FTP工具 FileZilla\n\n平台环境\n- docker version 17.06.2-ce\n\n镜像环境\n- python 2.7.12\n- CUDA version 9.0.176\n- pip 9.0.3\n\n[SNIPER](https://github.com/mahyarnajibi/SNIPER)\n[机器学习平台](http://10.0.4.228),这是学校资源\n\n# 一 配置基础镜像\n\n从学校机器学习平台上拉取原始镜像,因为这个镜像配好了一些基本的环境,如python2.x,CUDA9.0等等,所以直接使用它们的镜像作为基础镜像比较省心省力\n`docker pull hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh`\n\n拉取到镜像之后,可以选择使用`Dockerfile`来生成我们需要的镜像,但是往往我们需要在镜像中添加许多库/包/插件,而且使用`Dockerfile`来生成镜像很容易出BUG.当然,最好的方式是使用`Dockerfile`,前提是你能确保`Dockerfile`文件中的每一行命令都不会出错.\n在当前情况下,我选择使用从容器生成镜像的方法,这种方式会使得最终生成的镜像占内存巨大,但是可以在容器内部调试每一步配置过程.\n使用`docker run -itd --name [name] hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh`开启一个容器\n\n使用`docker ps -a`查看正在运行的容器`ID`\n\n使用`docker exec -it [name] /bin/bash`进入容器\n\n在容器中使用`cat /etc/issue`命令查看容器的操作系统版本\n\n结果输出: `Ubuntu 16.04.4 LTS \\n \\l`\n\n## 安装 apt-file\n\n安装`apt-file`\n\n`apt-get install apt-file -y`\n\n出现错误:\n\n![](./create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png)\n\n使用`apt-get install apt-file -y --fix-missing`同样不能解决问题\n\n考虑**换源**\n\n`cp /etc/apt/sources.list /etc/apt/sources.list.bak`备份系统原有的源\n\n安装Linux下的文本编辑器`nano`,执行命令`apt-get install nano -y`\n安装`nano`成功后,执行`nano /etc/apt/sources.list`修改源文件\n在打开的文件中,将内容替换为\n```\n# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted\ndeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties\ndeb http://archive.canonical.com/ubuntu xenial partner\ndeb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse\n```\n\n这里使用的源是阿里的镜像站,也可以使用网易163的,源如下:\n```\ndeb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse\n```\n\n更改好源文件后,执行`sudo apt-get update`更新源\n\n再次执行`apt-get install apt-file -y`,可以成功安装`apt-file`包\n\n之后执行`apt-file update`更新apt-file cache\n使用`apt-file find [name]`可以查找计算机上文件的位置,很方便\n使用`apt-file search [name]`可以搜索缺少的库,解决文件缺失依赖\n选择好自己需要的包,然后使用`apt-get install [name]`即可\n\n- 如果需要把镜像上传到云上使用,有可能需要网络服务,\n- 执行`apt-get install net-tools`安装ifconfig\n- 执行`apt-get install iputils-ping`安装ping\n\n此时为了避免诸如使用`ping [IP]`有效,但是`ping [HOST]`无效的情况,需要使用`nano /etc/resolv.conf`修改配置文件\n将`namespace`后的IP地址更改为`8.8.8.8`或者`4.4.4.4`\n*或者使用`echo \"nameserver 114.114.114.114 > /etc/resolv.conf\"`也可以*\n退出保存即可\n\n*有可能上述修改DNS的方式并不成功,原因是在云上运行容器时,配置文件自动修改,如果发生这种情况,请每次在新开一个容器时,手动修改配置文件的DNS服务器,使其可以使用网络服务*\n\n# 二 安装编译依赖各种包\n\n在电脑上空闲的地方,从Github拉取Sniper项目\n\n`git clone --recursive https://github.com/mahyarnajibi/SNIPER.git`\n\n- 因为我是在学校机器学习平台上运行docker容器,所以选择直接将clone下的文件上传至容器`mount`的ftp服务器,使用的软件是`FileZilla`\n\n- 上传成功后可以在容器内通过`cd /data/[file or folder name]`进行访问\n\n如果要在本地镜像内操作的话,也可以直接把本机文件或文件夹拷贝过去\n`docker cp 本地文件路径 ID全称:容器路径`\n\n---\n\n`cd /data/SNIPER/SNIPER-mxnet`\n`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n输出信息:\n![](./create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png)\n\n## 安装 jemalloc\n\n选择安装`jemalloc`,这个工具可以加速编译,碎片整理,具体请自行谷歌\n- `apt-get install autoconf`\n- `apt-get install automake`\n- `apt-get install libtool`\n- `git clone https://github.com/jemalloc/jemalloc.git`\n- `cd jemalloc`\n- `git checkout 4.5.0`安装4.5.0版本的jemalloc,5.x版本的有坑,深坑\n- `./autogen.sh`\n- `make`\n- `make install_bin install_include install_lib`,之所以不使用`make install`是因为会报错,如下: ![](./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png)\n\n切换至`SNIPER-mxnet`文件夹,再次`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n虽然可以编译,但是有以下信息: \n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png)\n强迫症必须搞定它,果断`ctrl+c`终止编译\n\n## 安装 pkg-config\n\n- 打开[https://pkg-config.freedesktop.org/releases/](https://pkg-config.freedesktop.org/releases/)\n- 下载最新的,现在看到的是`pkg-config-0.29.2.tar.gz`\n- 下载好之后,通过`FileZilla`等工具传输到FTP服务器\n- 在容器内`cd`到压缩包位置\n- `tar -xf pkg-config-0.29.2.tar.gz`\n- `cd pkg-config-0.29.2`\n- `./configure --with-internal-glib`,注意,中间是一个空格,非常关键\n- `make && make install`\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png)\n\n再次`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n算了，还是安装一下cudnn吧\n\n## 安装 cudnn7.0\n- [https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive) 下载cuDNN Libraries for Linux,不要下载 Power 8\n- 把下载好的包上传到FTP服务器\n- `cd`到包位置\n- `cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz`\n- `tar -xvf cudnn-9.0-linux-x64-v7.tgz`\n- `cp include/* /usr/local/cuda-9.0/include`\n- `cp lib64/* /usr/local/cuda-9.0/lib64`\n- `chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*`\n- `export PATH=/usr/local/cuda-9.0/bin:$PATH`\n- `cd`到`/usr/local/cuda-9.0/lib64`\n- `nano ~/.bashrc`,关联环境变量\n- 在最后一行加入`export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH`\n- `source ~/.bashrc`\n- `ldconfig -v`\n- 使用`cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2` 查看cudnn版本\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png)\n\n## 安装 OpenCV\n- 使用`pkg-config opencv --modversion`查看\n- 发现已经有OpenCV\n![](./create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png)\n\n## 安装 OpenBLAS\n- `apt-get install libopenblas-dev`\n\n## 编译 Mxnet\n\n`make USE_CUDA_PATH=/usr/local/cuda-9.0`\n![](./create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png)\n\n**心好累,总共make了将近两个半小时**\n\n编译`c++`文件`bash scripts/compile.sh`\n这一步一定要在`/SNIPER/`文件夹下,不然贼坑,绝对不要`cd`到`/SNIPER/scripts`文件夹下再`bash compile.sh`,因为代码内有`cd lib/nms`等,如果不在`/SNIPER`文件夹下,会找不到文件\n\n如果出现`syntax error near unexpected token `$'\\r''`错误,可以使用`sed`命令将`\\r`去掉,或者是在[Github](https://github.com/mahyarnajibi/SNIPER/blob/master/scripts/compile.sh)上将代码复制,使用`nano`编辑然后粘贴\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png)\n可以使用`cat -v [filename]`查看\n![]./create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png)\n以`^M`结尾的代表你所处理的文件换行符是dos格式的`\"\\r\\n\"`\n\n我选择第二种笨方法,因为涉及的代码并不多\n\n执行结果:\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png)\n\n## 安装 dos2unix\n\n由于发现这种简单的复制粘贴方式并不能很好的解决,所以查了一些[相关资料](https://blog.csdn.net/lovelovelovelovelo/article/details/79239068)\n选择使用`dos2unix`来转换\n\n- `apt-get install dos2unix`\n- `dos2unix [filename]`\n\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png)\n问题解决啦\n\n## 安装依赖\n\n在`/SNIPER/`文件夹下`pip install -r requirements.txt`\n一定要确保镜像内可以联网\n\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png)\n\n## 测试Demo\n\n- `bash download_sniper_detector.sh`,download_sniper_detector.sh\n文件在`/SNIPER/scripts`文件夹下\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png)\n- `cd .. && python demo.py`\n![](./create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png)\n\n**运行成功!!!**\n\n# 三 生成镜像\n- 使用`exit`退出容器\n- 使用`docker ps -a`查看容器ID\n- 使用`docker stop [ID]`停止容器\n- 使用`docker commit -a \"作者信息\" -m \"附带信息\" [ID] [name]:[tag]`生成镜像,会返回一个`sha256`开头的长ID,这个就是生成的镜像ID\n- 使用`docker images`查看生成的镜像\n- 如果需要的话,使用`docker push [name]:[tag]`将刚刚生成的镜像推送到云上\n\n# 四 压缩镜像\n\n**压缩镜像非常麻烦,但是也是有方法的,目前大概三种方法**\n\n1. 使用`Dockerfile`生成镜像\n2. 这种方法需要让容器在运行状态,使用`docker export [ID] | docker import - [name]:[tag]`导出容器快照,并从快照生成镜像,这种方式可以大大压缩镜像,但是缺点是有可能会使得镜像中的环境变量、开放端口、默认进入命令改变或消失.使用这种方式时,最好在生成镜像之后,创建一个`Dockerfile`文件,`From`这个镜像,并添加端口和命令入口\n3. 使用`docker-squash`压缩镜像,这个方法适用于Linux和Mac系统\n\n目前可以运行的镜像是13.6G\n![](./create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png)\n`hub.hoc.ccshu.net/wjs/sniper:v1.1`\n现在要对它进行压缩\n\n## 第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去\n\n- 开启一个容器`docker run -itd --name [name] [id]`\n- 复制容器内文件到本地`docker cp [长ID]:[容器内路径] [本地路径]`,将放置在本地的文件夹上传至FTP服务器\n- 进入容器`docker exec -it [name] /bin/bash`\n- 删除容器内文件夹`/SNIPER/`,使用`rm -rf SNIPER`,**一定要小心使用**\n- 退出容器`exit`\n\n## 第二步,压缩镜像\n\n压缩容器\n`docker export [ID] | docker import - [name]:[tag]`\n\n可以看到,镜像体积少了大约2个G\n![](./create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png)\n\n由于使用这种方法会使得镜像丢失部分信息,所以,创建一个新的`Dockerfile`,在其中添加缺失的信息\n\n## 第三步,完善镜像\n\n在任意位置新建`Dockerfile`\n输入\n```\nFROM [name]:[tag]\nEXPOSE 22\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png)\n\n然后`docker build -t [name]:[tag] .`,不要忘了最后的`.`\n\n## 第四步 Push\n\n`docker push [name]:[tag]`\n\n至此,所有配置以及完成\n镜像在`hoc.hoc.ccshu.net`的私有仓库里\nSNIPER文件夹放置在机器学习平台服务器`mount`的目录里\n\n# 五 测试\n\n- 在平台上创建容器\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png)\n\n- 耐心等待创建完成\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png)\n\n- 创建成功\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png)\n\n- 测试结果\n![](./create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png)\n**测试失败**\n\n**但是,使用未压缩的镜像测试成功**\n","slug":"create-sniper-docker-image","published":1,"updated":"2019-05-13T11:44:34.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaabd0027m8vewzvwyrfh","content":"<p>本文记录了如何在学校机器学习平台上创建一个基于Mxnet的Sniper镜像。</p>\n<a id=\"more\"></a>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>由于此镜像是用于学校机器学习平台,所以文中会出现FTP服务器等字眼,其实是在平台上使用镜像创建一个容器时,平台会<strong>自动</strong>将服务器上我所申请的文件存储区<code>mount</code>到创建的容器,我通过<code>FileZilla</code>FTP工具与在平台申请的文件存储区进行连接<br>​<br>本文教程虽然有了一个FTP过程,但是如果是生成本地镜像,不考虑FTP,无视文中相关部分即可</p>\n<p><strong>虽然本文中写了关于压缩的相关内容,但是最终并没有使用压缩,原因是由于压缩后出现未知问题,导致在平台上创建的容器不能使用宿主机的NVIDIA驱动,并不能成功运行Demo</strong></p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>本机环境</p>\n<ul>\n<li>windows 10 专业版</li>\n<li>docker client version 18.09.0</li>\n<li>docker server version 18.09.0</li>\n<li>FTP工具 FileZilla</li>\n</ul>\n<p>平台环境</p>\n<ul>\n<li>docker version 17.06.2-ce</li>\n</ul>\n<p>镜像环境</p>\n<ul>\n<li>python 2.7.12</li>\n<li>CUDA version 9.0.176</li>\n<li>pip 9.0.3</li>\n</ul>\n<p><a href=\"https://github.com/mahyarnajibi/SNIPER\" rel=\"external nofollow\" target=\"_blank\">SNIPER</a><br><a href=\"http://10.0.4.228\" rel=\"external nofollow\" target=\"_blank\">机器学习平台</a>,这是学校资源</p>\n<h1 id=\"一-配置基础镜像\"><a href=\"#一-配置基础镜像\" class=\"headerlink\" title=\"一 配置基础镜像\"></a>一 配置基础镜像</h1><p>从学校机器学习平台上拉取原始镜像,因为这个镜像配好了一些基本的环境,如python2.x,CUDA9.0等等,所以直接使用它们的镜像作为基础镜像比较省心省力<br><code>docker pull hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh</code></p>\n<p>拉取到镜像之后,可以选择使用<code>Dockerfile</code>来生成我们需要的镜像,但是往往我们需要在镜像中添加许多库/包/插件,而且使用<code>Dockerfile</code>来生成镜像很容易出BUG.当然,最好的方式是使用<code>Dockerfile</code>,前提是你能确保<code>Dockerfile</code>文件中的每一行命令都不会出错.<br>在当前情况下,我选择使用从容器生成镜像的方法,这种方式会使得最终生成的镜像占内存巨大,但是可以在容器内部调试每一步配置过程.<br>使用<code>docker run -itd --name [name] hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh</code>开启一个容器</p>\n<p>使用<code>docker ps -a</code>查看正在运行的容器<code>ID</code></p>\n<p>使用<code>docker exec -it [name] /bin/bash</code>进入容器</p>\n<p>在容器中使用<code>cat /etc/issue</code>命令查看容器的操作系统版本</p>\n<p>结果输出: <code>Ubuntu 16.04.4 LTS \\n \\l</code></p>\n<h2 id=\"安装-apt-file\"><a href=\"#安装-apt-file\" class=\"headerlink\" title=\"安装 apt-file\"></a>安装 apt-file</h2><p>安装<code>apt-file</code></p>\n<p><code>apt-get install apt-file -y</code></p>\n<p>出现错误:</p>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png\" alt=\"\"></p>\n<p>使用<code>apt-get install apt-file -y --fix-missing</code>同样不能解决问题</p>\n<p>考虑<strong>换源</strong></p>\n<p><code>cp /etc/apt/sources.list /etc/apt/sources.list.bak</code>备份系统原有的源</p>\n<p>安装Linux下的文本编辑器<code>nano</code>,执行命令<code>apt-get install nano -y</code><br>安装<code>nano</code>成功后,执行<code>nano /etc/apt/sources.list</code>修改源文件<br>在打开的文件中,将内容替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span><br><span class=\"line\">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class=\"line\">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure></p>\n<p>这里使用的源是阿里的镜像站,也可以使用网易163的,源如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></p>\n<p>更改好源文件后,执行<code>sudo apt-get update</code>更新源</p>\n<p>再次执行<code>apt-get install apt-file -y</code>,可以成功安装<code>apt-file</code>包</p>\n<p>之后执行<code>apt-file update</code>更新apt-file cache<br>使用<code>apt-file find [name]</code>可以查找计算机上文件的位置,很方便<br>使用<code>apt-file search [name]</code>可以搜索缺少的库,解决文件缺失依赖<br>选择好自己需要的包,然后使用<code>apt-get install [name]</code>即可</p>\n<ul>\n<li>如果需要把镜像上传到云上使用,有可能需要网络服务,</li>\n<li>执行<code>apt-get install net-tools</code>安装ifconfig</li>\n<li>执行<code>apt-get install iputils-ping</code>安装ping</li>\n</ul>\n<p>此时为了避免诸如使用<code>ping [IP]</code>有效,但是<code>ping [HOST]</code>无效的情况,需要使用<code>nano /etc/resolv.conf</code>修改配置文件<br>将<code>namespace</code>后的IP地址更改为<code>8.8.8.8</code>或者<code>4.4.4.4</code><br><em>或者使用<code>echo &quot;nameserver 114.114.114.114 &gt; /etc/resolv.conf&quot;</code>也可以</em><br>退出保存即可</p>\n<p><em>有可能上述修改DNS的方式并不成功,原因是在云上运行容器时,配置文件自动修改,如果发生这种情况,请每次在新开一个容器时,手动修改配置文件的DNS服务器,使其可以使用网络服务</em></p>\n<h1 id=\"二-安装编译依赖各种包\"><a href=\"#二-安装编译依赖各种包\" class=\"headerlink\" title=\"二 安装编译依赖各种包\"></a>二 安装编译依赖各种包</h1><p>在电脑上空闲的地方,从Github拉取Sniper项目</p>\n<p><code>git clone --recursive https://github.com/mahyarnajibi/SNIPER.git</code></p>\n<ul>\n<li><p>因为我是在学校机器学习平台上运行docker容器,所以选择直接将clone下的文件上传至容器<code>mount</code>的ftp服务器,使用的软件是<code>FileZilla</code></p>\n</li>\n<li><p>上传成功后可以在容器内通过<code>cd /data/[file or folder name]</code>进行访问</p>\n</li>\n</ul>\n<p>如果要在本地镜像内操作的话,也可以直接把本机文件或文件夹拷贝过去<br><code>docker cp 本地文件路径 ID全称:容器路径</code></p>\n<hr>\n<p><code>cd /data/SNIPER/SNIPER-mxnet</code><br><code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>输出信息:<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png\" alt=\"\"></p>\n<h2 id=\"安装-jemalloc\"><a href=\"#安装-jemalloc\" class=\"headerlink\" title=\"安装 jemalloc\"></a>安装 jemalloc</h2><p>选择安装<code>jemalloc</code>,这个工具可以加速编译,碎片整理,具体请自行谷歌</p>\n<ul>\n<li><code>apt-get install autoconf</code></li>\n<li><code>apt-get install automake</code></li>\n<li><code>apt-get install libtool</code></li>\n<li><code>git clone https://github.com/jemalloc/jemalloc.git</code></li>\n<li><code>cd jemalloc</code></li>\n<li><code>git checkout 4.5.0</code>安装4.5.0版本的jemalloc,5.x版本的有坑,深坑</li>\n<li><code>./autogen.sh</code></li>\n<li><code>make</code></li>\n<li><code>make install_bin install_include install_lib</code>,之所以不使用<code>make install</code>是因为会报错,如下: <img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png\" alt=\"\"></li>\n</ul>\n<p>切换至<code>SNIPER-mxnet</code>文件夹,再次<code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>虽然可以编译,但是有以下信息:<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png\" alt=\"\"><br>强迫症必须搞定它,果断<code>ctrl+c</code>终止编译</p>\n<h2 id=\"安装-pkg-config\"><a href=\"#安装-pkg-config\" class=\"headerlink\" title=\"安装 pkg-config\"></a>安装 pkg-config</h2><ul>\n<li>打开<a href=\"https://pkg-config.freedesktop.org/releases/\" rel=\"external nofollow\" target=\"_blank\">https://pkg-config.freedesktop.org/releases/</a></li>\n<li>下载最新的,现在看到的是<code>pkg-config-0.29.2.tar.gz</code></li>\n<li>下载好之后,通过<code>FileZilla</code>等工具传输到FTP服务器</li>\n<li>在容器内<code>cd</code>到压缩包位置</li>\n<li><code>tar -xf pkg-config-0.29.2.tar.gz</code></li>\n<li><code>cd pkg-config-0.29.2</code></li>\n<li><code>./configure --with-internal-glib</code>,注意,中间是一个空格,非常关键</li>\n<li><code>make &amp;&amp; make install</code><br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png\" alt=\"\"></li>\n</ul>\n<p>再次<code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>算了，还是安装一下cudnn吧</p>\n<h2 id=\"安装-cudnn7-0\"><a href=\"#安装-cudnn7-0\" class=\"headerlink\" title=\"安装 cudnn7.0\"></a>安装 cudnn7.0</h2><ul>\n<li><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\" rel=\"external nofollow\" target=\"_blank\">https://developer.nvidia.com/rdp/cudnn-archive</a> 下载cuDNN Libraries for Linux,不要下载 Power 8</li>\n<li>把下载好的包上传到FTP服务器</li>\n<li><code>cd</code>到包位置</li>\n<li><code>cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>tar -xvf cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>cp include/* /usr/local/cuda-9.0/include</code></li>\n<li><code>cp lib64/* /usr/local/cuda-9.0/lib64</code></li>\n<li><code>chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*</code></li>\n<li><code>export PATH=/usr/local/cuda-9.0/bin:$PATH</code></li>\n<li><code>cd</code>到<code>/usr/local/cuda-9.0/lib64</code></li>\n<li><code>nano ~/.bashrc</code>,关联环境变量</li>\n<li>在最后一行加入<code>export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH</code></li>\n<li><code>source ~/.bashrc</code></li>\n<li><code>ldconfig -v</code></li>\n<li>使用<code>cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2</code> 查看cudnn版本<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"安装-OpenCV\"><a href=\"#安装-OpenCV\" class=\"headerlink\" title=\"安装 OpenCV\"></a>安装 OpenCV</h2><ul>\n<li>使用<code>pkg-config opencv --modversion</code>查看</li>\n<li>发现已经有OpenCV<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"安装-OpenBLAS\"><a href=\"#安装-OpenBLAS\" class=\"headerlink\" title=\"安装 OpenBLAS\"></a>安装 OpenBLAS</h2><ul>\n<li><code>apt-get install libopenblas-dev</code></li>\n</ul>\n<h2 id=\"编译-Mxnet\"><a href=\"#编译-Mxnet\" class=\"headerlink\" title=\"编译 Mxnet\"></a>编译 Mxnet</h2><p><code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png\" alt=\"\"></p>\n<p><strong>心好累,总共make了将近两个半小时</strong></p>\n<p>编译<code>c++</code>文件<code>bash scripts/compile.sh</code><br>这一步一定要在<code>/SNIPER/</code>文件夹下,不然贼坑,绝对不要<code>cd</code>到<code>/SNIPER/scripts</code>文件夹下再<code>bash compile.sh</code>,因为代码内有<code>cd lib/nms</code>等,如果不在<code>/SNIPER</code>文件夹下,会找不到文件</p>\n<p>如果出现<code>syntax error near unexpected token</code>$’\\r’’<code>错误,可以使用</code>sed<code>命令将</code>\\r<code>去掉,或者是在[Github](https://github.com/mahyarnajibi/SNIPER/blob/master/scripts/compile.sh)上将代码复制,使用</code>nano<code>编辑然后粘贴\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png)\n可以使用</code>cat -v [filename]<code>查看\n![]./create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png)\n以</code>^M<code>结尾的代表你所处理的文件换行符是dos格式的</code>“\\r\\n”`</p>\n<p>我选择第二种笨方法,因为涉及的代码并不多</p>\n<p>执行结果:<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png\" alt=\"\"></p>\n<h2 id=\"安装-dos2unix\"><a href=\"#安装-dos2unix\" class=\"headerlink\" title=\"安装 dos2unix\"></a>安装 dos2unix</h2><p>由于发现这种简单的复制粘贴方式并不能很好的解决,所以查了一些<a href=\"https://blog.csdn.net/lovelovelovelovelo/article/details/79239068\" rel=\"external nofollow\" target=\"_blank\">相关资料</a><br>选择使用<code>dos2unix</code>来转换</p>\n<ul>\n<li><code>apt-get install dos2unix</code></li>\n<li><code>dos2unix [filename]</code></li>\n</ul>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png\" alt=\"\"><br>问题解决啦</p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>在<code>/SNIPER/</code>文件夹下<code>pip install -r requirements.txt</code><br>一定要确保镜像内可以联网</p>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png\" alt=\"\"></p>\n<h2 id=\"测试Demo\"><a href=\"#测试Demo\" class=\"headerlink\" title=\"测试Demo\"></a>测试Demo</h2><ul>\n<li><code>bash download_sniper_detector.sh</code>,download_sniper_detector.sh<br>文件在<code>/SNIPER/scripts</code>文件夹下<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png\" alt=\"\"></li>\n<li><code>cd .. &amp;&amp; python demo.py</code><br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png\" alt=\"\"></li>\n</ul>\n<p><strong>运行成功!!!</strong></p>\n<h1 id=\"三-生成镜像\"><a href=\"#三-生成镜像\" class=\"headerlink\" title=\"三 生成镜像\"></a>三 生成镜像</h1><ul>\n<li>使用<code>exit</code>退出容器</li>\n<li>使用<code>docker ps -a</code>查看容器ID</li>\n<li>使用<code>docker stop [ID]</code>停止容器</li>\n<li>使用<code>docker commit -a &quot;作者信息&quot; -m &quot;附带信息&quot; [ID] [name]:[tag]</code>生成镜像,会返回一个<code>sha256</code>开头的长ID,这个就是生成的镜像ID</li>\n<li>使用<code>docker images</code>查看生成的镜像</li>\n<li>如果需要的话,使用<code>docker push [name]:[tag]</code>将刚刚生成的镜像推送到云上</li>\n</ul>\n<h1 id=\"四-压缩镜像\"><a href=\"#四-压缩镜像\" class=\"headerlink\" title=\"四 压缩镜像\"></a>四 压缩镜像</h1><p><strong>压缩镜像非常麻烦,但是也是有方法的,目前大概三种方法</strong></p>\n<ol>\n<li>使用<code>Dockerfile</code>生成镜像</li>\n<li>这种方法需要让容器在运行状态,使用<code>docker export [ID] | docker import - [name]:[tag]</code>导出容器快照,并从快照生成镜像,这种方式可以大大压缩镜像,但是缺点是有可能会使得镜像中的环境变量、开放端口、默认进入命令改变或消失.使用这种方式时,最好在生成镜像之后,创建一个<code>Dockerfile</code>文件,<code>From</code>这个镜像,并添加端口和命令入口</li>\n<li>使用<code>docker-squash</code>压缩镜像,这个方法适用于Linux和Mac系统</li>\n</ol>\n<p>目前可以运行的镜像是13.6G<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png\" alt=\"\"><br><code>hub.hoc.ccshu.net/wjs/sniper:v1.1</code><br>现在要对它进行压缩</p>\n<h2 id=\"第一步-移除镜像内的SNIPER文件夹-把其放到FTP服务器上去\"><a href=\"#第一步-移除镜像内的SNIPER文件夹-把其放到FTP服务器上去\" class=\"headerlink\" title=\"第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去\"></a>第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去</h2><ul>\n<li>开启一个容器<code>docker run -itd --name [name] [id]</code></li>\n<li>复制容器内文件到本地<code>docker cp [长ID]:[容器内路径] [本地路径]</code>,将放置在本地的文件夹上传至FTP服务器</li>\n<li>进入容器<code>docker exec -it [name] /bin/bash</code></li>\n<li>删除容器内文件夹<code>/SNIPER/</code>,使用<code>rm -rf SNIPER</code>,<strong>一定要小心使用</strong></li>\n<li>退出容器<code>exit</code></li>\n</ul>\n<h2 id=\"第二步-压缩镜像\"><a href=\"#第二步-压缩镜像\" class=\"headerlink\" title=\"第二步,压缩镜像\"></a>第二步,压缩镜像</h2><p>压缩容器<br><code>docker export [ID] | docker import - [name]:[tag]</code></p>\n<p>可以看到,镜像体积少了大约2个G<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png\" alt=\"\"></p>\n<p>由于使用这种方法会使得镜像丢失部分信息,所以,创建一个新的<code>Dockerfile</code>,在其中添加缺失的信息</p>\n<h2 id=\"第三步-完善镜像\"><a href=\"#第三步-完善镜像\" class=\"headerlink\" title=\"第三步,完善镜像\"></a>第三步,完善镜像</h2><p>在任意位置新建<code>Dockerfile</code><br>输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM [name]:[tag]</span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png\" alt=\"\"></p>\n<p>然后<code>docker build -t [name]:[tag] .</code>,不要忘了最后的<code>.</code></p>\n<h2 id=\"第四步-Push\"><a href=\"#第四步-Push\" class=\"headerlink\" title=\"第四步 Push\"></a>第四步 Push</h2><p><code>docker push [name]:[tag]</code></p>\n<p>至此,所有配置以及完成<br>镜像在<code>hoc.hoc.ccshu.net</code>的私有仓库里<br>SNIPER文件夹放置在机器学习平台服务器<code>mount</code>的目录里</p>\n<h1 id=\"五-测试\"><a href=\"#五-测试\" class=\"headerlink\" title=\"五 测试\"></a>五 测试</h1><ul>\n<li><p>在平台上创建容器<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png\" alt=\"\"></p>\n</li>\n<li><p>耐心等待创建完成<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png\" alt=\"\"></p>\n</li>\n<li><p>创建成功<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png\" alt=\"\"></p>\n</li>\n<li><p>测试结果<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png\" alt=\"\"><br><strong>测试失败</strong></p>\n</li>\n</ul>\n<p><strong>但是,使用未压缩的镜像测试成功</strong></p>\n","site":{"data":{}},"excerpt":"<p>本文记录了如何在学校机器学习平台上创建一个基于Mxnet的Sniper镜像。</p>","more":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>由于此镜像是用于学校机器学习平台,所以文中会出现FTP服务器等字眼,其实是在平台上使用镜像创建一个容器时,平台会<strong>自动</strong>将服务器上我所申请的文件存储区<code>mount</code>到创建的容器,我通过<code>FileZilla</code>FTP工具与在平台申请的文件存储区进行连接<br>​<br>本文教程虽然有了一个FTP过程,但是如果是生成本地镜像,不考虑FTP,无视文中相关部分即可</p>\n<p><strong>虽然本文中写了关于压缩的相关内容,但是最终并没有使用压缩,原因是由于压缩后出现未知问题,导致在平台上创建的容器不能使用宿主机的NVIDIA驱动,并不能成功运行Demo</strong></p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>本机环境</p>\n<ul>\n<li>windows 10 专业版</li>\n<li>docker client version 18.09.0</li>\n<li>docker server version 18.09.0</li>\n<li>FTP工具 FileZilla</li>\n</ul>\n<p>平台环境</p>\n<ul>\n<li>docker version 17.06.2-ce</li>\n</ul>\n<p>镜像环境</p>\n<ul>\n<li>python 2.7.12</li>\n<li>CUDA version 9.0.176</li>\n<li>pip 9.0.3</li>\n</ul>\n<p><a href=\"https://github.com/mahyarnajibi/SNIPER\" rel=\"external nofollow\" target=\"_blank\">SNIPER</a><br><a href=\"http://10.0.4.228\" rel=\"external nofollow\" target=\"_blank\">机器学习平台</a>,这是学校资源</p>\n<h1 id=\"一-配置基础镜像\"><a href=\"#一-配置基础镜像\" class=\"headerlink\" title=\"一 配置基础镜像\"></a>一 配置基础镜像</h1><p>从学校机器学习平台上拉取原始镜像,因为这个镜像配好了一些基本的环境,如python2.x,CUDA9.0等等,所以直接使用它们的镜像作为基础镜像比较省心省力<br><code>docker pull hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh</code></p>\n<p>拉取到镜像之后,可以选择使用<code>Dockerfile</code>来生成我们需要的镜像,但是往往我们需要在镜像中添加许多库/包/插件,而且使用<code>Dockerfile</code>来生成镜像很容易出BUG.当然,最好的方式是使用<code>Dockerfile</code>,前提是你能确保<code>Dockerfile</code>文件中的每一行命令都不会出错.<br>在当前情况下,我选择使用从容器生成镜像的方法,这种方式会使得最终生成的镜像占内存巨大,但是可以在容器内部调试每一步配置过程.<br>使用<code>docker run -itd --name [name] hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh</code>开启一个容器</p>\n<p>使用<code>docker ps -a</code>查看正在运行的容器<code>ID</code></p>\n<p>使用<code>docker exec -it [name] /bin/bash</code>进入容器</p>\n<p>在容器中使用<code>cat /etc/issue</code>命令查看容器的操作系统版本</p>\n<p>结果输出: <code>Ubuntu 16.04.4 LTS \\n \\l</code></p>\n<h2 id=\"安装-apt-file\"><a href=\"#安装-apt-file\" class=\"headerlink\" title=\"安装 apt-file\"></a>安装 apt-file</h2><p>安装<code>apt-file</code></p>\n<p><code>apt-get install apt-file -y</code></p>\n<p>出现错误:</p>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png\" alt=\"\"></p>\n<p>使用<code>apt-get install apt-file -y --fix-missing</code>同样不能解决问题</p>\n<p>考虑<strong>换源</strong></p>\n<p><code>cp /etc/apt/sources.list /etc/apt/sources.list.bak</code>备份系统原有的源</p>\n<p>安装Linux下的文本编辑器<code>nano</code>,执行命令<code>apt-get install nano -y</code><br>安装<code>nano</code>成功后,执行<code>nano /etc/apt/sources.list</code>修改源文件<br>在打开的文件中,将内容替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span><br><span class=\"line\">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class=\"line\">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure></p>\n<p>这里使用的源是阿里的镜像站,也可以使用网易163的,源如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></p>\n<p>更改好源文件后,执行<code>sudo apt-get update</code>更新源</p>\n<p>再次执行<code>apt-get install apt-file -y</code>,可以成功安装<code>apt-file</code>包</p>\n<p>之后执行<code>apt-file update</code>更新apt-file cache<br>使用<code>apt-file find [name]</code>可以查找计算机上文件的位置,很方便<br>使用<code>apt-file search [name]</code>可以搜索缺少的库,解决文件缺失依赖<br>选择好自己需要的包,然后使用<code>apt-get install [name]</code>即可</p>\n<ul>\n<li>如果需要把镜像上传到云上使用,有可能需要网络服务,</li>\n<li>执行<code>apt-get install net-tools</code>安装ifconfig</li>\n<li>执行<code>apt-get install iputils-ping</code>安装ping</li>\n</ul>\n<p>此时为了避免诸如使用<code>ping [IP]</code>有效,但是<code>ping [HOST]</code>无效的情况,需要使用<code>nano /etc/resolv.conf</code>修改配置文件<br>将<code>namespace</code>后的IP地址更改为<code>8.8.8.8</code>或者<code>4.4.4.4</code><br><em>或者使用<code>echo &quot;nameserver 114.114.114.114 &gt; /etc/resolv.conf&quot;</code>也可以</em><br>退出保存即可</p>\n<p><em>有可能上述修改DNS的方式并不成功,原因是在云上运行容器时,配置文件自动修改,如果发生这种情况,请每次在新开一个容器时,手动修改配置文件的DNS服务器,使其可以使用网络服务</em></p>\n<h1 id=\"二-安装编译依赖各种包\"><a href=\"#二-安装编译依赖各种包\" class=\"headerlink\" title=\"二 安装编译依赖各种包\"></a>二 安装编译依赖各种包</h1><p>在电脑上空闲的地方,从Github拉取Sniper项目</p>\n<p><code>git clone --recursive https://github.com/mahyarnajibi/SNIPER.git</code></p>\n<ul>\n<li><p>因为我是在学校机器学习平台上运行docker容器,所以选择直接将clone下的文件上传至容器<code>mount</code>的ftp服务器,使用的软件是<code>FileZilla</code></p>\n</li>\n<li><p>上传成功后可以在容器内通过<code>cd /data/[file or folder name]</code>进行访问</p>\n</li>\n</ul>\n<p>如果要在本地镜像内操作的话,也可以直接把本机文件或文件夹拷贝过去<br><code>docker cp 本地文件路径 ID全称:容器路径</code></p>\n<hr>\n<p><code>cd /data/SNIPER/SNIPER-mxnet</code><br><code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>输出信息:<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png\" alt=\"\"></p>\n<h2 id=\"安装-jemalloc\"><a href=\"#安装-jemalloc\" class=\"headerlink\" title=\"安装 jemalloc\"></a>安装 jemalloc</h2><p>选择安装<code>jemalloc</code>,这个工具可以加速编译,碎片整理,具体请自行谷歌</p>\n<ul>\n<li><code>apt-get install autoconf</code></li>\n<li><code>apt-get install automake</code></li>\n<li><code>apt-get install libtool</code></li>\n<li><code>git clone https://github.com/jemalloc/jemalloc.git</code></li>\n<li><code>cd jemalloc</code></li>\n<li><code>git checkout 4.5.0</code>安装4.5.0版本的jemalloc,5.x版本的有坑,深坑</li>\n<li><code>./autogen.sh</code></li>\n<li><code>make</code></li>\n<li><code>make install_bin install_include install_lib</code>,之所以不使用<code>make install</code>是因为会报错,如下: <img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png\" alt=\"\"></li>\n</ul>\n<p>切换至<code>SNIPER-mxnet</code>文件夹,再次<code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>虽然可以编译,但是有以下信息:<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png\" alt=\"\"><br>强迫症必须搞定它,果断<code>ctrl+c</code>终止编译</p>\n<h2 id=\"安装-pkg-config\"><a href=\"#安装-pkg-config\" class=\"headerlink\" title=\"安装 pkg-config\"></a>安装 pkg-config</h2><ul>\n<li>打开<a href=\"https://pkg-config.freedesktop.org/releases/\" rel=\"external nofollow\" target=\"_blank\">https://pkg-config.freedesktop.org/releases/</a></li>\n<li>下载最新的,现在看到的是<code>pkg-config-0.29.2.tar.gz</code></li>\n<li>下载好之后,通过<code>FileZilla</code>等工具传输到FTP服务器</li>\n<li>在容器内<code>cd</code>到压缩包位置</li>\n<li><code>tar -xf pkg-config-0.29.2.tar.gz</code></li>\n<li><code>cd pkg-config-0.29.2</code></li>\n<li><code>./configure --with-internal-glib</code>,注意,中间是一个空格,非常关键</li>\n<li><code>make &amp;&amp; make install</code><br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png\" alt=\"\"></li>\n</ul>\n<p>再次<code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>算了，还是安装一下cudnn吧</p>\n<h2 id=\"安装-cudnn7-0\"><a href=\"#安装-cudnn7-0\" class=\"headerlink\" title=\"安装 cudnn7.0\"></a>安装 cudnn7.0</h2><ul>\n<li><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\" rel=\"external nofollow\" target=\"_blank\">https://developer.nvidia.com/rdp/cudnn-archive</a> 下载cuDNN Libraries for Linux,不要下载 Power 8</li>\n<li>把下载好的包上传到FTP服务器</li>\n<li><code>cd</code>到包位置</li>\n<li><code>cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>tar -xvf cudnn-9.0-linux-x64-v7.tgz</code></li>\n<li><code>cp include/* /usr/local/cuda-9.0/include</code></li>\n<li><code>cp lib64/* /usr/local/cuda-9.0/lib64</code></li>\n<li><code>chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*</code></li>\n<li><code>export PATH=/usr/local/cuda-9.0/bin:$PATH</code></li>\n<li><code>cd</code>到<code>/usr/local/cuda-9.0/lib64</code></li>\n<li><code>nano ~/.bashrc</code>,关联环境变量</li>\n<li>在最后一行加入<code>export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH</code></li>\n<li><code>source ~/.bashrc</code></li>\n<li><code>ldconfig -v</code></li>\n<li>使用<code>cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2</code> 查看cudnn版本<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"安装-OpenCV\"><a href=\"#安装-OpenCV\" class=\"headerlink\" title=\"安装 OpenCV\"></a>安装 OpenCV</h2><ul>\n<li>使用<code>pkg-config opencv --modversion</code>查看</li>\n<li>发现已经有OpenCV<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"安装-OpenBLAS\"><a href=\"#安装-OpenBLAS\" class=\"headerlink\" title=\"安装 OpenBLAS\"></a>安装 OpenBLAS</h2><ul>\n<li><code>apt-get install libopenblas-dev</code></li>\n</ul>\n<h2 id=\"编译-Mxnet\"><a href=\"#编译-Mxnet\" class=\"headerlink\" title=\"编译 Mxnet\"></a>编译 Mxnet</h2><p><code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png\" alt=\"\"></p>\n<p><strong>心好累,总共make了将近两个半小时</strong></p>\n<p>编译<code>c++</code>文件<code>bash scripts/compile.sh</code><br>这一步一定要在<code>/SNIPER/</code>文件夹下,不然贼坑,绝对不要<code>cd</code>到<code>/SNIPER/scripts</code>文件夹下再<code>bash compile.sh</code>,因为代码内有<code>cd lib/nms</code>等,如果不在<code>/SNIPER</code>文件夹下,会找不到文件</p>\n<p>如果出现<code>syntax error near unexpected token</code>$’\\r’’<code>错误,可以使用</code>sed<code>命令将</code>\\r<code>去掉,或者是在[Github](https://github.com/mahyarnajibi/SNIPER/blob/master/scripts/compile.sh)上将代码复制,使用</code>nano<code>编辑然后粘贴\n![](./create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png)\n可以使用</code>cat -v [filename]<code>查看\n![]./create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png)\n以</code>^M<code>结尾的代表你所处理的文件换行符是dos格式的</code>“\\r\\n”`</p>\n<p>我选择第二种笨方法,因为涉及的代码并不多</p>\n<p>执行结果:<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png\" alt=\"\"></p>\n<h2 id=\"安装-dos2unix\"><a href=\"#安装-dos2unix\" class=\"headerlink\" title=\"安装 dos2unix\"></a>安装 dos2unix</h2><p>由于发现这种简单的复制粘贴方式并不能很好的解决,所以查了一些<a href=\"https://blog.csdn.net/lovelovelovelovelo/article/details/79239068\" rel=\"external nofollow\" target=\"_blank\">相关资料</a><br>选择使用<code>dos2unix</code>来转换</p>\n<ul>\n<li><code>apt-get install dos2unix</code></li>\n<li><code>dos2unix [filename]</code></li>\n</ul>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png\" alt=\"\"><br>问题解决啦</p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>在<code>/SNIPER/</code>文件夹下<code>pip install -r requirements.txt</code><br>一定要确保镜像内可以联网</p>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png\" alt=\"\"></p>\n<h2 id=\"测试Demo\"><a href=\"#测试Demo\" class=\"headerlink\" title=\"测试Demo\"></a>测试Demo</h2><ul>\n<li><code>bash download_sniper_detector.sh</code>,download_sniper_detector.sh<br>文件在<code>/SNIPER/scripts</code>文件夹下<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png\" alt=\"\"></li>\n<li><code>cd .. &amp;&amp; python demo.py</code><br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png\" alt=\"\"></li>\n</ul>\n<p><strong>运行成功!!!</strong></p>\n<h1 id=\"三-生成镜像\"><a href=\"#三-生成镜像\" class=\"headerlink\" title=\"三 生成镜像\"></a>三 生成镜像</h1><ul>\n<li>使用<code>exit</code>退出容器</li>\n<li>使用<code>docker ps -a</code>查看容器ID</li>\n<li>使用<code>docker stop [ID]</code>停止容器</li>\n<li>使用<code>docker commit -a &quot;作者信息&quot; -m &quot;附带信息&quot; [ID] [name]:[tag]</code>生成镜像,会返回一个<code>sha256</code>开头的长ID,这个就是生成的镜像ID</li>\n<li>使用<code>docker images</code>查看生成的镜像</li>\n<li>如果需要的话,使用<code>docker push [name]:[tag]</code>将刚刚生成的镜像推送到云上</li>\n</ul>\n<h1 id=\"四-压缩镜像\"><a href=\"#四-压缩镜像\" class=\"headerlink\" title=\"四 压缩镜像\"></a>四 压缩镜像</h1><p><strong>压缩镜像非常麻烦,但是也是有方法的,目前大概三种方法</strong></p>\n<ol>\n<li>使用<code>Dockerfile</code>生成镜像</li>\n<li>这种方法需要让容器在运行状态,使用<code>docker export [ID] | docker import - [name]:[tag]</code>导出容器快照,并从快照生成镜像,这种方式可以大大压缩镜像,但是缺点是有可能会使得镜像中的环境变量、开放端口、默认进入命令改变或消失.使用这种方式时,最好在生成镜像之后,创建一个<code>Dockerfile</code>文件,<code>From</code>这个镜像,并添加端口和命令入口</li>\n<li>使用<code>docker-squash</code>压缩镜像,这个方法适用于Linux和Mac系统</li>\n</ol>\n<p>目前可以运行的镜像是13.6G<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png\" alt=\"\"><br><code>hub.hoc.ccshu.net/wjs/sniper:v1.1</code><br>现在要对它进行压缩</p>\n<h2 id=\"第一步-移除镜像内的SNIPER文件夹-把其放到FTP服务器上去\"><a href=\"#第一步-移除镜像内的SNIPER文件夹-把其放到FTP服务器上去\" class=\"headerlink\" title=\"第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去\"></a>第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去</h2><ul>\n<li>开启一个容器<code>docker run -itd --name [name] [id]</code></li>\n<li>复制容器内文件到本地<code>docker cp [长ID]:[容器内路径] [本地路径]</code>,将放置在本地的文件夹上传至FTP服务器</li>\n<li>进入容器<code>docker exec -it [name] /bin/bash</code></li>\n<li>删除容器内文件夹<code>/SNIPER/</code>,使用<code>rm -rf SNIPER</code>,<strong>一定要小心使用</strong></li>\n<li>退出容器<code>exit</code></li>\n</ul>\n<h2 id=\"第二步-压缩镜像\"><a href=\"#第二步-压缩镜像\" class=\"headerlink\" title=\"第二步,压缩镜像\"></a>第二步,压缩镜像</h2><p>压缩容器<br><code>docker export [ID] | docker import - [name]:[tag]</code></p>\n<p>可以看到,镜像体积少了大约2个G<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png\" alt=\"\"></p>\n<p>由于使用这种方法会使得镜像丢失部分信息,所以,创建一个新的<code>Dockerfile</code>,在其中添加缺失的信息</p>\n<h2 id=\"第三步-完善镜像\"><a href=\"#第三步-完善镜像\" class=\"headerlink\" title=\"第三步,完善镜像\"></a>第三步,完善镜像</h2><p>在任意位置新建<code>Dockerfile</code><br>输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM [name]:[tag]</span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png\" alt=\"\"></p>\n<p>然后<code>docker build -t [name]:[tag] .</code>,不要忘了最后的<code>.</code></p>\n<h2 id=\"第四步-Push\"><a href=\"#第四步-Push\" class=\"headerlink\" title=\"第四步 Push\"></a>第四步 Push</h2><p><code>docker push [name]:[tag]</code></p>\n<p>至此,所有配置以及完成<br>镜像在<code>hoc.hoc.ccshu.net</code>的私有仓库里<br>SNIPER文件夹放置在机器学习平台服务器<code>mount</code>的目录里</p>\n<h1 id=\"五-测试\"><a href=\"#五-测试\" class=\"headerlink\" title=\"五 测试\"></a>五 测试</h1><ul>\n<li><p>在平台上创建容器<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png\" alt=\"\"></p>\n</li>\n<li><p>耐心等待创建完成<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png\" alt=\"\"></p>\n</li>\n<li><p>创建成功<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png\" alt=\"\"></p>\n</li>\n<li><p>测试结果<br><img src=\"./create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png\" alt=\"\"><br><strong>测试失败</strong></p>\n</li>\n</ul>\n<p><strong>但是,使用未压缩的镜像测试成功</strong></p>"},{"title":"动态规划 Dynamic Programming","copyright":true,"top":1,"date":"2019-05-12T12:16:22.000Z","mathjax":true,"keywords":null,"description":null,"_content":"\n本文介绍了强化学习问题中最简单基本的算法——动态规划（Dynamic Programming），介绍了贝尔曼方程在该算法中的应用。\n\n<!--more-->\n\n# DP的基本概念\n\n> 动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。1957年出版了他的名著《Dynamic Programming》，这是该领域的第一本著作。——[百度百科]([https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/529408?fr=aladdin](https://baike.baidu.com/item/动态规划/529408?fr=aladdin))\n\n动态规划-DP算法指的不是单一一个算法，而是**一系列可以在给定满足MDP的完全可知环境模型中计算出最优策略的算法**。\n\nDP的特点：\n\n- Model-Based\n- Value-Based\n- Off-Policy(这个比较牵强，因为DP不涉及采样、预测，完全靠planning)\n\nDP具有很重要的理论基础作用，但是在现在的强化学习问题中，DP并不常使用，主要原因有二：\n\n- 需要完全可知的模型，状态空间、动作空间离散，状态转移、奖励函数可知且确定\n- 计算量很大(每次更新都需要完全规划所有可能性)\n\n在一些表格型的问题中，如完全可知的迷宫，可以使用DP，但是要解决人类现实世界极其复杂的问题、任务，DP可能就有些力不从心啦。\n\n其实，所有的强化学习算法都可以被认为是在**不完全可知的环境**中使用**少量计算**得到如DP效果一样的策略（最优策略）。\n\n# 算法\n\n先回顾一下之前提到的贝尔曼方程。\n\n贝尔曼期望方程：\n$$\nv_{\\pi}(s) =\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n$$\n\n$$\nq_{\\pi}(s,a) =\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n$$\n\n贝尔曼最优方程：\n$$\nv_{*}(s) =\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]\n$$\n\n$$\nq_{*}(s,a) =\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\n$$\n\n为什么要再次提到贝尔曼方程呢？因为动态规划算法中的策略迭代、值迭代就是将贝尔曼方程给结合了起来。\n\n回顾一下在[价值与贝尔曼方差](./价值与贝尔曼方程.html)最后的例子中迭代计算$V(S)$和$Q(S,A)$，遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$。在一个简单的场景下循环迭代至收敛就需要很大的计算量，如果在复杂场景中(还是完全可知的)迭代计算可想有多费时费力，动态规划DP下的Policy Iteration和Value Iteration减轻了计算的负担，同时又不影响收敛性。\n\n引用《Reinfocement Learning : An Introduction》中的一个网格世界的例子：\n\n![](./dynamic-programming/gridworld.png)\n\n在这个例子中，有1-14个非终态以及两个终态(左上角、右下角)，动作空间为上下左右四种，在边缘位置的状态，例如$S=1$，可选的动作只有左右下三种，且等概率选择每种动作，每进行一次移动，就给予-1的奖励值。智能体需要尽快的到达网格世界的出口-终态，以获得尽量少的负奖励(即累计奖励最大)。\n\n如果按照**先遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$**的方式计算，值函数的表格将会如下图所示：\n\n![](./dynamic-programming/iteration.png)\n\n左边展示的是进行$k$次迭代，使值函数表格可以收敛，右边表示在每次迭代中，取$a=argmax_{a}q(s,a)$的策略。\n\n可以发现，这样迭代$V(S)$至收敛有两个浪费算力的地方：\n\n1. 选择动作的概率完全按照环境设置，导致计算状态$s$的值函数时，最差的动作$a$所带来的影响也被计算在其中，但其实真正执行的时候，永远不会执行该动作。\n2. $k=3$与$k=10$时的策略表示一样，也就意味着，不必等到$V(S)$迭代至完全收敛就有可能可以获得最优策略，那么后续迭代完全没有用处，造成了资源浪费。\n\n策略迭代、值迭代的思想都是贪心策略，但策略迭代针对问题1通过**剪裁可选动作**的方式进行了优化，值迭代针对问题2通过**取最大动作值函数**的方式进行了优化。\n\n## 策略迭代 Policy Iteration\n\n动作是通过策略产生的，因此势必需要对初始策略（GridWorld中的完全随机策略）进行替换，以达到更改动作选取概率的目的。\n\n既然要在不同的阶段更改动作选择的概率，那么要进行多次策略的更改，随之而来的问题就是：\n\n1. 值函数迭代更新到什么情况下时，开始更新策略\n2. 如何更新策略？\n\n针对第一个问题，我们使用**策略评估Policy Evaluation**的方式来解决，针对第二个问题，我们使用**策略提升Policy Improvation**的方式来解决，最终当新策略与旧策略相同时，终止迭代，得到最优策略。\n$$\n\\pi_{0} \\xrightarrow{E} v_{\\pi_{0}} \\xrightarrow{I} \\pi_{1} \\xrightarrow{E} v_{\\pi_{1}} \\xrightarrow{I} \\pi_{2} \\xrightarrow{E} ... \\xrightarrow{I} \\pi_{\\ast} \\xrightarrow{E} v_{\\pi_{\\ast}}\n$$\n\n### 伪代码\n\n![](./dynamic-programming/pi.png)\n\n### 策略评估 Policy Evaluation\n\n问题：值函数迭代更新到什么情况下时，开始更新策略\n\n答：设置更新幅度阈值$\\theta$，当sweep(横扫)一遍状态空间计算$V(S)$时，与上次更新时的$V(S)$相比较，如果最大的更新幅度小于阈值$\\theta$，即$\\Delta \\lt \\theta$，则认为策略评估已经完成，开始进行策略更新\n\n特点：使用了贝尔曼期望方程-$v_{\\pi}(s)$\n\n*注：策略评估指的不是评估一个策略的好坏，而是在当前策略下评估所有的状态值，使状态值表格近似收敛。*\n\n### 策略提升 Policy Improvement\n\n问题：如何更新策略？\n\n答：根据策略评估步骤得到的值函数$V(S)$，计算$Q(S,A)$表格，选取每个状态下使动作值函数最大的动作作为新的动作集，每个动作的选择概率相同，接着进行策略评估。\n\n特点：使用了贝尔曼期望方程-$q_{\\pi}(s,a)$\n\n## 值迭代 Value Iteration\n\n策略迭代的一个缺点是在得到最优策略$\\pi_{\\ast}$之前，需要多次更新策略，每次更新策略都会引起可选取动作的改变，这会引起在更新完策略后的前几次策略评估中值函数偏差比较大，导致在策略评估过程中需要花费大量的迭代来减小更新幅度$\\Delta$，因此需要多次sweep(横扫)$V(S)$来迭代计算。\n\n值迭代的思想是：**能不能通过早停的方式，在不更改策略的情况下，直接一次得到最优策略？**\n\n值迭代运用了策略评估、策略迭代的思想，并将它们融合在一起，即不更新策略，直接选择动作值函数$q(s,a)$最大的动作作为状态值$v(s)$，直接迭代出**近似最优**（早停，$\\Delta \\lt \\theta$即可）状态价值函数$V_{\\ast}(S)$，使用贪心策略进而得到最优策略$\\pi_{\\ast}$。\n\n特点：使用了贝尔曼最优方程-$v_{\\ast}(s)，q_{\\ast}(s,a)$。\n\n### 伪代码\n\n![](./dynamic-programming/vi.png)\n\n## PI与VI的比较\n\n![](./dynamic-programming/pivsvi.png)\n\n相同点：\n\n- 在$0 \\leq \\gamma \\lt 1$，有限MDPs环境中，两种方式都可以收敛到最优策略$\\pi_{\\ast}$\n- 都使用了贝尔曼方程进行状态值函数的迭代\n\n不同点：\n\n1. 收敛方式\n   - 策略迭代PI包括策略评估Policy Evaluation和策略提升Policy Improvement，这两部循环迭代至策略收敛\n   - 值迭代VI包括找到最优状态值函数和一步提取策略，这两步不需要循环迭代，而是根据最优值函数直接得到最优策略\n2. 动作改变方式\n   - 策略迭代PI获得新策略$\\pi_{new}$后，**更改每个状态的可选动作集**，多次横扫（遍历）$V(S)$\n   - 值迭代VI过程中不产生策略，不更改每个状态的可选动作集，但是**只取每个状态下动作值函数最大的动作作为状态值**，一次横扫（遍历）$V(S)$。（这里需要解释一下，虽然循环是多次遍历，但是因为max操作，每次遍历每个状态所选取的动作不一定一样，虽然策略一直是随机策略，没有产生新策略，但是计算过程没有遍历到所有动作，可以隐含的看作是一个新策略，因此每次遍历时这个“隐策略”都会改变，所以称为一次遍历。）\n3. 计算方式\n   - 策略迭代PI使用贝尔曼期望方程\n   - 值迭代VI使用贝尔曼最优方程\n4. Policy方式\n   - 策略迭代PI是On-Policy\n   - 值迭代VI是Off-Policy\n5. 稳定性检查\n   - 策略迭代PI中更新策略时进行了策略稳定性检查，判断是否收敛\n   - 值迭代VI获得新策略$\\pi$时没有进行策略稳定性检查\n\n至于策略迭代PI与值迭代VI的收敛速度，**通常情况**下，PI的迭代次数更少，VI的运行时间更少。\n\n> [What is the difference between value iteration and policy iteration?](https://stackoverflow.com/a/42493295/11483803)\n>\n> [《Reinforcement Learning : An Introduction 2nd Edition》p77](http://incompleteideas.net/book/RLbook2018.pdf)\n\n","source":"_posts/dynamic-programming.md","raw":"---\ntitle: 动态规划 Dynamic Programming\ncopyright: true\ntop: 1\ndate: 2019-05-12 20:16:22\nmathjax: true\nkeywords: \ndescription: \ncategories: ReinforcementLearning\ntags:\n- rl\n---\n\n本文介绍了强化学习问题中最简单基本的算法——动态规划（Dynamic Programming），介绍了贝尔曼方程在该算法中的应用。\n\n<!--more-->\n\n# DP的基本概念\n\n> 动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。1957年出版了他的名著《Dynamic Programming》，这是该领域的第一本著作。——[百度百科]([https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/529408?fr=aladdin](https://baike.baidu.com/item/动态规划/529408?fr=aladdin))\n\n动态规划-DP算法指的不是单一一个算法，而是**一系列可以在给定满足MDP的完全可知环境模型中计算出最优策略的算法**。\n\nDP的特点：\n\n- Model-Based\n- Value-Based\n- Off-Policy(这个比较牵强，因为DP不涉及采样、预测，完全靠planning)\n\nDP具有很重要的理论基础作用，但是在现在的强化学习问题中，DP并不常使用，主要原因有二：\n\n- 需要完全可知的模型，状态空间、动作空间离散，状态转移、奖励函数可知且确定\n- 计算量很大(每次更新都需要完全规划所有可能性)\n\n在一些表格型的问题中，如完全可知的迷宫，可以使用DP，但是要解决人类现实世界极其复杂的问题、任务，DP可能就有些力不从心啦。\n\n其实，所有的强化学习算法都可以被认为是在**不完全可知的环境**中使用**少量计算**得到如DP效果一样的策略（最优策略）。\n\n# 算法\n\n先回顾一下之前提到的贝尔曼方程。\n\n贝尔曼期望方程：\n$$\nv_{\\pi}(s) =\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n$$\n\n$$\nq_{\\pi}(s,a) =\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n$$\n\n贝尔曼最优方程：\n$$\nv_{*}(s) =\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]\n$$\n\n$$\nq_{*}(s,a) =\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\n$$\n\n为什么要再次提到贝尔曼方程呢？因为动态规划算法中的策略迭代、值迭代就是将贝尔曼方程给结合了起来。\n\n回顾一下在[价值与贝尔曼方差](./价值与贝尔曼方程.html)最后的例子中迭代计算$V(S)$和$Q(S,A)$，遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$。在一个简单的场景下循环迭代至收敛就需要很大的计算量，如果在复杂场景中(还是完全可知的)迭代计算可想有多费时费力，动态规划DP下的Policy Iteration和Value Iteration减轻了计算的负担，同时又不影响收敛性。\n\n引用《Reinfocement Learning : An Introduction》中的一个网格世界的例子：\n\n![](./dynamic-programming/gridworld.png)\n\n在这个例子中，有1-14个非终态以及两个终态(左上角、右下角)，动作空间为上下左右四种，在边缘位置的状态，例如$S=1$，可选的动作只有左右下三种，且等概率选择每种动作，每进行一次移动，就给予-1的奖励值。智能体需要尽快的到达网格世界的出口-终态，以获得尽量少的负奖励(即累计奖励最大)。\n\n如果按照**先遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$**的方式计算，值函数的表格将会如下图所示：\n\n![](./dynamic-programming/iteration.png)\n\n左边展示的是进行$k$次迭代，使值函数表格可以收敛，右边表示在每次迭代中，取$a=argmax_{a}q(s,a)$的策略。\n\n可以发现，这样迭代$V(S)$至收敛有两个浪费算力的地方：\n\n1. 选择动作的概率完全按照环境设置，导致计算状态$s$的值函数时，最差的动作$a$所带来的影响也被计算在其中，但其实真正执行的时候，永远不会执行该动作。\n2. $k=3$与$k=10$时的策略表示一样，也就意味着，不必等到$V(S)$迭代至完全收敛就有可能可以获得最优策略，那么后续迭代完全没有用处，造成了资源浪费。\n\n策略迭代、值迭代的思想都是贪心策略，但策略迭代针对问题1通过**剪裁可选动作**的方式进行了优化，值迭代针对问题2通过**取最大动作值函数**的方式进行了优化。\n\n## 策略迭代 Policy Iteration\n\n动作是通过策略产生的，因此势必需要对初始策略（GridWorld中的完全随机策略）进行替换，以达到更改动作选取概率的目的。\n\n既然要在不同的阶段更改动作选择的概率，那么要进行多次策略的更改，随之而来的问题就是：\n\n1. 值函数迭代更新到什么情况下时，开始更新策略\n2. 如何更新策略？\n\n针对第一个问题，我们使用**策略评估Policy Evaluation**的方式来解决，针对第二个问题，我们使用**策略提升Policy Improvation**的方式来解决，最终当新策略与旧策略相同时，终止迭代，得到最优策略。\n$$\n\\pi_{0} \\xrightarrow{E} v_{\\pi_{0}} \\xrightarrow{I} \\pi_{1} \\xrightarrow{E} v_{\\pi_{1}} \\xrightarrow{I} \\pi_{2} \\xrightarrow{E} ... \\xrightarrow{I} \\pi_{\\ast} \\xrightarrow{E} v_{\\pi_{\\ast}}\n$$\n\n### 伪代码\n\n![](./dynamic-programming/pi.png)\n\n### 策略评估 Policy Evaluation\n\n问题：值函数迭代更新到什么情况下时，开始更新策略\n\n答：设置更新幅度阈值$\\theta$，当sweep(横扫)一遍状态空间计算$V(S)$时，与上次更新时的$V(S)$相比较，如果最大的更新幅度小于阈值$\\theta$，即$\\Delta \\lt \\theta$，则认为策略评估已经完成，开始进行策略更新\n\n特点：使用了贝尔曼期望方程-$v_{\\pi}(s)$\n\n*注：策略评估指的不是评估一个策略的好坏，而是在当前策略下评估所有的状态值，使状态值表格近似收敛。*\n\n### 策略提升 Policy Improvement\n\n问题：如何更新策略？\n\n答：根据策略评估步骤得到的值函数$V(S)$，计算$Q(S,A)$表格，选取每个状态下使动作值函数最大的动作作为新的动作集，每个动作的选择概率相同，接着进行策略评估。\n\n特点：使用了贝尔曼期望方程-$q_{\\pi}(s,a)$\n\n## 值迭代 Value Iteration\n\n策略迭代的一个缺点是在得到最优策略$\\pi_{\\ast}$之前，需要多次更新策略，每次更新策略都会引起可选取动作的改变，这会引起在更新完策略后的前几次策略评估中值函数偏差比较大，导致在策略评估过程中需要花费大量的迭代来减小更新幅度$\\Delta$，因此需要多次sweep(横扫)$V(S)$来迭代计算。\n\n值迭代的思想是：**能不能通过早停的方式，在不更改策略的情况下，直接一次得到最优策略？**\n\n值迭代运用了策略评估、策略迭代的思想，并将它们融合在一起，即不更新策略，直接选择动作值函数$q(s,a)$最大的动作作为状态值$v(s)$，直接迭代出**近似最优**（早停，$\\Delta \\lt \\theta$即可）状态价值函数$V_{\\ast}(S)$，使用贪心策略进而得到最优策略$\\pi_{\\ast}$。\n\n特点：使用了贝尔曼最优方程-$v_{\\ast}(s)，q_{\\ast}(s,a)$。\n\n### 伪代码\n\n![](./dynamic-programming/vi.png)\n\n## PI与VI的比较\n\n![](./dynamic-programming/pivsvi.png)\n\n相同点：\n\n- 在$0 \\leq \\gamma \\lt 1$，有限MDPs环境中，两种方式都可以收敛到最优策略$\\pi_{\\ast}$\n- 都使用了贝尔曼方程进行状态值函数的迭代\n\n不同点：\n\n1. 收敛方式\n   - 策略迭代PI包括策略评估Policy Evaluation和策略提升Policy Improvement，这两部循环迭代至策略收敛\n   - 值迭代VI包括找到最优状态值函数和一步提取策略，这两步不需要循环迭代，而是根据最优值函数直接得到最优策略\n2. 动作改变方式\n   - 策略迭代PI获得新策略$\\pi_{new}$后，**更改每个状态的可选动作集**，多次横扫（遍历）$V(S)$\n   - 值迭代VI过程中不产生策略，不更改每个状态的可选动作集，但是**只取每个状态下动作值函数最大的动作作为状态值**，一次横扫（遍历）$V(S)$。（这里需要解释一下，虽然循环是多次遍历，但是因为max操作，每次遍历每个状态所选取的动作不一定一样，虽然策略一直是随机策略，没有产生新策略，但是计算过程没有遍历到所有动作，可以隐含的看作是一个新策略，因此每次遍历时这个“隐策略”都会改变，所以称为一次遍历。）\n3. 计算方式\n   - 策略迭代PI使用贝尔曼期望方程\n   - 值迭代VI使用贝尔曼最优方程\n4. Policy方式\n   - 策略迭代PI是On-Policy\n   - 值迭代VI是Off-Policy\n5. 稳定性检查\n   - 策略迭代PI中更新策略时进行了策略稳定性检查，判断是否收敛\n   - 值迭代VI获得新策略$\\pi$时没有进行策略稳定性检查\n\n至于策略迭代PI与值迭代VI的收敛速度，**通常情况**下，PI的迭代次数更少，VI的运行时间更少。\n\n> [What is the difference between value iteration and policy iteration?](https://stackoverflow.com/a/42493295/11483803)\n>\n> [《Reinforcement Learning : An Introduction 2nd Edition》p77](http://incompleteideas.net/book/RLbook2018.pdf)\n\n","slug":"dynamic-programming","published":1,"updated":"2019-05-13T12:42:28.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaabf0029m8ve09y0kq4w","content":"<p>本文介绍了强化学习问题中最简单基本的算法——动态规划（Dynamic Programming），介绍了贝尔曼方程在该算法中的应用。</p>\n<a id=\"more\"></a>\n<h1 id=\"DP的基本概念\"><a href=\"#DP的基本概念\" class=\"headerlink\" title=\"DP的基本概念\"></a>DP的基本概念</h1><blockquote>\n<p>动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。1957年出版了他的名著《Dynamic Programming》，这是该领域的第一本著作。——<a href=\"[https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/529408?fr=aladdin](https://baike.baidu.com/item/动态规划/529408?fr=aladdin\">百度百科</a>)</p>\n</blockquote>\n<p>动态规划-DP算法指的不是单一一个算法，而是<strong>一系列可以在给定满足MDP的完全可知环境模型中计算出最优策略的算法</strong>。</p>\n<p>DP的特点：</p>\n<ul>\n<li>Model-Based</li>\n<li>Value-Based</li>\n<li>Off-Policy(这个比较牵强，因为DP不涉及采样、预测，完全靠planning)</li>\n</ul>\n<p>DP具有很重要的理论基础作用，但是在现在的强化学习问题中，DP并不常使用，主要原因有二：</p>\n<ul>\n<li>需要完全可知的模型，状态空间、动作空间离散，状态转移、奖励函数可知且确定</li>\n<li>计算量很大(每次更新都需要完全规划所有可能性)</li>\n</ul>\n<p>在一些表格型的问题中，如完全可知的迷宫，可以使用DP，但是要解决人类现实世界极其复杂的问题、任务，DP可能就有些力不从心啦。</p>\n<p>其实，所有的强化学习算法都可以被认为是在<strong>不完全可知的环境</strong>中使用<strong>少量计算</strong>得到如DP效果一样的策略（最优策略）。</p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><p>先回顾一下之前提到的贝尔曼方程。</p>\n<p>贝尔曼期望方程：</p>\n<script type=\"math/tex; mode=display\">\nv_{\\pi}(s) =\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]</script><script type=\"math/tex; mode=display\">\nq_{\\pi}(s,a) =\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]</script><p>贝尔曼最优方程：</p>\n<script type=\"math/tex; mode=display\">\nv_{*}(s) =\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]</script><script type=\"math/tex; mode=display\">\nq_{*}(s,a) =\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]</script><p>为什么要再次提到贝尔曼方程呢？因为动态规划算法中的策略迭代、值迭代就是将贝尔曼方程给结合了起来。</p>\n<p>回顾一下在<a href=\"./价值与贝尔曼方程.html\">价值与贝尔曼方差</a>最后的例子中迭代计算$V(S)$和$Q(S,A)$，遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$。在一个简单的场景下循环迭代至收敛就需要很大的计算量，如果在复杂场景中(还是完全可知的)迭代计算可想有多费时费力，动态规划DP下的Policy Iteration和Value Iteration减轻了计算的负担，同时又不影响收敛性。</p>\n<p>引用《Reinfocement Learning : An Introduction》中的一个网格世界的例子：</p>\n<p><img src=\"./dynamic-programming/gridworld.png\" alt=\"\"></p>\n<p>在这个例子中，有1-14个非终态以及两个终态(左上角、右下角)，动作空间为上下左右四种，在边缘位置的状态，例如$S=1$，可选的动作只有左右下三种，且等概率选择每种动作，每进行一次移动，就给予-1的奖励值。智能体需要尽快的到达网格世界的出口-终态，以获得尽量少的负奖励(即累计奖励最大)。</p>\n<p>如果按照<strong>先遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$</strong>的方式计算，值函数的表格将会如下图所示：</p>\n<p><img src=\"./dynamic-programming/iteration.png\" alt=\"\"></p>\n<p>左边展示的是进行$k$次迭代，使值函数表格可以收敛，右边表示在每次迭代中，取$a=argmax_{a}q(s,a)$的策略。</p>\n<p>可以发现，这样迭代$V(S)$至收敛有两个浪费算力的地方：</p>\n<ol>\n<li>选择动作的概率完全按照环境设置，导致计算状态$s$的值函数时，最差的动作$a$所带来的影响也被计算在其中，但其实真正执行的时候，永远不会执行该动作。</li>\n<li>$k=3$与$k=10$时的策略表示一样，也就意味着，不必等到$V(S)$迭代至完全收敛就有可能可以获得最优策略，那么后续迭代完全没有用处，造成了资源浪费。</li>\n</ol>\n<p>策略迭代、值迭代的思想都是贪心策略，但策略迭代针对问题1通过<strong>剪裁可选动作</strong>的方式进行了优化，值迭代针对问题2通过<strong>取最大动作值函数</strong>的方式进行了优化。</p>\n<h2 id=\"策略迭代-Policy-Iteration\"><a href=\"#策略迭代-Policy-Iteration\" class=\"headerlink\" title=\"策略迭代 Policy Iteration\"></a>策略迭代 Policy Iteration</h2><p>动作是通过策略产生的，因此势必需要对初始策略（GridWorld中的完全随机策略）进行替换，以达到更改动作选取概率的目的。</p>\n<p>既然要在不同的阶段更改动作选择的概率，那么要进行多次策略的更改，随之而来的问题就是：</p>\n<ol>\n<li>值函数迭代更新到什么情况下时，开始更新策略</li>\n<li>如何更新策略？</li>\n</ol>\n<p>针对第一个问题，我们使用<strong>策略评估Policy Evaluation</strong>的方式来解决，针对第二个问题，我们使用<strong>策略提升Policy Improvation</strong>的方式来解决，最终当新策略与旧策略相同时，终止迭代，得到最优策略。</p>\n<script type=\"math/tex; mode=display\">\n\\pi_{0} \\xrightarrow{E} v_{\\pi_{0}} \\xrightarrow{I} \\pi_{1} \\xrightarrow{E} v_{\\pi_{1}} \\xrightarrow{I} \\pi_{2} \\xrightarrow{E} ... \\xrightarrow{I} \\pi_{\\ast} \\xrightarrow{E} v_{\\pi_{\\ast}}</script><h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p><img src=\"./dynamic-programming/pi.png\" alt=\"\"></p>\n<h3 id=\"策略评估-Policy-Evaluation\"><a href=\"#策略评估-Policy-Evaluation\" class=\"headerlink\" title=\"策略评估 Policy Evaluation\"></a>策略评估 Policy Evaluation</h3><p>问题：值函数迭代更新到什么情况下时，开始更新策略</p>\n<p>答：设置更新幅度阈值$\\theta$，当sweep(横扫)一遍状态空间计算$V(S)$时，与上次更新时的$V(S)$相比较，如果最大的更新幅度小于阈值$\\theta$，即$\\Delta \\lt \\theta$，则认为策略评估已经完成，开始进行策略更新</p>\n<p>特点：使用了贝尔曼期望方程-$v_{\\pi}(s)$</p>\n<p><em>注：策略评估指的不是评估一个策略的好坏，而是在当前策略下评估所有的状态值，使状态值表格近似收敛。</em></p>\n<h3 id=\"策略提升-Policy-Improvement\"><a href=\"#策略提升-Policy-Improvement\" class=\"headerlink\" title=\"策略提升 Policy Improvement\"></a>策略提升 Policy Improvement</h3><p>问题：如何更新策略？</p>\n<p>答：根据策略评估步骤得到的值函数$V(S)$，计算$Q(S,A)$表格，选取每个状态下使动作值函数最大的动作作为新的动作集，每个动作的选择概率相同，接着进行策略评估。</p>\n<p>特点：使用了贝尔曼期望方程-$q_{\\pi}(s,a)$</p>\n<h2 id=\"值迭代-Value-Iteration\"><a href=\"#值迭代-Value-Iteration\" class=\"headerlink\" title=\"值迭代 Value Iteration\"></a>值迭代 Value Iteration</h2><p>策略迭代的一个缺点是在得到最优策略$\\pi_{\\ast}$之前，需要多次更新策略，每次更新策略都会引起可选取动作的改变，这会引起在更新完策略后的前几次策略评估中值函数偏差比较大，导致在策略评估过程中需要花费大量的迭代来减小更新幅度$\\Delta$，因此需要多次sweep(横扫)$V(S)$来迭代计算。</p>\n<p>值迭代的思想是：<strong>能不能通过早停的方式，在不更改策略的情况下，直接一次得到最优策略？</strong></p>\n<p>值迭代运用了策略评估、策略迭代的思想，并将它们融合在一起，即不更新策略，直接选择动作值函数$q(s,a)$最大的动作作为状态值$v(s)$，直接迭代出<strong>近似最优</strong>（早停，$\\Delta \\lt \\theta$即可）状态价值函数$V_{\\ast}(S)$，使用贪心策略进而得到最优策略$\\pi_{\\ast}$。</p>\n<p>特点：使用了贝尔曼最优方程-$v_{\\ast}(s)，q_{\\ast}(s,a)$。</p>\n<h3 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p><img src=\"./dynamic-programming/vi.png\" alt=\"\"></p>\n<h2 id=\"PI与VI的比较\"><a href=\"#PI与VI的比较\" class=\"headerlink\" title=\"PI与VI的比较\"></a>PI与VI的比较</h2><p><img src=\"./dynamic-programming/pivsvi.png\" alt=\"\"></p>\n<p>相同点：</p>\n<ul>\n<li>在$0 \\leq \\gamma \\lt 1$，有限MDPs环境中，两种方式都可以收敛到最优策略$\\pi_{\\ast}$</li>\n<li>都使用了贝尔曼方程进行状态值函数的迭代</li>\n</ul>\n<p>不同点：</p>\n<ol>\n<li>收敛方式<ul>\n<li>策略迭代PI包括策略评估Policy Evaluation和策略提升Policy Improvement，这两部循环迭代至策略收敛</li>\n<li>值迭代VI包括找到最优状态值函数和一步提取策略，这两步不需要循环迭代，而是根据最优值函数直接得到最优策略</li>\n</ul>\n</li>\n<li>动作改变方式<ul>\n<li>策略迭代PI获得新策略$\\pi_{new}$后，<strong>更改每个状态的可选动作集</strong>，多次横扫（遍历）$V(S)$</li>\n<li>值迭代VI过程中不产生策略，不更改每个状态的可选动作集，但是<strong>只取每个状态下动作值函数最大的动作作为状态值</strong>，一次横扫（遍历）$V(S)$。（这里需要解释一下，虽然循环是多次遍历，但是因为max操作，每次遍历每个状态所选取的动作不一定一样，虽然策略一直是随机策略，没有产生新策略，但是计算过程没有遍历到所有动作，可以隐含的看作是一个新策略，因此每次遍历时这个“隐策略”都会改变，所以称为一次遍历。）</li>\n</ul>\n</li>\n<li>计算方式<ul>\n<li>策略迭代PI使用贝尔曼期望方程</li>\n<li>值迭代VI使用贝尔曼最优方程</li>\n</ul>\n</li>\n<li>Policy方式<ul>\n<li>策略迭代PI是On-Policy</li>\n<li>值迭代VI是Off-Policy</li>\n</ul>\n</li>\n<li>稳定性检查<ul>\n<li>策略迭代PI中更新策略时进行了策略稳定性检查，判断是否收敛</li>\n<li>值迭代VI获得新策略$\\pi$时没有进行策略稳定性检查</li>\n</ul>\n</li>\n</ol>\n<p>至于策略迭代PI与值迭代VI的收敛速度，<strong>通常情况</strong>下，PI的迭代次数更少，VI的运行时间更少。</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/a/42493295/11483803\" rel=\"external nofollow\" target=\"_blank\">What is the difference between value iteration and policy iteration?</a></p>\n<p><a href=\"http://incompleteideas.net/book/RLbook2018.pdf\" rel=\"external nofollow\" target=\"_blank\">《Reinforcement Learning : An Introduction 2nd Edition》p77</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本文介绍了强化学习问题中最简单基本的算法——动态规划（Dynamic Programming），介绍了贝尔曼方程在该算法中的应用。</p>","more":"<h1 id=\"DP的基本概念\"><a href=\"#DP的基本概念\" class=\"headerlink\" title=\"DP的基本概念\"></a>DP的基本概念</h1><blockquote>\n<p>动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。1957年出版了他的名著《Dynamic Programming》，这是该领域的第一本著作。——<a href=\"[https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/529408?fr=aladdin](https://baike.baidu.com/item/动态规划/529408?fr=aladdin\">百度百科</a>)</p>\n</blockquote>\n<p>动态规划-DP算法指的不是单一一个算法，而是<strong>一系列可以在给定满足MDP的完全可知环境模型中计算出最优策略的算法</strong>。</p>\n<p>DP的特点：</p>\n<ul>\n<li>Model-Based</li>\n<li>Value-Based</li>\n<li>Off-Policy(这个比较牵强，因为DP不涉及采样、预测，完全靠planning)</li>\n</ul>\n<p>DP具有很重要的理论基础作用，但是在现在的强化学习问题中，DP并不常使用，主要原因有二：</p>\n<ul>\n<li>需要完全可知的模型，状态空间、动作空间离散，状态转移、奖励函数可知且确定</li>\n<li>计算量很大(每次更新都需要完全规划所有可能性)</li>\n</ul>\n<p>在一些表格型的问题中，如完全可知的迷宫，可以使用DP，但是要解决人类现实世界极其复杂的问题、任务，DP可能就有些力不从心啦。</p>\n<p>其实，所有的强化学习算法都可以被认为是在<strong>不完全可知的环境</strong>中使用<strong>少量计算</strong>得到如DP效果一样的策略（最优策略）。</p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><p>先回顾一下之前提到的贝尔曼方程。</p>\n<p>贝尔曼期望方程：</p>\n<script type=\"math/tex; mode=display\">\nv_{\\pi}(s) =\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]</script><script type=\"math/tex; mode=display\">\nq_{\\pi}(s,a) =\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]</script><p>贝尔曼最优方程：</p>\n<script type=\"math/tex; mode=display\">\nv_{*}(s) =\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]</script><script type=\"math/tex; mode=display\">\nq_{*}(s,a) =\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]</script><p>为什么要再次提到贝尔曼方程呢？因为动态规划算法中的策略迭代、值迭代就是将贝尔曼方程给结合了起来。</p>\n<p>回顾一下在<a href=\"./价值与贝尔曼方程.html\">价值与贝尔曼方差</a>最后的例子中迭代计算$V(S)$和$Q(S,A)$，遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$。在一个简单的场景下循环迭代至收敛就需要很大的计算量，如果在复杂场景中(还是完全可知的)迭代计算可想有多费时费力，动态规划DP下的Policy Iteration和Value Iteration减轻了计算的负担，同时又不影响收敛性。</p>\n<p>引用《Reinfocement Learning : An Introduction》中的一个网格世界的例子：</p>\n<p><img src=\"./dynamic-programming/gridworld.png\" alt=\"\"></p>\n<p>在这个例子中，有1-14个非终态以及两个终态(左上角、右下角)，动作空间为上下左右四种，在边缘位置的状态，例如$S=1$，可选的动作只有左右下三种，且等概率选择每种动作，每进行一次移动，就给予-1的奖励值。智能体需要尽快的到达网格世界的出口-终态，以获得尽量少的负奖励(即累计奖励最大)。</p>\n<p>如果按照<strong>先遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$</strong>的方式计算，值函数的表格将会如下图所示：</p>\n<p><img src=\"./dynamic-programming/iteration.png\" alt=\"\"></p>\n<p>左边展示的是进行$k$次迭代，使值函数表格可以收敛，右边表示在每次迭代中，取$a=argmax_{a}q(s,a)$的策略。</p>\n<p>可以发现，这样迭代$V(S)$至收敛有两个浪费算力的地方：</p>\n<ol>\n<li>选择动作的概率完全按照环境设置，导致计算状态$s$的值函数时，最差的动作$a$所带来的影响也被计算在其中，但其实真正执行的时候，永远不会执行该动作。</li>\n<li>$k=3$与$k=10$时的策略表示一样，也就意味着，不必等到$V(S)$迭代至完全收敛就有可能可以获得最优策略，那么后续迭代完全没有用处，造成了资源浪费。</li>\n</ol>\n<p>策略迭代、值迭代的思想都是贪心策略，但策略迭代针对问题1通过<strong>剪裁可选动作</strong>的方式进行了优化，值迭代针对问题2通过<strong>取最大动作值函数</strong>的方式进行了优化。</p>\n<h2 id=\"策略迭代-Policy-Iteration\"><a href=\"#策略迭代-Policy-Iteration\" class=\"headerlink\" title=\"策略迭代 Policy Iteration\"></a>策略迭代 Policy Iteration</h2><p>动作是通过策略产生的，因此势必需要对初始策略（GridWorld中的完全随机策略）进行替换，以达到更改动作选取概率的目的。</p>\n<p>既然要在不同的阶段更改动作选择的概率，那么要进行多次策略的更改，随之而来的问题就是：</p>\n<ol>\n<li>值函数迭代更新到什么情况下时，开始更新策略</li>\n<li>如何更新策略？</li>\n</ol>\n<p>针对第一个问题，我们使用<strong>策略评估Policy Evaluation</strong>的方式来解决，针对第二个问题，我们使用<strong>策略提升Policy Improvation</strong>的方式来解决，最终当新策略与旧策略相同时，终止迭代，得到最优策略。</p>\n<script type=\"math/tex; mode=display\">\n\\pi_{0} \\xrightarrow{E} v_{\\pi_{0}} \\xrightarrow{I} \\pi_{1} \\xrightarrow{E} v_{\\pi_{1}} \\xrightarrow{I} \\pi_{2} \\xrightarrow{E} ... \\xrightarrow{I} \\pi_{\\ast} \\xrightarrow{E} v_{\\pi_{\\ast}}</script><h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p><img src=\"./dynamic-programming/pi.png\" alt=\"\"></p>\n<h3 id=\"策略评估-Policy-Evaluation\"><a href=\"#策略评估-Policy-Evaluation\" class=\"headerlink\" title=\"策略评估 Policy Evaluation\"></a>策略评估 Policy Evaluation</h3><p>问题：值函数迭代更新到什么情况下时，开始更新策略</p>\n<p>答：设置更新幅度阈值$\\theta$，当sweep(横扫)一遍状态空间计算$V(S)$时，与上次更新时的$V(S)$相比较，如果最大的更新幅度小于阈值$\\theta$，即$\\Delta \\lt \\theta$，则认为策略评估已经完成，开始进行策略更新</p>\n<p>特点：使用了贝尔曼期望方程-$v_{\\pi}(s)$</p>\n<p><em>注：策略评估指的不是评估一个策略的好坏，而是在当前策略下评估所有的状态值，使状态值表格近似收敛。</em></p>\n<h3 id=\"策略提升-Policy-Improvement\"><a href=\"#策略提升-Policy-Improvement\" class=\"headerlink\" title=\"策略提升 Policy Improvement\"></a>策略提升 Policy Improvement</h3><p>问题：如何更新策略？</p>\n<p>答：根据策略评估步骤得到的值函数$V(S)$，计算$Q(S,A)$表格，选取每个状态下使动作值函数最大的动作作为新的动作集，每个动作的选择概率相同，接着进行策略评估。</p>\n<p>特点：使用了贝尔曼期望方程-$q_{\\pi}(s,a)$</p>\n<h2 id=\"值迭代-Value-Iteration\"><a href=\"#值迭代-Value-Iteration\" class=\"headerlink\" title=\"值迭代 Value Iteration\"></a>值迭代 Value Iteration</h2><p>策略迭代的一个缺点是在得到最优策略$\\pi_{\\ast}$之前，需要多次更新策略，每次更新策略都会引起可选取动作的改变，这会引起在更新完策略后的前几次策略评估中值函数偏差比较大，导致在策略评估过程中需要花费大量的迭代来减小更新幅度$\\Delta$，因此需要多次sweep(横扫)$V(S)$来迭代计算。</p>\n<p>值迭代的思想是：<strong>能不能通过早停的方式，在不更改策略的情况下，直接一次得到最优策略？</strong></p>\n<p>值迭代运用了策略评估、策略迭代的思想，并将它们融合在一起，即不更新策略，直接选择动作值函数$q(s,a)$最大的动作作为状态值$v(s)$，直接迭代出<strong>近似最优</strong>（早停，$\\Delta \\lt \\theta$即可）状态价值函数$V_{\\ast}(S)$，使用贪心策略进而得到最优策略$\\pi_{\\ast}$。</p>\n<p>特点：使用了贝尔曼最优方程-$v_{\\ast}(s)，q_{\\ast}(s,a)$。</p>\n<h3 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p><img src=\"./dynamic-programming/vi.png\" alt=\"\"></p>\n<h2 id=\"PI与VI的比较\"><a href=\"#PI与VI的比较\" class=\"headerlink\" title=\"PI与VI的比较\"></a>PI与VI的比较</h2><p><img src=\"./dynamic-programming/pivsvi.png\" alt=\"\"></p>\n<p>相同点：</p>\n<ul>\n<li>在$0 \\leq \\gamma \\lt 1$，有限MDPs环境中，两种方式都可以收敛到最优策略$\\pi_{\\ast}$</li>\n<li>都使用了贝尔曼方程进行状态值函数的迭代</li>\n</ul>\n<p>不同点：</p>\n<ol>\n<li>收敛方式<ul>\n<li>策略迭代PI包括策略评估Policy Evaluation和策略提升Policy Improvement，这两部循环迭代至策略收敛</li>\n<li>值迭代VI包括找到最优状态值函数和一步提取策略，这两步不需要循环迭代，而是根据最优值函数直接得到最优策略</li>\n</ul>\n</li>\n<li>动作改变方式<ul>\n<li>策略迭代PI获得新策略$\\pi_{new}$后，<strong>更改每个状态的可选动作集</strong>，多次横扫（遍历）$V(S)$</li>\n<li>值迭代VI过程中不产生策略，不更改每个状态的可选动作集，但是<strong>只取每个状态下动作值函数最大的动作作为状态值</strong>，一次横扫（遍历）$V(S)$。（这里需要解释一下，虽然循环是多次遍历，但是因为max操作，每次遍历每个状态所选取的动作不一定一样，虽然策略一直是随机策略，没有产生新策略，但是计算过程没有遍历到所有动作，可以隐含的看作是一个新策略，因此每次遍历时这个“隐策略”都会改变，所以称为一次遍历。）</li>\n</ul>\n</li>\n<li>计算方式<ul>\n<li>策略迭代PI使用贝尔曼期望方程</li>\n<li>值迭代VI使用贝尔曼最优方程</li>\n</ul>\n</li>\n<li>Policy方式<ul>\n<li>策略迭代PI是On-Policy</li>\n<li>值迭代VI是Off-Policy</li>\n</ul>\n</li>\n<li>稳定性检查<ul>\n<li>策略迭代PI中更新策略时进行了策略稳定性检查，判断是否收敛</li>\n<li>值迭代VI获得新策略$\\pi$时没有进行策略稳定性检查</li>\n</ul>\n</li>\n</ol>\n<p>至于策略迭代PI与值迭代VI的收敛速度，<strong>通常情况</strong>下，PI的迭代次数更少，VI的运行时间更少。</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/a/42493295/11483803\" rel=\"external nofollow\" target=\"_blank\">What is the difference between value iteration and policy iteration?</a></p>\n<p><a href=\"http://incompleteideas.net/book/RLbook2018.pdf\" rel=\"external nofollow\" target=\"_blank\">《Reinforcement Learning : An Introduction 2nd Edition》p77</a></p>\n</blockquote>"},{"title":"创建ML-Agents的Docker镜像","copyright":true,"top":1,"date":"2019-01-04T02:38:59.000Z","_content":"\n# 创建ML-Agents的Docker镜像\n\n<!--more-->\n\n## 前言\n\n  如果需要在镜像中使用GPU训练,可以将Nvidia的官方镜像作为基础镜像,`Dockerfile`如下:\n```\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nLABEL maintainer \"NVIDIA CORPORATION <cudatools@nvidia.com>\"\n\nENV NCCL_VERSION 2.3.7\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tapt-utils \\\n        cuda-libraries-$CUDA_PKG_VERSION \\\n        cuda-cublas-9-0=9.0.176.4-1 \\\n        libnccl2=$NCCL_VERSION-1+cuda9.0 && \\\n    apt-mark hold libnccl2 && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get install -y openssh-server\n\nRUN apt-get install -y nano\n\nRUN mkdir /var/run/sshd\n\nRUN echo \"root:1234\" | chpasswd\n\nRUN sed -i 's/prohibit-password/yes/g' /etc/ssh/sshd_config\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n\n## ML-Agents v0.6.0\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png)\n\n### 环境\n\n本机环境\n\n- ML-Agents 0.6.0\n- Windows 10 专业版\n- docker client version 18.09.0\n- docker server version 18.09.0\n\n平台\n- [机器学习平台](http://10.0.4.228)\n\n### 创建镜像\n\n1. 打开`~/ml-agents-0.6.0/`目录,看到有一个官方给定的`Dockerfile`\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png)\n2. 直接`Build`,在该目录下运行`docker build -t [name]:[tag] .`,一定要注意最后的`.`,很**重要**\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png)\n3. 新建一个`sources.list`文件,为镜像内换源,因为将来有可能需要在容器内安装某些包,有一些国外的资源往往会下载失败,所以需要**换源**\n- 新建一个`sources.list`\n- 用文本编辑器打开,写入以下内容\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png)\n```\n# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted\ndeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties\ndeb http://archive.canonical.com/ubuntu xenial partner\ndeb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse\n```\n- 保存退出\n4. 新建一个`DockerfilePlus`,在官方生成的基础镜像上安装一些可以在平台上运行的包,`openssh-server`,联网工具`net-tools`,心爱的`apt-file`等等\n- 新建一个`DockerfilePlus`\n- 用文本编辑器打开,输入以下内容\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png)\n```\nFROM hub.hoc.ccshu.net/wjs/mlunityv060:v0.1\n\nRUN cp /etc/apt/sources.list /etc/apt/sources.list.bak\nCOPY sources.list /etc/apt/sources.list\n\nENV PYTHONPATH /ml-agents:$PYTHONPATH\n\nRUN apt-get update && apt-get install -y \\\n        apt-file \\\n        nano \\\n        net-tools \\\n        iputils-ping \\\n        openssh-server \\\n        apt-utils \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && mkdir /var/run/sshd \\\n    && echo \"root:1234\" | chpasswd \\\n    && sed -i 's/prohibit-password/yes/g' /etc/ssh/sshd_config\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n5. 在`DockerfilePlus`所在文件夹下,执行`build -t [name]:[tag] -f DockerfilePlus .`\n\n**为了使用GPU.改写完的Dockerfile如下(不需要看):**\n```\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nLABEL maintainer \"Keavnn <https://stepneverstop.github.io>\"\n\nENV NCCL_VERSION 2.3.7\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tapt-utils \\\n        cuda-libraries-$CUDA_PKG_VERSION \\\n        cuda-cublas-9-0=9.0.176.4-1 \\\n        libnccl2=$NCCL_VERSION-1+cuda9.0 && \\\n    apt-mark hold libnccl2 && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# runtime dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tca-certificates \\\n\t\tlibexpat1 \\\n\t\tlibffi6 \\\n\t\tlibgdbm3 \\\n\t\tlibreadline6 \\\n\t\tlibsqlite3-0 \\\n\t\tlibssl1.0.0 \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\nENV PYTHON_VERSION 3.6.4\n\nRUN set -ex \\\n\t&& buildDeps=\" \\\n\t\tdpkg-dev \\\n\t\tgcc \\\n\t\tlibbz2-dev \\\n\t\tlibc6-dev \\\n\t\tlibexpat1-dev \\\n\t\tlibffi-dev \\\n\t\tlibgdbm-dev \\\n\t\tliblzma-dev \\\n\t\tlibncursesw5-dev \\\n\t\tlibreadline-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tmake \\\n\t\ttcl-dev \\\n\t\ttk-dev \\\n\t\twget \\\n\t\txz-utils \\\n\t\tzlib1g-dev \\\n# as of Stretch, \"gpg\" is no longer included by default\n\t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \\\n\t\" \\\n\t&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n\t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n\t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\t\\\n\t&& cd /usr/src/python \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-loadable-sqlite-extensions \\\n\t\t--enable-shared \\\n\t\t--with-system-expat \\\n\t\t--with-system-ffi \\\n\t\t--without-ensurepip \\\n\t&& make -j \"$(nproc)\" \\\n\t&& make install \\\n\t&& ldconfig \\\n\t\\\n\t&& apt-get purge -y --auto-remove $buildDeps \\\n\t\\\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& rm -rf /usr/src/python\n\n# make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n\t&& ln -s idle3 idle \\\n\t&& ln -s pydoc3 pydoc \\\n\t&& ln -s python3 python \\\n\t&& ln -s python3-config python-config\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 9.0.3\n\nRUN set -ex; \\\n\t\\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends wget; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n\t\\\n\tapt-get purge -y --auto-remove wget; \\\n\t\\\n\tpython get-pip.py \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t\"pip==$PYTHON_PIP_VERSION\" \\\n\t; \\\n\tpip --version; \\\n\t\\\n\tfind /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' +; \\\n\trm -f get-pip.py\n\n\nRUN apt-get update && apt-get -y upgrade\n\n# xvfb is used to do CPU based rendering of Unity\nRUN apt-get install -y xvfb\n\nCOPY ml-agents /ml-agents\nWORKDIR /ml-agents\nRUN pip install .\n\n# port 5005 is the port used in in Editor training.\nEXPOSE 5005\n\nRUN cp /etc/apt/sources.list /etc/apt/sources.list.bak\nCOPY sources.list /etc/apt/sources.list\n\nENV PYTHONPATH /ml-agents:$PYTHONPATH\n\nRUN apt-get update && apt-get install -y \\\n        apt-file \\\n        nano \\\n        net-tools \\\n        iputils-ping \\\n        openssh-server \\\n        apt-utils \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && mkdir /var/run/sshd \\\n    && echo \"root:1234\" | chpasswd \\\n    && sed -i 's/prohibit-password/yes/g' /etc/ssh/sshd_config\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n\n### PUSH镜像\n\n`docker push [name]:[tag]`\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png)\n\n### 测试镜像\n\n- 登录[机器学习平台](http://10.0.4.228),没有使用平台的可以在本地使用`docker run`直接开启容器\n- 先测试使用容器的方式\n  - 创建容器\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png)\n  将要运行和储存的文件夹放在数据卷`data`下,这个目录要在运行时由`--docker-target-name`指定\n  - 等待容器创建成功\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png)\n  - 容器创建成功后进入容器\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png)\n  - 执行`mlagents-learn trainer_config.yaml --docker-target-name=data/unity-volume --env=3dball --train --run-id=test --save-freq=5000 | tee /data/unity-volume/log.txt`,如果不想在屏幕输出,可以在后边加上`>/dev/null`\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png)\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png)\n  \n---\n\n## 安装Miniconda\n\n确保你的安装包放在了data文件夹下\n`apt-get update && apt-get install bzip2 -y && cd /data && bash Miniconda3-latest-Linux-x86_64.sh`\n\n一路按回车、yes等等就成功了.如果需要安装到指定目录,在安装过程中会有提示告诉你让你指定安装路径\n\n*注意*\n\n在[学校机器学习平台](http://10.0.4.228/)上使用时,如果是使用容器的方式,那么新开的容器就可以使用`conda`命令,不存在`conda:command not found`的错误信息.\n\n但是,如果在平台上以**提交任务**的形式来使用带conda的镜像所产生的容器时,就算是在镜像中配置了`echo 'export PATH=\"~/anaconda3/bin:$PATH\"' >> ~/.bashrc`,当提交任务时环境变量中仍然没有`~/anaconda3/bin`,这个问题目前没有找到比较方便的解决办法,目前所采用的方式是:\n\n在提交任务时, 首先加上命令`export PATH=\"~/anaconda3/bin:$PATH\" && `\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-25-17.png)\n\n接着又实验了一下`echo 'export PATH=\"~/anaconda3/bin:$PATH\"' >> /etc/profile`, 正常来说, 如果在容器中这样设置环境变量, 等待下次从镜像创建容器时, 这个环境变量一般并不会生效, 但是不知道这样设置对于提交任务方式来说有没有效, 索性试了一下\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-35-56.png)\n\n根据输出日志来看, 这种方式也并没有奏效\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-39-26.png)\n\n当然, 如果觉得上述配置比较麻烦的话,可以使用`Dockerfile`的`ENV`命令来设置环境变量, 这样设置99%是不会有问题的\n\n```\nFROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.5\nENV PATH /usr/miniconda3/bin:$PATH\n```\n实验了一下,\n结果如下:\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_15-02-16.png)\n\n表示可以使用`conda`命令, 但是不能使用`conda activate`命令激活环境\n\n根据错误信息, 在`Dockerfile`中写入以下代码也不可行:\n\n`RUN ln -s /usr/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh`\n\n查了一下相关资料,发现在4.5版本的conda是无解的\n[https://github.com/ContinuumIO/docker-images/issues/89](https://github.com/ContinuumIO/docker-images/issues/89)\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_22-38-42.png)\n\n希望4.6版本可以解决吧\n\n**更新2019年1月14日14:26:01**\n**已解决**\n\n4.6版本的确可以解决以提交任务模式运行时的问题, 需要使用命令`conda run -n [环境名字] [要执行的命令]`, 而不是使用`conda activate [环境名字]`先激活一个环境.\n\n不过, 更新至4.6版本需要相关配置\n```\nconda config --add channels conda-canary\nconda update conda\n```\n\n我使用Dockerfile来生成镜像, 代码如下:\n```\nFROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.6\n\nENV PATH /usr/miniconda3/bin:$PATH\nRUN conda config --add channels conda-canary && conda update conda -y\n```\n原因是, 使用Dockerfile比较容易设置环境变量, 减少出错\n","source":"_posts/创建ML-Agents的Docker镜像.md","raw":"---\ntitle: 创建ML-Agents的Docker镜像\ncopyright: true\ntop: 1\ndate: 2019-01-04 10:38:59\ncategories:\n- Docker\n- Unity\ntags:\n- docker\n- unity\n- ml-agents\n\n---\n\n# 创建ML-Agents的Docker镜像\n\n<!--more-->\n\n## 前言\n\n  如果需要在镜像中使用GPU训练,可以将Nvidia的官方镜像作为基础镜像,`Dockerfile`如下:\n```\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nLABEL maintainer \"NVIDIA CORPORATION <cudatools@nvidia.com>\"\n\nENV NCCL_VERSION 2.3.7\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tapt-utils \\\n        cuda-libraries-$CUDA_PKG_VERSION \\\n        cuda-cublas-9-0=9.0.176.4-1 \\\n        libnccl2=$NCCL_VERSION-1+cuda9.0 && \\\n    apt-mark hold libnccl2 && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get install -y openssh-server\n\nRUN apt-get install -y nano\n\nRUN mkdir /var/run/sshd\n\nRUN echo \"root:1234\" | chpasswd\n\nRUN sed -i 's/prohibit-password/yes/g' /etc/ssh/sshd_config\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n\n## ML-Agents v0.6.0\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png)\n\n### 环境\n\n本机环境\n\n- ML-Agents 0.6.0\n- Windows 10 专业版\n- docker client version 18.09.0\n- docker server version 18.09.0\n\n平台\n- [机器学习平台](http://10.0.4.228)\n\n### 创建镜像\n\n1. 打开`~/ml-agents-0.6.0/`目录,看到有一个官方给定的`Dockerfile`\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png)\n2. 直接`Build`,在该目录下运行`docker build -t [name]:[tag] .`,一定要注意最后的`.`,很**重要**\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png)\n3. 新建一个`sources.list`文件,为镜像内换源,因为将来有可能需要在容器内安装某些包,有一些国外的资源往往会下载失败,所以需要**换源**\n- 新建一个`sources.list`\n- 用文本编辑器打开,写入以下内容\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png)\n```\n# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted\ndeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties\ndeb http://archive.canonical.com/ubuntu xenial partner\ndeb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse\n```\n- 保存退出\n4. 新建一个`DockerfilePlus`,在官方生成的基础镜像上安装一些可以在平台上运行的包,`openssh-server`,联网工具`net-tools`,心爱的`apt-file`等等\n- 新建一个`DockerfilePlus`\n- 用文本编辑器打开,输入以下内容\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png)\n```\nFROM hub.hoc.ccshu.net/wjs/mlunityv060:v0.1\n\nRUN cp /etc/apt/sources.list /etc/apt/sources.list.bak\nCOPY sources.list /etc/apt/sources.list\n\nENV PYTHONPATH /ml-agents:$PYTHONPATH\n\nRUN apt-get update && apt-get install -y \\\n        apt-file \\\n        nano \\\n        net-tools \\\n        iputils-ping \\\n        openssh-server \\\n        apt-utils \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && mkdir /var/run/sshd \\\n    && echo \"root:1234\" | chpasswd \\\n    && sed -i 's/prohibit-password/yes/g' /etc/ssh/sshd_config\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n5. 在`DockerfilePlus`所在文件夹下,执行`build -t [name]:[tag] -f DockerfilePlus .`\n\n**为了使用GPU.改写完的Dockerfile如下(不需要看):**\n```\nFROM nvidia/cuda:9.0-base-ubuntu16.04\nLABEL maintainer \"Keavnn <https://stepneverstop.github.io>\"\n\nENV NCCL_VERSION 2.3.7\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\tapt-utils \\\n        cuda-libraries-$CUDA_PKG_VERSION \\\n        cuda-cublas-9-0=9.0.176.4-1 \\\n        libnccl2=$NCCL_VERSION-1+cuda9.0 && \\\n    apt-mark hold libnccl2 && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# ensure local python is preferred over distribution python\nENV PATH /usr/local/bin:$PATH\n\n# http://bugs.python.org/issue19846\n# > At the moment, setting \"LANG=C\" on a Linux system *fundamentally breaks Python 3*, and that's not OK.\nENV LANG C.UTF-8\n\n# runtime dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tca-certificates \\\n\t\tlibexpat1 \\\n\t\tlibffi6 \\\n\t\tlibgdbm3 \\\n\t\tlibreadline6 \\\n\t\tlibsqlite3-0 \\\n\t\tlibssl1.0.0 \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\nENV PYTHON_VERSION 3.6.4\n\nRUN set -ex \\\n\t&& buildDeps=\" \\\n\t\tdpkg-dev \\\n\t\tgcc \\\n\t\tlibbz2-dev \\\n\t\tlibc6-dev \\\n\t\tlibexpat1-dev \\\n\t\tlibffi-dev \\\n\t\tlibgdbm-dev \\\n\t\tliblzma-dev \\\n\t\tlibncursesw5-dev \\\n\t\tlibreadline-dev \\\n\t\tlibsqlite3-dev \\\n\t\tlibssl-dev \\\n\t\tmake \\\n\t\ttcl-dev \\\n\t\ttk-dev \\\n\t\twget \\\n\t\txz-utils \\\n\t\tzlib1g-dev \\\n# as of Stretch, \"gpg\" is no longer included by default\n\t\t$(command -v gpg > /dev/null || echo 'gnupg dirmngr') \\\n\t\" \\\n\t&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \\\n\t\\\n\t&& wget -O python.tar.xz \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz\" \\\n\t&& wget -O python.tar.xz.asc \"https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc\" \\\n\t&& export GNUPGHOME=\"$(mktemp -d)\" \\\n\t&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$GPG_KEY\" \\\n\t&& gpg --batch --verify python.tar.xz.asc python.tar.xz \\\n\t&& rm -rf \"$GNUPGHOME\" python.tar.xz.asc \\\n\t&& mkdir -p /usr/src/python \\\n\t&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\\n\t&& rm python.tar.xz \\\n\t\\\n\t&& cd /usr/src/python \\\n\t&& gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\" \\\n\t&& ./configure \\\n\t\t--build=\"$gnuArch\" \\\n\t\t--enable-loadable-sqlite-extensions \\\n\t\t--enable-shared \\\n\t\t--with-system-expat \\\n\t\t--with-system-ffi \\\n\t\t--without-ensurepip \\\n\t&& make -j \"$(nproc)\" \\\n\t&& make install \\\n\t&& ldconfig \\\n\t\\\n\t&& apt-get purge -y --auto-remove $buildDeps \\\n\t\\\n\t&& find /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' + \\\n\t&& rm -rf /usr/src/python\n\n# make some useful symlinks that are expected to exist\nRUN cd /usr/local/bin \\\n\t&& ln -s idle3 idle \\\n\t&& ln -s pydoc3 pydoc \\\n\t&& ln -s python3 python \\\n\t&& ln -s python3-config python-config\n\n# if this is called \"PIP_VERSION\", pip explodes with \"ValueError: invalid truth value '<VERSION>'\"\nENV PYTHON_PIP_VERSION 9.0.3\n\nRUN set -ex; \\\n\t\\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends wget; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\twget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \\\n\t\\\n\tapt-get purge -y --auto-remove wget; \\\n\t\\\n\tpython get-pip.py \\\n\t\t--disable-pip-version-check \\\n\t\t--no-cache-dir \\\n\t\t\"pip==$PYTHON_PIP_VERSION\" \\\n\t; \\\n\tpip --version; \\\n\t\\\n\tfind /usr/local -depth \\\n\t\t\\( \\\n\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\\n\t\t\t-o \\\n\t\t\t\\( -type f -a \\( -name '*.pyc' -o -name '*.pyo' \\) \\) \\\n\t\t\\) -exec rm -rf '{}' +; \\\n\trm -f get-pip.py\n\n\nRUN apt-get update && apt-get -y upgrade\n\n# xvfb is used to do CPU based rendering of Unity\nRUN apt-get install -y xvfb\n\nCOPY ml-agents /ml-agents\nWORKDIR /ml-agents\nRUN pip install .\n\n# port 5005 is the port used in in Editor training.\nEXPOSE 5005\n\nRUN cp /etc/apt/sources.list /etc/apt/sources.list.bak\nCOPY sources.list /etc/apt/sources.list\n\nENV PYTHONPATH /ml-agents:$PYTHONPATH\n\nRUN apt-get update && apt-get install -y \\\n        apt-file \\\n        nano \\\n        net-tools \\\n        iputils-ping \\\n        openssh-server \\\n        apt-utils \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && mkdir /var/run/sshd \\\n    && echo \"root:1234\" | chpasswd \\\n    && sed -i 's/prohibit-password/yes/g' /etc/ssh/sshd_config\n\nEXPOSE 22\n\nENTRYPOINT [\"/usr/sbin/sshd\",\"-D\"]\n```\n\n### PUSH镜像\n\n`docker push [name]:[tag]`\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png)\n\n### 测试镜像\n\n- 登录[机器学习平台](http://10.0.4.228),没有使用平台的可以在本地使用`docker run`直接开启容器\n- 先测试使用容器的方式\n  - 创建容器\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png)\n  将要运行和储存的文件夹放在数据卷`data`下,这个目录要在运行时由`--docker-target-name`指定\n  - 等待容器创建成功\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png)\n  - 容器创建成功后进入容器\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png)\n  - 执行`mlagents-learn trainer_config.yaml --docker-target-name=data/unity-volume --env=3dball --train --run-id=test --save-freq=5000 | tee /data/unity-volume/log.txt`,如果不想在屏幕输出,可以在后边加上`>/dev/null`\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png)\n  ![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png)\n  \n---\n\n## 安装Miniconda\n\n确保你的安装包放在了data文件夹下\n`apt-get update && apt-get install bzip2 -y && cd /data && bash Miniconda3-latest-Linux-x86_64.sh`\n\n一路按回车、yes等等就成功了.如果需要安装到指定目录,在安装过程中会有提示告诉你让你指定安装路径\n\n*注意*\n\n在[学校机器学习平台](http://10.0.4.228/)上使用时,如果是使用容器的方式,那么新开的容器就可以使用`conda`命令,不存在`conda:command not found`的错误信息.\n\n但是,如果在平台上以**提交任务**的形式来使用带conda的镜像所产生的容器时,就算是在镜像中配置了`echo 'export PATH=\"~/anaconda3/bin:$PATH\"' >> ~/.bashrc`,当提交任务时环境变量中仍然没有`~/anaconda3/bin`,这个问题目前没有找到比较方便的解决办法,目前所采用的方式是:\n\n在提交任务时, 首先加上命令`export PATH=\"~/anaconda3/bin:$PATH\" && `\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-25-17.png)\n\n接着又实验了一下`echo 'export PATH=\"~/anaconda3/bin:$PATH\"' >> /etc/profile`, 正常来说, 如果在容器中这样设置环境变量, 等待下次从镜像创建容器时, 这个环境变量一般并不会生效, 但是不知道这样设置对于提交任务方式来说有没有效, 索性试了一下\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-35-56.png)\n\n根据输出日志来看, 这种方式也并没有奏效\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-39-26.png)\n\n当然, 如果觉得上述配置比较麻烦的话,可以使用`Dockerfile`的`ENV`命令来设置环境变量, 这样设置99%是不会有问题的\n\n```\nFROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.5\nENV PATH /usr/miniconda3/bin:$PATH\n```\n实验了一下,\n结果如下:\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_15-02-16.png)\n\n表示可以使用`conda`命令, 但是不能使用`conda activate`命令激活环境\n\n根据错误信息, 在`Dockerfile`中写入以下代码也不可行:\n\n`RUN ln -s /usr/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh`\n\n查了一下相关资料,发现在4.5版本的conda是无解的\n[https://github.com/ContinuumIO/docker-images/issues/89](https://github.com/ContinuumIO/docker-images/issues/89)\n\n![](./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_22-38-42.png)\n\n希望4.6版本可以解决吧\n\n**更新2019年1月14日14:26:01**\n**已解决**\n\n4.6版本的确可以解决以提交任务模式运行时的问题, 需要使用命令`conda run -n [环境名字] [要执行的命令]`, 而不是使用`conda activate [环境名字]`先激活一个环境.\n\n不过, 更新至4.6版本需要相关配置\n```\nconda config --add channels conda-canary\nconda update conda\n```\n\n我使用Dockerfile来生成镜像, 代码如下:\n```\nFROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.6\n\nENV PATH /usr/miniconda3/bin:$PATH\nRUN conda config --add channels conda-canary && conda update conda -y\n```\n原因是, 使用Dockerfile比较容易设置环境变量, 减少出错\n","slug":"创建ML-Agents的Docker镜像","published":1,"updated":"2019-05-10T01:25:04.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaabi002bm8veeoodultx","content":"<h1 id=\"创建ML-Agents的Docker镜像\"><a href=\"#创建ML-Agents的Docker镜像\" class=\"headerlink\" title=\"创建ML-Agents的Docker镜像\"></a>创建ML-Agents的Docker镜像</h1><a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  如果需要在镜像中使用GPU训练,可以将Nvidia的官方镜像作为基础镜像,<code>Dockerfile</code>如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nvidia/cuda:9.0-base-ubuntu16.04</span><br><span class=\"line\">LABEL maintainer &quot;NVIDIA CORPORATION &lt;cudatools@nvidia.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV NCCL_VERSION 2.3.7</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\</span><br><span class=\"line\">\tapt-utils \\</span><br><span class=\"line\">        cuda-libraries-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-cublas-9-0=9.0.176.4-1 \\</span><br><span class=\"line\">        libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \\</span><br><span class=\"line\">    apt-mark hold libnccl2 &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y openssh-server</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get install -y nano</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /var/run/sshd</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo &quot;root:1234&quot; | chpasswd</span><br><span class=\"line\"></span><br><span class=\"line\">RUN sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ML-Agents-v0-6-0\"><a href=\"#ML-Agents-v0-6-0\" class=\"headerlink\" title=\"ML-Agents v0.6.0\"></a>ML-Agents v0.6.0</h2><p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png\" alt=\"\"></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>本机环境</p>\n<ul>\n<li>ML-Agents 0.6.0</li>\n<li>Windows 10 专业版</li>\n<li>docker client version 18.09.0</li>\n<li>docker server version 18.09.0</li>\n</ul>\n<p>平台</p>\n<ul>\n<li><a href=\"http://10.0.4.228\" rel=\"external nofollow\" target=\"_blank\">机器学习平台</a></li>\n</ul>\n<h3 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h3><ol>\n<li>打开<code>~/ml-agents-0.6.0/</code>目录,看到有一个官方给定的<code>Dockerfile</code><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png\" alt=\"\"></li>\n<li>直接<code>Build</code>,在该目录下运行<code>docker build -t [name]:[tag] .</code>,一定要注意最后的<code>.</code>,很<strong>重要</strong><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png\" alt=\"\"></li>\n<li>新建一个<code>sources.list</code>文件,为镜像内换源,因为将来有可能需要在容器内安装某些包,有一些国外的资源往往会下载失败,所以需要<strong>换源</strong></li>\n</ol>\n<ul>\n<li>新建一个<code>sources.list</code></li>\n<li><p>用文本编辑器打开,写入以下内容<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span><br><span class=\"line\">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class=\"line\">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存退出</p>\n</li>\n</ul>\n<ol>\n<li>新建一个<code>DockerfilePlus</code>,在官方生成的基础镜像上安装一些可以在平台上运行的包,<code>openssh-server</code>,联网工具<code>net-tools</code>,心爱的<code>apt-file</code>等等</li>\n</ol>\n<ul>\n<li>新建一个<code>DockerfilePlus</code></li>\n<li>用文本编辑器打开,输入以下内容<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png\" alt=\"\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM hub.hoc.ccshu.net/wjs/mlunityv060:v0.1</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">COPY sources.list /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PYTHONPATH /ml-agents:$PYTHONPATH</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        apt-file \\</span><br><span class=\"line\">        nano \\</span><br><span class=\"line\">        net-tools \\</span><br><span class=\"line\">        iputils-ping \\</span><br><span class=\"line\">        openssh-server \\</span><br><span class=\"line\">        apt-utils \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; mkdir /var/run/sshd \\</span><br><span class=\"line\">    &amp;&amp; echo &quot;root:1234&quot; | chpasswd \\</span><br><span class=\"line\">    &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>在<code>DockerfilePlus</code>所在文件夹下,执行<code>build -t [name]:[tag] -f DockerfilePlus .</code></li>\n</ol>\n<p><strong>为了使用GPU.改写完的Dockerfile如下(不需要看):</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nvidia/cuda:9.0-base-ubuntu16.04</span><br><span class=\"line\">LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV NCCL_VERSION 2.3.7</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\</span><br><span class=\"line\">\tapt-utils \\</span><br><span class=\"line\">        cuda-libraries-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-cublas-9-0=9.0.176.4-1 \\</span><br><span class=\"line\">        libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \\</span><br><span class=\"line\">    apt-mark hold libnccl2 &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ensure local python is preferred over distribution python</span><br><span class=\"line\">ENV PATH /usr/local/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># http://bugs.python.org/issue19846</span><br><span class=\"line\"># &gt; At the moment, setting &quot;LANG=C&quot; on a Linux system *fundamentally breaks Python 3*, and that&apos;s not OK.</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\"># runtime dependencies</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\</span><br><span class=\"line\">\t\tca-certificates \\</span><br><span class=\"line\">\t\tlibexpat1 \\</span><br><span class=\"line\">\t\tlibffi6 \\</span><br><span class=\"line\">\t\tlibgdbm3 \\</span><br><span class=\"line\">\t\tlibreadline6 \\</span><br><span class=\"line\">\t\tlibsqlite3-0 \\</span><br><span class=\"line\">\t\tlibssl1.0.0 \\</span><br><span class=\"line\">\t&amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\">ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D</span><br><span class=\"line\">ENV PYTHON_VERSION 3.6.4</span><br><span class=\"line\"></span><br><span class=\"line\">RUN set -ex \\</span><br><span class=\"line\">\t&amp;&amp; buildDeps=&quot; \\</span><br><span class=\"line\">\t\tdpkg-dev \\</span><br><span class=\"line\">\t\tgcc \\</span><br><span class=\"line\">\t\tlibbz2-dev \\</span><br><span class=\"line\">\t\tlibc6-dev \\</span><br><span class=\"line\">\t\tlibexpat1-dev \\</span><br><span class=\"line\">\t\tlibffi-dev \\</span><br><span class=\"line\">\t\tlibgdbm-dev \\</span><br><span class=\"line\">\t\tliblzma-dev \\</span><br><span class=\"line\">\t\tlibncursesw5-dev \\</span><br><span class=\"line\">\t\tlibreadline-dev \\</span><br><span class=\"line\">\t\tlibsqlite3-dev \\</span><br><span class=\"line\">\t\tlibssl-dev \\</span><br><span class=\"line\">\t\tmake \\</span><br><span class=\"line\">\t\ttcl-dev \\</span><br><span class=\"line\">\t\ttk-dev \\</span><br><span class=\"line\">\t\twget \\</span><br><span class=\"line\">\t\txz-utils \\</span><br><span class=\"line\">\t\tzlib1g-dev \\</span><br><span class=\"line\"># as of Stretch, &quot;gpg&quot; is no longer included by default</span><br><span class=\"line\">\t\t$(command -v gpg &gt; /dev/null || echo &apos;gnupg dirmngr&apos;) \\</span><br><span class=\"line\">\t&quot; \\</span><br><span class=\"line\">\t&amp;&amp; apt-get update &amp;&amp; apt-get install -y $buildDeps --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; wget -O python.tar.xz &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz&quot; \\</span><br><span class=\"line\">\t&amp;&amp; wget -O python.tar.xz.asc &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz.asc&quot; \\</span><br><span class=\"line\">\t&amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \\</span><br><span class=\"line\">\t&amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$GPG_KEY&quot; \\</span><br><span class=\"line\">\t&amp;&amp; gpg --batch --verify python.tar.xz.asc python.tar.xz \\</span><br><span class=\"line\">\t&amp;&amp; rm -rf &quot;$GNUPGHOME&quot; python.tar.xz.asc \\</span><br><span class=\"line\">\t&amp;&amp; mkdir -p /usr/src/python \\</span><br><span class=\"line\">\t&amp;&amp; tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\</span><br><span class=\"line\">\t&amp;&amp; rm python.tar.xz \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; cd /usr/src/python \\</span><br><span class=\"line\">\t&amp;&amp; gnuArch=&quot;$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)&quot; \\</span><br><span class=\"line\">\t&amp;&amp; ./configure \\</span><br><span class=\"line\">\t\t--build=&quot;$gnuArch&quot; \\</span><br><span class=\"line\">\t\t--enable-loadable-sqlite-extensions \\</span><br><span class=\"line\">\t\t--enable-shared \\</span><br><span class=\"line\">\t\t--with-system-expat \\</span><br><span class=\"line\">\t\t--with-system-ffi \\</span><br><span class=\"line\">\t\t--without-ensurepip \\</span><br><span class=\"line\">\t&amp;&amp; make -j &quot;$(nproc)&quot; \\</span><br><span class=\"line\">\t&amp;&amp; make install \\</span><br><span class=\"line\">\t&amp;&amp; ldconfig \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; apt-get purge -y --auto-remove $buildDeps \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; find /usr/local -depth \\</span><br><span class=\"line\">\t\t\\( \\</span><br><span class=\"line\">\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\</span><br><span class=\"line\">\t\t\t-o \\</span><br><span class=\"line\">\t\t\t\\( -type f -a \\( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \\) \\) \\</span><br><span class=\"line\">\t\t\\) -exec rm -rf &apos;&#123;&#125;&apos; + \\</span><br><span class=\"line\">\t&amp;&amp; rm -rf /usr/src/python</span><br><span class=\"line\"></span><br><span class=\"line\"># make some useful symlinks that are expected to exist</span><br><span class=\"line\">RUN cd /usr/local/bin \\</span><br><span class=\"line\">\t&amp;&amp; ln -s idle3 idle \\</span><br><span class=\"line\">\t&amp;&amp; ln -s pydoc3 pydoc \\</span><br><span class=\"line\">\t&amp;&amp; ln -s python3 python \\</span><br><span class=\"line\">\t&amp;&amp; ln -s python3-config python-config</span><br><span class=\"line\"></span><br><span class=\"line\"># if this is called &quot;PIP_VERSION&quot;, pip explodes with &quot;ValueError: invalid truth value &apos;&lt;VERSION&gt;&apos;&quot;</span><br><span class=\"line\">ENV PYTHON_PIP_VERSION 9.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">RUN set -ex; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tapt-get update; \\</span><br><span class=\"line\">\tapt-get install -y --no-install-recommends wget; \\</span><br><span class=\"line\">\trm -rf /var/lib/apt/lists/*; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\twget -O get-pip.py &apos;https://bootstrap.pypa.io/get-pip.py&apos;; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tapt-get purge -y --auto-remove wget; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tpython get-pip.py \\</span><br><span class=\"line\">\t\t--disable-pip-version-check \\</span><br><span class=\"line\">\t\t--no-cache-dir \\</span><br><span class=\"line\">\t\t&quot;pip==$PYTHON_PIP_VERSION&quot; \\</span><br><span class=\"line\">\t; \\</span><br><span class=\"line\">\tpip --version; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tfind /usr/local -depth \\</span><br><span class=\"line\">\t\t\\( \\</span><br><span class=\"line\">\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\</span><br><span class=\"line\">\t\t\t-o \\</span><br><span class=\"line\">\t\t\t\\( -type f -a \\( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \\) \\) \\</span><br><span class=\"line\">\t\t\\) -exec rm -rf &apos;&#123;&#125;&apos; +; \\</span><br><span class=\"line\">\trm -f get-pip.py</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get -y upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"># xvfb is used to do CPU based rendering of Unity</span><br><span class=\"line\">RUN apt-get install -y xvfb</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ml-agents /ml-agents</span><br><span class=\"line\">WORKDIR /ml-agents</span><br><span class=\"line\">RUN pip install .</span><br><span class=\"line\"></span><br><span class=\"line\"># port 5005 is the port used in in Editor training.</span><br><span class=\"line\">EXPOSE 5005</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">COPY sources.list /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PYTHONPATH /ml-agents:$PYTHONPATH</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        apt-file \\</span><br><span class=\"line\">        nano \\</span><br><span class=\"line\">        net-tools \\</span><br><span class=\"line\">        iputils-ping \\</span><br><span class=\"line\">        openssh-server \\</span><br><span class=\"line\">        apt-utils \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; mkdir /var/run/sshd \\</span><br><span class=\"line\">    &amp;&amp; echo &quot;root:1234&quot; | chpasswd \\</span><br><span class=\"line\">    &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PUSH镜像\"><a href=\"#PUSH镜像\" class=\"headerlink\" title=\"PUSH镜像\"></a>PUSH镜像</h3><p><code>docker push [name]:[tag]</code><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png\" alt=\"\"></p>\n<h3 id=\"测试镜像\"><a href=\"#测试镜像\" class=\"headerlink\" title=\"测试镜像\"></a>测试镜像</h3><ul>\n<li>登录<a href=\"http://10.0.4.228\" rel=\"external nofollow\" target=\"_blank\">机器学习平台</a>,没有使用平台的可以在本地使用<code>docker run</code>直接开启容器</li>\n<li>先测试使用容器的方式<ul>\n<li>创建容器<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png\" alt=\"\"><br>将要运行和储存的文件夹放在数据卷<code>data</code>下,这个目录要在运行时由<code>--docker-target-name</code>指定</li>\n<li>等待容器创建成功<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png\" alt=\"\"></li>\n<li>容器创建成功后进入容器<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png\" alt=\"\"></li>\n<li>执行<code>mlagents-learn trainer_config.yaml --docker-target-name=data/unity-volume --env=3dball --train --run-id=test --save-freq=5000 | tee /data/unity-volume/log.txt</code>,如果不想在屏幕输出,可以在后边加上<code>&gt;/dev/null</code><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png\" alt=\"\"><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"安装Miniconda\"><a href=\"#安装Miniconda\" class=\"headerlink\" title=\"安装Miniconda\"></a>安装Miniconda</h2><p>确保你的安装包放在了data文件夹下<br><code>apt-get update &amp;&amp; apt-get install bzip2 -y &amp;&amp; cd /data &amp;&amp; bash Miniconda3-latest-Linux-x86_64.sh</code></p>\n<p>一路按回车、yes等等就成功了.如果需要安装到指定目录,在安装过程中会有提示告诉你让你指定安装路径</p>\n<p><em>注意</em></p>\n<p>在<a href=\"http://10.0.4.228/\" rel=\"external nofollow\" target=\"_blank\">学校机器学习平台</a>上使用时,如果是使用容器的方式,那么新开的容器就可以使用<code>conda</code>命令,不存在<code>conda:command not found</code>的错误信息.</p>\n<p>但是,如果在平台上以<strong>提交任务</strong>的形式来使用带conda的镜像所产生的容器时,就算是在镜像中配置了<code>echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc</code>,当提交任务时环境变量中仍然没有<code>~/anaconda3/bin</code>,这个问题目前没有找到比较方便的解决办法,目前所采用的方式是:</p>\n<p>在提交任务时, 首先加上命令<code>export PATH=&quot;~/anaconda3/bin:$PATH&quot; &amp;&amp;</code></p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-25-17.png\" alt=\"\"></p>\n<p>接着又实验了一下<code>echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; /etc/profile</code>, 正常来说, 如果在容器中这样设置环境变量, 等待下次从镜像创建容器时, 这个环境变量一般并不会生效, 但是不知道这样设置对于提交任务方式来说有没有效, 索性试了一下</p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-35-56.png\" alt=\"\"></p>\n<p>根据输出日志来看, 这种方式也并没有奏效</p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-39-26.png\" alt=\"\"></p>\n<p>当然, 如果觉得上述配置比较麻烦的话,可以使用<code>Dockerfile</code>的<code>ENV</code>命令来设置环境变量, 这样设置99%是不会有问题的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.5</span><br><span class=\"line\">ENV PATH /usr/miniconda3/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>实验了一下,<br>结果如下:</p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_15-02-16.png\" alt=\"\"></p>\n<p>表示可以使用<code>conda</code>命令, 但是不能使用<code>conda activate</code>命令激活环境</p>\n<p>根据错误信息, 在<code>Dockerfile</code>中写入以下代码也不可行:</p>\n<p><code>RUN ln -s /usr/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh</code></p>\n<p>查了一下相关资料,发现在4.5版本的conda是无解的<br><a href=\"https://github.com/ContinuumIO/docker-images/issues/89\" rel=\"external nofollow\" target=\"_blank\">https://github.com/ContinuumIO/docker-images/issues/89</a></p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_22-38-42.png\" alt=\"\"></p>\n<p>希望4.6版本可以解决吧</p>\n<p><strong>更新2019年1月14日14:26:01</strong><br><strong>已解决</strong></p>\n<p>4.6版本的确可以解决以提交任务模式运行时的问题, 需要使用命令<code>conda run -n [环境名字] [要执行的命令]</code>, 而不是使用<code>conda activate [环境名字]</code>先激活一个环境.</p>\n<p>不过, 更新至4.6版本需要相关配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda config --add channels conda-canary</span><br><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure></p>\n<p>我使用Dockerfile来生成镜像, 代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.6</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PATH /usr/miniconda3/bin:$PATH</span><br><span class=\"line\">RUN conda config --add channels conda-canary &amp;&amp; conda update conda -y</span><br></pre></td></tr></table></figure></p>\n<p>原因是, 使用Dockerfile比较容易设置环境变量, 减少出错</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"创建ML-Agents的Docker镜像\"><a href=\"#创建ML-Agents的Docker镜像\" class=\"headerlink\" title=\"创建ML-Agents的Docker镜像\"></a>创建ML-Agents的Docker镜像</h1>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  如果需要在镜像中使用GPU训练,可以将Nvidia的官方镜像作为基础镜像,<code>Dockerfile</code>如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nvidia/cuda:9.0-base-ubuntu16.04</span><br><span class=\"line\">LABEL maintainer &quot;NVIDIA CORPORATION &lt;cudatools@nvidia.com&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV NCCL_VERSION 2.3.7</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\</span><br><span class=\"line\">\tapt-utils \\</span><br><span class=\"line\">        cuda-libraries-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-cublas-9-0=9.0.176.4-1 \\</span><br><span class=\"line\">        libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \\</span><br><span class=\"line\">    apt-mark hold libnccl2 &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y openssh-server</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get install -y nano</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /var/run/sshd</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo &quot;root:1234&quot; | chpasswd</span><br><span class=\"line\"></span><br><span class=\"line\">RUN sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ML-Agents-v0-6-0\"><a href=\"#ML-Agents-v0-6-0\" class=\"headerlink\" title=\"ML-Agents v0.6.0\"></a>ML-Agents v0.6.0</h2><p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png\" alt=\"\"></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>本机环境</p>\n<ul>\n<li>ML-Agents 0.6.0</li>\n<li>Windows 10 专业版</li>\n<li>docker client version 18.09.0</li>\n<li>docker server version 18.09.0</li>\n</ul>\n<p>平台</p>\n<ul>\n<li><a href=\"http://10.0.4.228\" rel=\"external nofollow\" target=\"_blank\">机器学习平台</a></li>\n</ul>\n<h3 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h3><ol>\n<li>打开<code>~/ml-agents-0.6.0/</code>目录,看到有一个官方给定的<code>Dockerfile</code><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png\" alt=\"\"></li>\n<li>直接<code>Build</code>,在该目录下运行<code>docker build -t [name]:[tag] .</code>,一定要注意最后的<code>.</code>,很<strong>重要</strong><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png\" alt=\"\"></li>\n<li>新建一个<code>sources.list</code>文件,为镜像内换源,因为将来有可能需要在容器内安装某些包,有一些国外的资源往往会下载失败,所以需要<strong>换源</strong></li>\n</ol>\n<ul>\n<li>新建一个<code>sources.list</code></li>\n<li><p>用文本编辑器打开,写入以下内容<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span><br><span class=\"line\">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class=\"line\">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存退出</p>\n</li>\n</ul>\n<ol>\n<li>新建一个<code>DockerfilePlus</code>,在官方生成的基础镜像上安装一些可以在平台上运行的包,<code>openssh-server</code>,联网工具<code>net-tools</code>,心爱的<code>apt-file</code>等等</li>\n</ol>\n<ul>\n<li>新建一个<code>DockerfilePlus</code></li>\n<li>用文本编辑器打开,输入以下内容<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png\" alt=\"\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM hub.hoc.ccshu.net/wjs/mlunityv060:v0.1</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">COPY sources.list /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PYTHONPATH /ml-agents:$PYTHONPATH</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        apt-file \\</span><br><span class=\"line\">        nano \\</span><br><span class=\"line\">        net-tools \\</span><br><span class=\"line\">        iputils-ping \\</span><br><span class=\"line\">        openssh-server \\</span><br><span class=\"line\">        apt-utils \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; mkdir /var/run/sshd \\</span><br><span class=\"line\">    &amp;&amp; echo &quot;root:1234&quot; | chpasswd \\</span><br><span class=\"line\">    &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>在<code>DockerfilePlus</code>所在文件夹下,执行<code>build -t [name]:[tag] -f DockerfilePlus .</code></li>\n</ol>\n<p><strong>为了使用GPU.改写完的Dockerfile如下(不需要看):</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nvidia/cuda:9.0-base-ubuntu16.04</span><br><span class=\"line\">LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV NCCL_VERSION 2.3.7</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\</span><br><span class=\"line\">\tapt-utils \\</span><br><span class=\"line\">        cuda-libraries-$CUDA_PKG_VERSION \\</span><br><span class=\"line\">        cuda-cublas-9-0=9.0.176.4-1 \\</span><br><span class=\"line\">        libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \\</span><br><span class=\"line\">    apt-mark hold libnccl2 &amp;&amp; \\</span><br><span class=\"line\">    rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ensure local python is preferred over distribution python</span><br><span class=\"line\">ENV PATH /usr/local/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># http://bugs.python.org/issue19846</span><br><span class=\"line\"># &gt; At the moment, setting &quot;LANG=C&quot; on a Linux system *fundamentally breaks Python 3*, and that&apos;s not OK.</span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\"># runtime dependencies</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\</span><br><span class=\"line\">\t\tca-certificates \\</span><br><span class=\"line\">\t\tlibexpat1 \\</span><br><span class=\"line\">\t\tlibffi6 \\</span><br><span class=\"line\">\t\tlibgdbm3 \\</span><br><span class=\"line\">\t\tlibreadline6 \\</span><br><span class=\"line\">\t\tlibsqlite3-0 \\</span><br><span class=\"line\">\t\tlibssl1.0.0 \\</span><br><span class=\"line\">\t&amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"></span><br><span class=\"line\">ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D</span><br><span class=\"line\">ENV PYTHON_VERSION 3.6.4</span><br><span class=\"line\"></span><br><span class=\"line\">RUN set -ex \\</span><br><span class=\"line\">\t&amp;&amp; buildDeps=&quot; \\</span><br><span class=\"line\">\t\tdpkg-dev \\</span><br><span class=\"line\">\t\tgcc \\</span><br><span class=\"line\">\t\tlibbz2-dev \\</span><br><span class=\"line\">\t\tlibc6-dev \\</span><br><span class=\"line\">\t\tlibexpat1-dev \\</span><br><span class=\"line\">\t\tlibffi-dev \\</span><br><span class=\"line\">\t\tlibgdbm-dev \\</span><br><span class=\"line\">\t\tliblzma-dev \\</span><br><span class=\"line\">\t\tlibncursesw5-dev \\</span><br><span class=\"line\">\t\tlibreadline-dev \\</span><br><span class=\"line\">\t\tlibsqlite3-dev \\</span><br><span class=\"line\">\t\tlibssl-dev \\</span><br><span class=\"line\">\t\tmake \\</span><br><span class=\"line\">\t\ttcl-dev \\</span><br><span class=\"line\">\t\ttk-dev \\</span><br><span class=\"line\">\t\twget \\</span><br><span class=\"line\">\t\txz-utils \\</span><br><span class=\"line\">\t\tzlib1g-dev \\</span><br><span class=\"line\"># as of Stretch, &quot;gpg&quot; is no longer included by default</span><br><span class=\"line\">\t\t$(command -v gpg &gt; /dev/null || echo &apos;gnupg dirmngr&apos;) \\</span><br><span class=\"line\">\t&quot; \\</span><br><span class=\"line\">\t&amp;&amp; apt-get update &amp;&amp; apt-get install -y $buildDeps --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; wget -O python.tar.xz &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz&quot; \\</span><br><span class=\"line\">\t&amp;&amp; wget -O python.tar.xz.asc &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz.asc&quot; \\</span><br><span class=\"line\">\t&amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \\</span><br><span class=\"line\">\t&amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$GPG_KEY&quot; \\</span><br><span class=\"line\">\t&amp;&amp; gpg --batch --verify python.tar.xz.asc python.tar.xz \\</span><br><span class=\"line\">\t&amp;&amp; rm -rf &quot;$GNUPGHOME&quot; python.tar.xz.asc \\</span><br><span class=\"line\">\t&amp;&amp; mkdir -p /usr/src/python \\</span><br><span class=\"line\">\t&amp;&amp; tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \\</span><br><span class=\"line\">\t&amp;&amp; rm python.tar.xz \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; cd /usr/src/python \\</span><br><span class=\"line\">\t&amp;&amp; gnuArch=&quot;$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)&quot; \\</span><br><span class=\"line\">\t&amp;&amp; ./configure \\</span><br><span class=\"line\">\t\t--build=&quot;$gnuArch&quot; \\</span><br><span class=\"line\">\t\t--enable-loadable-sqlite-extensions \\</span><br><span class=\"line\">\t\t--enable-shared \\</span><br><span class=\"line\">\t\t--with-system-expat \\</span><br><span class=\"line\">\t\t--with-system-ffi \\</span><br><span class=\"line\">\t\t--without-ensurepip \\</span><br><span class=\"line\">\t&amp;&amp; make -j &quot;$(nproc)&quot; \\</span><br><span class=\"line\">\t&amp;&amp; make install \\</span><br><span class=\"line\">\t&amp;&amp; ldconfig \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; apt-get purge -y --auto-remove $buildDeps \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\t&amp;&amp; find /usr/local -depth \\</span><br><span class=\"line\">\t\t\\( \\</span><br><span class=\"line\">\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\</span><br><span class=\"line\">\t\t\t-o \\</span><br><span class=\"line\">\t\t\t\\( -type f -a \\( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \\) \\) \\</span><br><span class=\"line\">\t\t\\) -exec rm -rf &apos;&#123;&#125;&apos; + \\</span><br><span class=\"line\">\t&amp;&amp; rm -rf /usr/src/python</span><br><span class=\"line\"></span><br><span class=\"line\"># make some useful symlinks that are expected to exist</span><br><span class=\"line\">RUN cd /usr/local/bin \\</span><br><span class=\"line\">\t&amp;&amp; ln -s idle3 idle \\</span><br><span class=\"line\">\t&amp;&amp; ln -s pydoc3 pydoc \\</span><br><span class=\"line\">\t&amp;&amp; ln -s python3 python \\</span><br><span class=\"line\">\t&amp;&amp; ln -s python3-config python-config</span><br><span class=\"line\"></span><br><span class=\"line\"># if this is called &quot;PIP_VERSION&quot;, pip explodes with &quot;ValueError: invalid truth value &apos;&lt;VERSION&gt;&apos;&quot;</span><br><span class=\"line\">ENV PYTHON_PIP_VERSION 9.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">RUN set -ex; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tapt-get update; \\</span><br><span class=\"line\">\tapt-get install -y --no-install-recommends wget; \\</span><br><span class=\"line\">\trm -rf /var/lib/apt/lists/*; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\twget -O get-pip.py &apos;https://bootstrap.pypa.io/get-pip.py&apos;; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tapt-get purge -y --auto-remove wget; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tpython get-pip.py \\</span><br><span class=\"line\">\t\t--disable-pip-version-check \\</span><br><span class=\"line\">\t\t--no-cache-dir \\</span><br><span class=\"line\">\t\t&quot;pip==$PYTHON_PIP_VERSION&quot; \\</span><br><span class=\"line\">\t; \\</span><br><span class=\"line\">\tpip --version; \\</span><br><span class=\"line\">\t\\</span><br><span class=\"line\">\tfind /usr/local -depth \\</span><br><span class=\"line\">\t\t\\( \\</span><br><span class=\"line\">\t\t\t\\( -type d -a \\( -name test -o -name tests \\) \\) \\</span><br><span class=\"line\">\t\t\t-o \\</span><br><span class=\"line\">\t\t\t\\( -type f -a \\( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \\) \\) \\</span><br><span class=\"line\">\t\t\\) -exec rm -rf &apos;&#123;&#125;&apos; +; \\</span><br><span class=\"line\">\trm -f get-pip.py</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get -y upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"># xvfb is used to do CPU based rendering of Unity</span><br><span class=\"line\">RUN apt-get install -y xvfb</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ml-agents /ml-agents</span><br><span class=\"line\">WORKDIR /ml-agents</span><br><span class=\"line\">RUN pip install .</span><br><span class=\"line\"></span><br><span class=\"line\"># port 5005 is the port used in in Editor training.</span><br><span class=\"line\">EXPOSE 5005</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">COPY sources.list /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PYTHONPATH /ml-agents:$PYTHONPATH</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y \\</span><br><span class=\"line\">        apt-file \\</span><br><span class=\"line\">        nano \\</span><br><span class=\"line\">        net-tools \\</span><br><span class=\"line\">        iputils-ping \\</span><br><span class=\"line\">        openssh-server \\</span><br><span class=\"line\">        apt-utils \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; mkdir /var/run/sshd \\</span><br><span class=\"line\">    &amp;&amp; echo &quot;root:1234&quot; | chpasswd \\</span><br><span class=\"line\">    &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 22</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PUSH镜像\"><a href=\"#PUSH镜像\" class=\"headerlink\" title=\"PUSH镜像\"></a>PUSH镜像</h3><p><code>docker push [name]:[tag]</code><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png\" alt=\"\"></p>\n<h3 id=\"测试镜像\"><a href=\"#测试镜像\" class=\"headerlink\" title=\"测试镜像\"></a>测试镜像</h3><ul>\n<li>登录<a href=\"http://10.0.4.228\" rel=\"external nofollow\" target=\"_blank\">机器学习平台</a>,没有使用平台的可以在本地使用<code>docker run</code>直接开启容器</li>\n<li>先测试使用容器的方式<ul>\n<li>创建容器<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png\" alt=\"\"><br>将要运行和储存的文件夹放在数据卷<code>data</code>下,这个目录要在运行时由<code>--docker-target-name</code>指定</li>\n<li>等待容器创建成功<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png\" alt=\"\"></li>\n<li>容器创建成功后进入容器<br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png\" alt=\"\"></li>\n<li>执行<code>mlagents-learn trainer_config.yaml --docker-target-name=data/unity-volume --env=3dball --train --run-id=test --save-freq=5000 | tee /data/unity-volume/log.txt</code>,如果不想在屏幕输出,可以在后边加上<code>&gt;/dev/null</code><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png\" alt=\"\"><br><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"安装Miniconda\"><a href=\"#安装Miniconda\" class=\"headerlink\" title=\"安装Miniconda\"></a>安装Miniconda</h2><p>确保你的安装包放在了data文件夹下<br><code>apt-get update &amp;&amp; apt-get install bzip2 -y &amp;&amp; cd /data &amp;&amp; bash Miniconda3-latest-Linux-x86_64.sh</code></p>\n<p>一路按回车、yes等等就成功了.如果需要安装到指定目录,在安装过程中会有提示告诉你让你指定安装路径</p>\n<p><em>注意</em></p>\n<p>在<a href=\"http://10.0.4.228/\" rel=\"external nofollow\" target=\"_blank\">学校机器学习平台</a>上使用时,如果是使用容器的方式,那么新开的容器就可以使用<code>conda</code>命令,不存在<code>conda:command not found</code>的错误信息.</p>\n<p>但是,如果在平台上以<strong>提交任务</strong>的形式来使用带conda的镜像所产生的容器时,就算是在镜像中配置了<code>echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc</code>,当提交任务时环境变量中仍然没有<code>~/anaconda3/bin</code>,这个问题目前没有找到比较方便的解决办法,目前所采用的方式是:</p>\n<p>在提交任务时, 首先加上命令<code>export PATH=&quot;~/anaconda3/bin:$PATH&quot; &amp;&amp;</code></p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-25-17.png\" alt=\"\"></p>\n<p>接着又实验了一下<code>echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; /etc/profile</code>, 正常来说, 如果在容器中这样设置环境变量, 等待下次从镜像创建容器时, 这个环境变量一般并不会生效, 但是不知道这样设置对于提交任务方式来说有没有效, 索性试了一下</p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-35-56.png\" alt=\"\"></p>\n<p>根据输出日志来看, 这种方式也并没有奏效</p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-39-26.png\" alt=\"\"></p>\n<p>当然, 如果觉得上述配置比较麻烦的话,可以使用<code>Dockerfile</code>的<code>ENV</code>命令来设置环境变量, 这样设置99%是不会有问题的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.5</span><br><span class=\"line\">ENV PATH /usr/miniconda3/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>实验了一下,<br>结果如下:</p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_15-02-16.png\" alt=\"\"></p>\n<p>表示可以使用<code>conda</code>命令, 但是不能使用<code>conda activate</code>命令激活环境</p>\n<p>根据错误信息, 在<code>Dockerfile</code>中写入以下代码也不可行:</p>\n<p><code>RUN ln -s /usr/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh</code></p>\n<p>查了一下相关资料,发现在4.5版本的conda是无解的<br><a href=\"https://github.com/ContinuumIO/docker-images/issues/89\" rel=\"external nofollow\" target=\"_blank\">https://github.com/ContinuumIO/docker-images/issues/89</a></p>\n<p><img src=\"./创建ML-Agents的Docker镜像/Snipaste_2019-01-11_22-38-42.png\" alt=\"\"></p>\n<p>希望4.6版本可以解决吧</p>\n<p><strong>更新2019年1月14日14:26:01</strong><br><strong>已解决</strong></p>\n<p>4.6版本的确可以解决以提交任务模式运行时的问题, 需要使用命令<code>conda run -n [环境名字] [要执行的命令]</code>, 而不是使用<code>conda activate [环境名字]</code>先激活一个环境.</p>\n<p>不过, 更新至4.6版本需要相关配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda config --add channels conda-canary</span><br><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure></p>\n<p>我使用Dockerfile来生成镜像, 代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.6</span><br><span class=\"line\"></span><br><span class=\"line\">ENV PATH /usr/miniconda3/bin:$PATH</span><br><span class=\"line\">RUN conda config --add channels conda-canary &amp;&amp; conda update conda -y</span><br></pre></td></tr></table></figure></p>\n<p>原因是, 使用Dockerfile比较容易设置环境变量, 减少出错</p>"},{"title":"价值与贝尔曼方程","copyright":true,"top":1,"date":"2019-05-09T10:09:02.000Z","mathjax":true,"_content":"\n# 价值与贝尔曼方程\n\n我们人在做决策的时候往往会判断做这件事的价值和后果，就像失恋了去喝不喝闷酒一样，不同的人有不同的选择，但是选择前肯定会判断这么做能给自己带来什么。\n\n选择去喝酒的人觉得这可以缓解自己的痛苦，这就是判断喝酒这个动作的价值。因为身体原因不选择去喝酒的人觉得喝醉之后身体很不舒服，还会说胡话、闹事，这就是衡量后果、判断喝酒后状态的价值。\n\n在乎过程的会根据动作的价值进行抉择，在乎结果的会根据状态的价值进行抉择。总之，衡量价值，毫无疑问是我们做决策的重要评判标准。\n\n机器也一样，我们想教会机器学会自主决策，必然得让它们有一个价值导向，毕竟它可不会、也决不能像人一样\"没有原因呀，就随便选择了一个而已\"。\n\n本文介绍了**绝大部分强化学习问题及算法**中值函数与贝尔曼方程的定义。因为有一些研究探索的，如好奇心、信息熵等方向的算法对值函数的定义有稍许不同。\n\n<!--more-->\n\n---\n\n注：以下公式及推导过程可能与其他博客、论文、书本上有稍许不同，不过都是经过细细分析，一步步推导的，或许有些公式难以理解，但都是尽可能细化每一处细节。使读者可以更清楚地了解每一个值的来龙去脉。\n\n---\n\n## 值函数\n\n值函数分为状态值函数与动作值函数，分别用来表示状态和状态下执行某动作的好坏程度、优劣程度。\n\n回顾一下回报：\n$$\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}\n$$\n\n$$\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}\n$$\n\n回顾一下之前的MDP例子：\n\n![](./强化学习之MDP马尔科夫决策过程/MDP.jpg)\n\n将状态用符号表示为\n$$\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n\\mathcal{Pass} & E\\\\ \n睡觉 & F\n\\end{bmatrix}\n$$\n将转移概率矩阵$\\mathcal{P}$写成如下形式\n\n\n\n\n\n|        |  A   |  B   |  C   |  D   |  E   |  F   |\n| :----: | :--: | :--: | :--: | :--: | :--: | :--: |\n| Reward |  -1  |  -2  |  -2  |  -2  |  10  |  0   |\n|   A    | 0.9  | 0.1  |      |      |      |      |\n|   B    | 0.5  |      | 0.5  |      |      |      |\n|   C    |      |      |      | 0.8  |      | 0.2  |\n| D,0.4  |      | 0.2  | 0.4  | 0.4  |      |      |\n| D,0.6  |      |      |      |      | 0.6  |      |\n|   E    |      |      |      |      |      | 1.0  |\n\n其中，D状态有两个动作，但是其0.4概率选到的动作并不一定确定地转移到另一个状态，所以将两个动作分开写，其实除了Reward的每一行都是一个$(s,a)$的状态-动作对，但是除了D状态有特殊外，其他状态的转移都是确定的，于是省略了动作。后续将会看到如果根据$(D,0.4)$这个状态-动作对去进行相应的计算。\n\n### 状态值函数$V(s)$\n\n$\\pi$策略下$s$状态的价值函数可以表示为$v_{\\pi}(s)$，由**期望回报**表示\n\n$$\nv_{\\pi}(s) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s \\right ], \\ for \\ all \\ s\\in S\n$$\n\n有了这个公式，我们能根据上述表格计算出每个状态的价值吗？当然可以，只是很麻烦，如果对于连续状态空间的问题就不只是麻烦的问题，而是不能计算。\n\n为什么呢？因为要求期望需要遍历所有可能性的episode，连续状态空间根本无法遍历所有的情况。\n\n### 动作值函数$Q(s,a)$\n\n动作值函数与状态值函数在公式表示上差别不大，$\\pi$策略$s$状态下执行a动作的价值函数可以表示为$Q_{\\pi}(s，a)$，由**期望回报**表示\n$$\nQ_{\\pi}(s,a) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s,A_{t}=a] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s,A_{t}=a \\right ]\n$$\n\n## 贝尔曼方程\n\n> [贝尔曼方程（Bellman Equation）(百度百科)](https://baike.baidu.com/item/贝尔曼方程/5500990?fr=aladdin)也被称作动态规划方程（Dynamic Programming Equation），由理查·贝尔曼（Richard Bellman）发现。\n>\n> 贝尔曼方程是动态规划（Dynamic Programming）这些数学最佳化方法能够达到最佳化的必要条件。此方程把“决策问题在特定时间怎么的值”以“来自初始选择的报酬比从初始选择衍生的决策问题的值”的形式表示。借此这个方式把动态最佳化问题变成简单的子问题，而这些子问题遵守从贝尔曼所提出来的“最佳化还原理”。\n\n\n\n**贝尔曼方程将状态值函数$V(s)$与动作值函数$Q(s,a)$、将当前的值函数与之后状态$V(s‘)$或动作的值函数$Q(s’,a‘)$联系起来。**\n\n\n\n### 状态值函数$V(s)$与动作值函数$Q(s,a)$的关系\n\n![](./价值与贝尔曼方程/vs.jpg)\n$$\nv_{\\pi}(s)=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)\n$$\n![](./价值与贝尔曼方程/qsa.jpg)\n$$\nq_{\\pi}(s,a) = \\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n$$\n\n### 贝尔曼期望方程\n\n状态值函数$V(s)$可以写成如下形式：\n$$\n\\begin{align*}\nv_{\\pi}(s) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s \\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s'}\\sum_{r}p(s',r\\mid s,a)\\left[r+\\gamma \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s' \\right]\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)\n\\end{align*},\nfor \\ all \\ s\\in S\n$$\n\n![](./价值与贝尔曼方程/v.jpg)\n\n看到没有，此时可以将当前状态的状态值$v_{\\pi}(s)$与下一个可到达状态的状态值$v_{\\pi}(s')$联系起来！\n\n动作值函数$Q_{\\pi}(s,a)$也可以进行类似推导：\n$$\n\\begin{align*}\nq_{\\pi}(s,a) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s,A_{t}=a \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s,A_{t}=a \\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s',A_{t+1}=a' \\right]\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') q_{\\pi}(s',a')\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n\\end{align*}\n$$\n\n![](./价值与贝尔曼方程/q.jpg)\n\n### 最优值函数\n\n解决一个强化学习问题也就是意味着找到一种选择动作的策略能够获得足够多的回报。如果执行每个动作所产生的转移都是确定的（有限MDP），那么能够定义出一个最优策略，如果一个策略$\\pi'$的所有状态值函数都大于$\\pi$，那么就说策略$\\pi'$更好，但不一定是最好的，我们把最优策略用$\\pi_{*}$表示。\n\n最优状态值函数：\n\n$$\nv_{*}(s)=\\max_{\\pi} v_{\\pi}(s)\n$$\n\n最优动作值函数：\n\n$$\nq_{*}(s,a)=\\max_{\\pi} q_{\\pi}(s,a)\n$$\n\n### 贝尔曼最优方程\n\n$$\n\\begin{align*}\nv_{*}(s) &= \\max_{a} q_{*}(s,a)\\\\\n&=\\max_{a}\\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]\n\\end{align*}\n$$\n\n$$\n\\begin{align*}\nq_{*}(s,a) &= \\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\mathbb{E}\\left[r+\\gamma \\max_{a'} q_{*}(s',a')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\max_{a'}q_{*}(s',a')\\right]\n\\end{align*}\n$$\n\n![](./价值与贝尔曼方程/vq.jpg)\n\n虽然我们已经定义出了最优值函数和最优策略，而且理论上也可以直接计算出来。但是通常情况下我们没法得到这么多的计算资源。与此同时内存溢出也是一个很大的问题，因为很多问题的状态数量太多超过存储范围。对于这些情况我们就不能够使用直接存储每个状态的值函数而是必须使用一种更精简的参数型函数表示的方法。\n\n强化学习的框架迫使我们进行近似求解，而且这个框架同时也很容易进行近似，比如对于很多小概率出现的状态，选择最优解和次优解区别不大。\n\n### 最优策略\n\n定义策略之间的偏序关系\n$$\n\\pi \\geq \\pi' \\ if \\ v_{\\pi}(s) \\geq v_{\\pi'}(s) \\ , \\ \\forall s\n$$\n那么有如下定理成立：\n\n对任意MDP：\n\n- 存在最优策略$\\pi_{\\ast}$，满足$\\pi_{\\ast} \\geq \\pi,\\forall \\pi$\n- 所有最优策略的状态值函数都等于最优状态值函数$v_{\\pi_{\\ast}}(s)=v_{\\ast}(s)$\n- 所有最优策略的动作值函数都等于最优动作值函数$q_{\\pi_{\\ast}}(s,a)=q_{\\ast}(s,a)$\n\n## 例子\n\n对于上述例子和表格，我们来试着计算一下$V(S)、Q(S,A)$。\n\n第一个问题，怎么计算这些值？初始化终态的状态值为0，然后从后向前递归？我们来试一下！\n\n### 只初始化终态\n\n根据上述公式，设$\\gamma =1$：\n$$\n\\begin{align*}\n&v(F)=r=0\\\\\n&q(E，)=1\\times (0+v(F))=0\\\\\n&1表示选择这个动作转移至另一个状态的概率\\\\\n&v(E)=1\\times q(E,)=0\\\\\n&q(D,0.6)=1\\times (10+v(E))=10\\\\\n&q(D,0.4)=0.2\\times(-2+v(B))+0.4\\times(-2+v(C))+0.4\\times(-2+v(D))=\\\\\n&v(D)=0.4\\times q(D,0.4)+0.6\\times q(D,0.6)=\\\\\n&q(C,0.8)=1\\times (-2+v(D))=\\\\\n&q(C,0.2)=1\\times (0+v(F))=0\\\\\n&v(C)=0.2\\times q(C,0.2)+0.8\\times q(C,0.8)=\\\\\n&q(B,0.5_{C})=1\\times (-2+v(C))=\\\\\n&q(B,0.5_{A})=1\\times (-1+v(A))=\\\\\n&v(B)=0.5\\times q(B,0.5_{C})+0.5 \\times q(B,0.5_{A})=\\\\\n&q(A,0.9)=1\\times (-1+v(A))=\\\\\n&q(A,0.1)=1\\times(-2+v(B))=\\\\\n&v(A)=0.1\\times q(A,0.1)+0.9\\times q(A,0.9)=\n\\end{align*}\n$$\n哎呀，卡住了，解不出来，$v(D)、v(A)、v(B)$互相依赖，解不出来，看来这样计算是行不通了。其实，很多问题中终态都很难定义，更别说使用这种方法了。\n\n### 初始化全部状态值\n\n初始化所有状态的值函数为0，即\n$$\nv(s)=0,\\ for\\ all\\ s\\in S\n$$\n\n先试验一下$\\gamma =0.5$，\n\n\n\n\n\n\n|                     V和Q，$\\gamma =0.5$                      | 初始化V计算Q | 迭代→V→Q | 第46轮完全收敛 |\n| :----------------------------------------------------------: | :----------: | :------: | -------------- |\n|                              A                               |      0       |    ……    | -2.171         |\n|                              B                               |      0       |    ……    | -1.880         |\n|                              C                               |      0       |    ……    | 0.651          |\n|                              D                               |      0       |    ……    | 5.627          |\n|                              E                               |      0       |    ……    | 0              |\n|                              F                               |      0       |    ……    | 0              |\n|                    $(A,0.1)\\rightarrow B$                    |      0       |    ……    | -2.940         |\n|                    $(A,0.9)\\rightarrow A$                    |      0       |    ……    | -2.085         |\n|                  $(B,0.5_{A})\\rightarrow A$                  |      0       |    ……    | -2.085         |\n|                  $(B,0.5_{C})\\rightarrow C$                  |      0       |    ……    | -1.675         |\n|                    $(C,0.2)\\rightarrow F$                    |      0       |    ……    | 0              |\n|                    $(C,0.8)\\rightarrow D$                    |      0       |    ……    | 0.814          |\n| $(D,0.4)\\rightarrow \\begin{cases}B,0.2\\\\C,0.4\\\\D,0.4\\end{cases}$ |      0       |    ……    | -0.932         |\n|                    $(D,0.6)\\rightarrow E$                    |      0       |    ……    | 10             |\n|                    $(E,1.0)\\rightarrow F$                    |      0       |    ……    | 0              |\n\n这是代码计算的结果，接下来我使$\\gamma =1$，计算结果如下，每迭代100次输出一下：\n\n![](./价值与贝尔曼方程/example1.png)\n\n可以发现，在700至800次迭代后值函数最终收敛。\n\n如果我将$\\gamma $设置为0.1呢？来看一下结果：\n\n![](./价值与贝尔曼方程/example2.png)\n\n仅仅需要十几次就可以迭代至收敛。\n\n如果设置为0呢？会怎么样？看结果：\n\n![](./价值与贝尔曼方程/example3.png)\n\n仅需一次迭代就可以收敛，而且就是转移状态的立即奖励值，这下可以理解$\\gamma$为什么表示对未来的看重程度了吧。\n\n一般我们是不会将$\\gamma$设置为0的，从这个例子的直观感受也可以得到，就拿$\\gamma =0$与$\\gamma =0.5来比较$：\n\n- $\\gamma =0$状态值最高的是$v(D)=5.2$，这很容易理解，D状态距离最大奖励值10最近，理应最好，这点与$\\gamma =0.5$时相同。\n\n- 但是对于状态C，$\\gamma =0$时认为这个状态最差，$v(C)=-1.6$，$\\gamma =0$时认为这个状态次优，$v(C)=0.651$，其实这就是目光短浅与目光长远的不同，$\\gamma =0$并没有考虑到其附近状态的临近状态的价值，导致其主观的认为最接近我的都是负的，于是状态肯定差。\n\n- 对于动作值也是一样，一个认为次优，一个认为最差。\n\n  \n\n**注意：并不是说$\\gamma$越接近于1越好，因为在有些问题上，$\\gamma=1$时其值函数永远不收敛，必须设置$0 \\leq \\gamma \\lt 1$，值函数才能收敛。为什么呢？试着计算一下$\\gamma^{n}$，看看对不同的$\\gamma$值，$n$取什么值时结果接近0。**\n\n试着计算一下这个例子，红色代表立即奖励，蓝色代表选择动作的概率以及状态转移的概率，小写字母代表动作，大写字母代表状态。\n\n![](./价值与贝尔曼方程/example4.png)\n\n$\\gamma =1$时，迭代100W次也不收敛：\n\n![](./价值与贝尔曼方程/example5.png)\n\n$\\gamma =0.5$时，迭代50多次即可收敛：\n\n![](./价值与贝尔曼方程/example6.png)\n\n","source":"_posts/价值与贝尔曼方程.md","raw":"---\ntitle: 价值与贝尔曼方程\ncopyright: true\ntop: 1\ndate: 2019-05-09 18:09:02\nmathjax: true\ncategories: ReinforcementLearning\ntags:\n- rl\n---\n\n# 价值与贝尔曼方程\n\n我们人在做决策的时候往往会判断做这件事的价值和后果，就像失恋了去喝不喝闷酒一样，不同的人有不同的选择，但是选择前肯定会判断这么做能给自己带来什么。\n\n选择去喝酒的人觉得这可以缓解自己的痛苦，这就是判断喝酒这个动作的价值。因为身体原因不选择去喝酒的人觉得喝醉之后身体很不舒服，还会说胡话、闹事，这就是衡量后果、判断喝酒后状态的价值。\n\n在乎过程的会根据动作的价值进行抉择，在乎结果的会根据状态的价值进行抉择。总之，衡量价值，毫无疑问是我们做决策的重要评判标准。\n\n机器也一样，我们想教会机器学会自主决策，必然得让它们有一个价值导向，毕竟它可不会、也决不能像人一样\"没有原因呀，就随便选择了一个而已\"。\n\n本文介绍了**绝大部分强化学习问题及算法**中值函数与贝尔曼方程的定义。因为有一些研究探索的，如好奇心、信息熵等方向的算法对值函数的定义有稍许不同。\n\n<!--more-->\n\n---\n\n注：以下公式及推导过程可能与其他博客、论文、书本上有稍许不同，不过都是经过细细分析，一步步推导的，或许有些公式难以理解，但都是尽可能细化每一处细节。使读者可以更清楚地了解每一个值的来龙去脉。\n\n---\n\n## 值函数\n\n值函数分为状态值函数与动作值函数，分别用来表示状态和状态下执行某动作的好坏程度、优劣程度。\n\n回顾一下回报：\n$$\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}\n$$\n\n$$\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}\n$$\n\n回顾一下之前的MDP例子：\n\n![](./强化学习之MDP马尔科夫决策过程/MDP.jpg)\n\n将状态用符号表示为\n$$\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n\\mathcal{Pass} & E\\\\ \n睡觉 & F\n\\end{bmatrix}\n$$\n将转移概率矩阵$\\mathcal{P}$写成如下形式\n\n\n\n\n\n|        |  A   |  B   |  C   |  D   |  E   |  F   |\n| :----: | :--: | :--: | :--: | :--: | :--: | :--: |\n| Reward |  -1  |  -2  |  -2  |  -2  |  10  |  0   |\n|   A    | 0.9  | 0.1  |      |      |      |      |\n|   B    | 0.5  |      | 0.5  |      |      |      |\n|   C    |      |      |      | 0.8  |      | 0.2  |\n| D,0.4  |      | 0.2  | 0.4  | 0.4  |      |      |\n| D,0.6  |      |      |      |      | 0.6  |      |\n|   E    |      |      |      |      |      | 1.0  |\n\n其中，D状态有两个动作，但是其0.4概率选到的动作并不一定确定地转移到另一个状态，所以将两个动作分开写，其实除了Reward的每一行都是一个$(s,a)$的状态-动作对，但是除了D状态有特殊外，其他状态的转移都是确定的，于是省略了动作。后续将会看到如果根据$(D,0.4)$这个状态-动作对去进行相应的计算。\n\n### 状态值函数$V(s)$\n\n$\\pi$策略下$s$状态的价值函数可以表示为$v_{\\pi}(s)$，由**期望回报**表示\n\n$$\nv_{\\pi}(s) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s \\right ], \\ for \\ all \\ s\\in S\n$$\n\n有了这个公式，我们能根据上述表格计算出每个状态的价值吗？当然可以，只是很麻烦，如果对于连续状态空间的问题就不只是麻烦的问题，而是不能计算。\n\n为什么呢？因为要求期望需要遍历所有可能性的episode，连续状态空间根本无法遍历所有的情况。\n\n### 动作值函数$Q(s,a)$\n\n动作值函数与状态值函数在公式表示上差别不大，$\\pi$策略$s$状态下执行a动作的价值函数可以表示为$Q_{\\pi}(s，a)$，由**期望回报**表示\n$$\nQ_{\\pi}(s,a) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s,A_{t}=a] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s,A_{t}=a \\right ]\n$$\n\n## 贝尔曼方程\n\n> [贝尔曼方程（Bellman Equation）(百度百科)](https://baike.baidu.com/item/贝尔曼方程/5500990?fr=aladdin)也被称作动态规划方程（Dynamic Programming Equation），由理查·贝尔曼（Richard Bellman）发现。\n>\n> 贝尔曼方程是动态规划（Dynamic Programming）这些数学最佳化方法能够达到最佳化的必要条件。此方程把“决策问题在特定时间怎么的值”以“来自初始选择的报酬比从初始选择衍生的决策问题的值”的形式表示。借此这个方式把动态最佳化问题变成简单的子问题，而这些子问题遵守从贝尔曼所提出来的“最佳化还原理”。\n\n\n\n**贝尔曼方程将状态值函数$V(s)$与动作值函数$Q(s,a)$、将当前的值函数与之后状态$V(s‘)$或动作的值函数$Q(s’,a‘)$联系起来。**\n\n\n\n### 状态值函数$V(s)$与动作值函数$Q(s,a)$的关系\n\n![](./价值与贝尔曼方程/vs.jpg)\n$$\nv_{\\pi}(s)=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)\n$$\n![](./价值与贝尔曼方程/qsa.jpg)\n$$\nq_{\\pi}(s,a) = \\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n$$\n\n### 贝尔曼期望方程\n\n状态值函数$V(s)$可以写成如下形式：\n$$\n\\begin{align*}\nv_{\\pi}(s) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s \\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s'}\\sum_{r}p(s',r\\mid s,a)\\left[r+\\gamma \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s' \\right]\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)\n\\end{align*},\nfor \\ all \\ s\\in S\n$$\n\n![](./价值与贝尔曼方程/v.jpg)\n\n看到没有，此时可以将当前状态的状态值$v_{\\pi}(s)$与下一个可到达状态的状态值$v_{\\pi}(s')$联系起来！\n\n动作值函数$Q_{\\pi}(s,a)$也可以进行类似推导：\n$$\n\\begin{align*}\nq_{\\pi}(s,a) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s,A_{t}=a \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s,A_{t}=a \\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s',A_{t+1}=a' \\right]\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') q_{\\pi}(s',a')\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n\\end{align*}\n$$\n\n![](./价值与贝尔曼方程/q.jpg)\n\n### 最优值函数\n\n解决一个强化学习问题也就是意味着找到一种选择动作的策略能够获得足够多的回报。如果执行每个动作所产生的转移都是确定的（有限MDP），那么能够定义出一个最优策略，如果一个策略$\\pi'$的所有状态值函数都大于$\\pi$，那么就说策略$\\pi'$更好，但不一定是最好的，我们把最优策略用$\\pi_{*}$表示。\n\n最优状态值函数：\n\n$$\nv_{*}(s)=\\max_{\\pi} v_{\\pi}(s)\n$$\n\n最优动作值函数：\n\n$$\nq_{*}(s,a)=\\max_{\\pi} q_{\\pi}(s,a)\n$$\n\n### 贝尔曼最优方程\n\n$$\n\\begin{align*}\nv_{*}(s) &= \\max_{a} q_{*}(s,a)\\\\\n&=\\max_{a}\\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]\n\\end{align*}\n$$\n\n$$\n\\begin{align*}\nq_{*}(s,a) &= \\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\mathbb{E}\\left[r+\\gamma \\max_{a'} q_{*}(s',a')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\max_{a'}q_{*}(s',a')\\right]\n\\end{align*}\n$$\n\n![](./价值与贝尔曼方程/vq.jpg)\n\n虽然我们已经定义出了最优值函数和最优策略，而且理论上也可以直接计算出来。但是通常情况下我们没法得到这么多的计算资源。与此同时内存溢出也是一个很大的问题，因为很多问题的状态数量太多超过存储范围。对于这些情况我们就不能够使用直接存储每个状态的值函数而是必须使用一种更精简的参数型函数表示的方法。\n\n强化学习的框架迫使我们进行近似求解，而且这个框架同时也很容易进行近似，比如对于很多小概率出现的状态，选择最优解和次优解区别不大。\n\n### 最优策略\n\n定义策略之间的偏序关系\n$$\n\\pi \\geq \\pi' \\ if \\ v_{\\pi}(s) \\geq v_{\\pi'}(s) \\ , \\ \\forall s\n$$\n那么有如下定理成立：\n\n对任意MDP：\n\n- 存在最优策略$\\pi_{\\ast}$，满足$\\pi_{\\ast} \\geq \\pi,\\forall \\pi$\n- 所有最优策略的状态值函数都等于最优状态值函数$v_{\\pi_{\\ast}}(s)=v_{\\ast}(s)$\n- 所有最优策略的动作值函数都等于最优动作值函数$q_{\\pi_{\\ast}}(s,a)=q_{\\ast}(s,a)$\n\n## 例子\n\n对于上述例子和表格，我们来试着计算一下$V(S)、Q(S,A)$。\n\n第一个问题，怎么计算这些值？初始化终态的状态值为0，然后从后向前递归？我们来试一下！\n\n### 只初始化终态\n\n根据上述公式，设$\\gamma =1$：\n$$\n\\begin{align*}\n&v(F)=r=0\\\\\n&q(E，)=1\\times (0+v(F))=0\\\\\n&1表示选择这个动作转移至另一个状态的概率\\\\\n&v(E)=1\\times q(E,)=0\\\\\n&q(D,0.6)=1\\times (10+v(E))=10\\\\\n&q(D,0.4)=0.2\\times(-2+v(B))+0.4\\times(-2+v(C))+0.4\\times(-2+v(D))=\\\\\n&v(D)=0.4\\times q(D,0.4)+0.6\\times q(D,0.6)=\\\\\n&q(C,0.8)=1\\times (-2+v(D))=\\\\\n&q(C,0.2)=1\\times (0+v(F))=0\\\\\n&v(C)=0.2\\times q(C,0.2)+0.8\\times q(C,0.8)=\\\\\n&q(B,0.5_{C})=1\\times (-2+v(C))=\\\\\n&q(B,0.5_{A})=1\\times (-1+v(A))=\\\\\n&v(B)=0.5\\times q(B,0.5_{C})+0.5 \\times q(B,0.5_{A})=\\\\\n&q(A,0.9)=1\\times (-1+v(A))=\\\\\n&q(A,0.1)=1\\times(-2+v(B))=\\\\\n&v(A)=0.1\\times q(A,0.1)+0.9\\times q(A,0.9)=\n\\end{align*}\n$$\n哎呀，卡住了，解不出来，$v(D)、v(A)、v(B)$互相依赖，解不出来，看来这样计算是行不通了。其实，很多问题中终态都很难定义，更别说使用这种方法了。\n\n### 初始化全部状态值\n\n初始化所有状态的值函数为0，即\n$$\nv(s)=0,\\ for\\ all\\ s\\in S\n$$\n\n先试验一下$\\gamma =0.5$，\n\n\n\n\n\n\n|                     V和Q，$\\gamma =0.5$                      | 初始化V计算Q | 迭代→V→Q | 第46轮完全收敛 |\n| :----------------------------------------------------------: | :----------: | :------: | -------------- |\n|                              A                               |      0       |    ……    | -2.171         |\n|                              B                               |      0       |    ……    | -1.880         |\n|                              C                               |      0       |    ……    | 0.651          |\n|                              D                               |      0       |    ……    | 5.627          |\n|                              E                               |      0       |    ……    | 0              |\n|                              F                               |      0       |    ……    | 0              |\n|                    $(A,0.1)\\rightarrow B$                    |      0       |    ……    | -2.940         |\n|                    $(A,0.9)\\rightarrow A$                    |      0       |    ……    | -2.085         |\n|                  $(B,0.5_{A})\\rightarrow A$                  |      0       |    ……    | -2.085         |\n|                  $(B,0.5_{C})\\rightarrow C$                  |      0       |    ……    | -1.675         |\n|                    $(C,0.2)\\rightarrow F$                    |      0       |    ……    | 0              |\n|                    $(C,0.8)\\rightarrow D$                    |      0       |    ……    | 0.814          |\n| $(D,0.4)\\rightarrow \\begin{cases}B,0.2\\\\C,0.4\\\\D,0.4\\end{cases}$ |      0       |    ……    | -0.932         |\n|                    $(D,0.6)\\rightarrow E$                    |      0       |    ……    | 10             |\n|                    $(E,1.0)\\rightarrow F$                    |      0       |    ……    | 0              |\n\n这是代码计算的结果，接下来我使$\\gamma =1$，计算结果如下，每迭代100次输出一下：\n\n![](./价值与贝尔曼方程/example1.png)\n\n可以发现，在700至800次迭代后值函数最终收敛。\n\n如果我将$\\gamma $设置为0.1呢？来看一下结果：\n\n![](./价值与贝尔曼方程/example2.png)\n\n仅仅需要十几次就可以迭代至收敛。\n\n如果设置为0呢？会怎么样？看结果：\n\n![](./价值与贝尔曼方程/example3.png)\n\n仅需一次迭代就可以收敛，而且就是转移状态的立即奖励值，这下可以理解$\\gamma$为什么表示对未来的看重程度了吧。\n\n一般我们是不会将$\\gamma$设置为0的，从这个例子的直观感受也可以得到，就拿$\\gamma =0$与$\\gamma =0.5来比较$：\n\n- $\\gamma =0$状态值最高的是$v(D)=5.2$，这很容易理解，D状态距离最大奖励值10最近，理应最好，这点与$\\gamma =0.5$时相同。\n\n- 但是对于状态C，$\\gamma =0$时认为这个状态最差，$v(C)=-1.6$，$\\gamma =0$时认为这个状态次优，$v(C)=0.651$，其实这就是目光短浅与目光长远的不同，$\\gamma =0$并没有考虑到其附近状态的临近状态的价值，导致其主观的认为最接近我的都是负的，于是状态肯定差。\n\n- 对于动作值也是一样，一个认为次优，一个认为最差。\n\n  \n\n**注意：并不是说$\\gamma$越接近于1越好，因为在有些问题上，$\\gamma=1$时其值函数永远不收敛，必须设置$0 \\leq \\gamma \\lt 1$，值函数才能收敛。为什么呢？试着计算一下$\\gamma^{n}$，看看对不同的$\\gamma$值，$n$取什么值时结果接近0。**\n\n试着计算一下这个例子，红色代表立即奖励，蓝色代表选择动作的概率以及状态转移的概率，小写字母代表动作，大写字母代表状态。\n\n![](./价值与贝尔曼方程/example4.png)\n\n$\\gamma =1$时，迭代100W次也不收敛：\n\n![](./价值与贝尔曼方程/example5.png)\n\n$\\gamma =0.5$时，迭代50多次即可收敛：\n\n![](./价值与贝尔曼方程/example6.png)\n\n","slug":"价值与贝尔曼方程","published":1,"updated":"2019-05-13T10:11:12.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaabk002em8veyswzvd0m","content":"<h1 id=\"价值与贝尔曼方程\"><a href=\"#价值与贝尔曼方程\" class=\"headerlink\" title=\"价值与贝尔曼方程\"></a>价值与贝尔曼方程</h1><p>我们人在做决策的时候往往会判断做这件事的价值和后果，就像失恋了去喝不喝闷酒一样，不同的人有不同的选择，但是选择前肯定会判断这么做能给自己带来什么。</p>\n<p>选择去喝酒的人觉得这可以缓解自己的痛苦，这就是判断喝酒这个动作的价值。因为身体原因不选择去喝酒的人觉得喝醉之后身体很不舒服，还会说胡话、闹事，这就是衡量后果、判断喝酒后状态的价值。</p>\n<p>在乎过程的会根据动作的价值进行抉择，在乎结果的会根据状态的价值进行抉择。总之，衡量价值，毫无疑问是我们做决策的重要评判标准。</p>\n<p>机器也一样，我们想教会机器学会自主决策，必然得让它们有一个价值导向，毕竟它可不会、也决不能像人一样”没有原因呀，就随便选择了一个而已”。</p>\n<p>本文介绍了<strong>绝大部分强化学习问题及算法</strong>中值函数与贝尔曼方程的定义。因为有一些研究探索的，如好奇心、信息熵等方向的算法对值函数的定义有稍许不同。</p>\n<a id=\"more\"></a>\n<hr>\n<p>注：以下公式及推导过程可能与其他博客、论文、书本上有稍许不同，不过都是经过细细分析，一步步推导的，或许有些公式难以理解，但都是尽可能细化每一处细节。使读者可以更清楚地了解每一个值的来龙去脉。</p>\n<hr>\n<h2 id=\"值函数\"><a href=\"#值函数\" class=\"headerlink\" title=\"值函数\"></a>值函数</h2><p>值函数分为状态值函数与动作值函数，分别用来表示状态和状态下执行某动作的好坏程度、优劣程度。</p>\n<p>回顾一下回报：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}</script><script type=\"math/tex; mode=display\">\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}</script><p>回顾一下之前的MDP例子：</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MDP.jpg\" alt=\"\"></p>\n<p>将状态用符号表示为</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n\\mathcal{Pass} & E\\\\ \n睡觉 & F\n\\end{bmatrix}</script><p>将转移概率矩阵$\\mathcal{P}$写成如下形式</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">C</th>\n<th style=\"text-align:center\">D</th>\n<th style=\"text-align:center\">E</th>\n<th style=\"text-align:center\">F</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Reward</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">-2</td>\n<td style=\"text-align:center\">-2</td>\n<td style=\"text-align:center\">-2</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">0.9</td>\n<td style=\"text-align:center\">0.1</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">0.5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D,0.4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.2</td>\n<td style=\"text-align:center\">0.4</td>\n<td style=\"text-align:center\">0.4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D,0.6</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.6</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1.0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其中，D状态有两个动作，但是其0.4概率选到的动作并不一定确定地转移到另一个状态，所以将两个动作分开写，其实除了Reward的每一行都是一个$(s,a)$的状态-动作对，但是除了D状态有特殊外，其他状态的转移都是确定的，于是省略了动作。后续将会看到如果根据$(D,0.4)$这个状态-动作对去进行相应的计算。</p>\n<h3 id=\"状态值函数-V-s\"><a href=\"#状态值函数-V-s\" class=\"headerlink\" title=\"状态值函数$V(s)$\"></a>状态值函数$V(s)$</h3><p>$\\pi$策略下$s$状态的价值函数可以表示为$v_{\\pi}(s)$，由<strong>期望回报</strong>表示</p>\n<script type=\"math/tex; mode=display\">\nv_{\\pi}(s) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s \\right ], \\ for \\ all \\ s\\in S</script><p>有了这个公式，我们能根据上述表格计算出每个状态的价值吗？当然可以，只是很麻烦，如果对于连续状态空间的问题就不只是麻烦的问题，而是不能计算。</p>\n<p>为什么呢？因为要求期望需要遍历所有可能性的episode，连续状态空间根本无法遍历所有的情况。</p>\n<h3 id=\"动作值函数-Q-s-a\"><a href=\"#动作值函数-Q-s-a\" class=\"headerlink\" title=\"动作值函数$Q(s,a)$\"></a>动作值函数$Q(s,a)$</h3><p>动作值函数与状态值函数在公式表示上差别不大，$\\pi$策略$s$状态下执行a动作的价值函数可以表示为$Q_{\\pi}(s，a)$，由<strong>期望回报</strong>表示</p>\n<script type=\"math/tex; mode=display\">\nQ_{\\pi}(s,a) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s,A_{t}=a] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s,A_{t}=a \\right ]</script><h2 id=\"贝尔曼方程\"><a href=\"#贝尔曼方程\" class=\"headerlink\" title=\"贝尔曼方程\"></a>贝尔曼方程</h2><blockquote>\n<p><a href=\"https://baike.baidu.com/item/贝尔曼方程/5500990?fr=aladdin\" rel=\"external nofollow\" target=\"_blank\">贝尔曼方程（Bellman Equation）(百度百科)</a>也被称作动态规划方程（Dynamic Programming Equation），由理查·贝尔曼（Richard Bellman）发现。</p>\n<p>贝尔曼方程是动态规划（Dynamic Programming）这些数学最佳化方法能够达到最佳化的必要条件。此方程把“决策问题在特定时间怎么的值”以“来自初始选择的报酬比从初始选择衍生的决策问题的值”的形式表示。借此这个方式把动态最佳化问题变成简单的子问题，而这些子问题遵守从贝尔曼所提出来的“最佳化还原理”。</p>\n</blockquote>\n<p><strong>贝尔曼方程将状态值函数$V(s)$与动作值函数$Q(s,a)$、将当前的值函数与之后状态$V(s‘)$或动作的值函数$Q(s’,a‘)$联系起来。</strong></p>\n<h3 id=\"状态值函数-V-s-与动作值函数-Q-s-a-的关系\"><a href=\"#状态值函数-V-s-与动作值函数-Q-s-a-的关系\" class=\"headerlink\" title=\"状态值函数$V(s)$与动作值函数$Q(s,a)$的关系\"></a>状态值函数$V(s)$与动作值函数$Q(s,a)$的关系</h3><p><img src=\"./价值与贝尔曼方程/vs.jpg\" alt=\"\"></p>\n<script type=\"math/tex; mode=display\">\nv_{\\pi}(s)=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)</script><p><img src=\"./价值与贝尔曼方程/qsa.jpg\" alt=\"\"></p>\n<script type=\"math/tex; mode=display\">\nq_{\\pi}(s,a) = \\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]</script><h3 id=\"贝尔曼期望方程\"><a href=\"#贝尔曼期望方程\" class=\"headerlink\" title=\"贝尔曼期望方程\"></a>贝尔曼期望方程</h3><p>状态值函数$V(s)$可以写成如下形式：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nv_{\\pi}(s) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s \\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s'}\\sum_{r}p(s',r\\mid s,a)\\left[r+\\gamma \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s' \\right]\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)\n\\end{align*},\nfor \\ all \\ s\\in S</script><p><img src=\"./价值与贝尔曼方程/v.jpg\" alt=\"\"></p>\n<p>看到没有，此时可以将当前状态的状态值$v_{\\pi}(s)$与下一个可到达状态的状态值$v_{\\pi}(s’)$联系起来！</p>\n<p>动作值函数$Q_{\\pi}(s,a)$也可以进行类似推导：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nq_{\\pi}(s,a) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s,A_{t}=a \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s,A_{t}=a \\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s',A_{t+1}=a' \\right]\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') q_{\\pi}(s',a')\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n\\end{align*}</script><p><img src=\"./价值与贝尔曼方程/q.jpg\" alt=\"\"></p>\n<h3 id=\"最优值函数\"><a href=\"#最优值函数\" class=\"headerlink\" title=\"最优值函数\"></a>最优值函数</h3><p>解决一个强化学习问题也就是意味着找到一种选择动作的策略能够获得足够多的回报。如果执行每个动作所产生的转移都是确定的（有限MDP），那么能够定义出一个最优策略，如果一个策略$\\pi’$的所有状态值函数都大于$\\pi$，那么就说策略$\\pi’$更好，但不一定是最好的，我们把最优策略用$\\pi_{*}$表示。</p>\n<p>最优状态值函数：</p>\n<script type=\"math/tex; mode=display\">\nv_{*}(s)=\\max_{\\pi} v_{\\pi}(s)</script><p>最优动作值函数：</p>\n<script type=\"math/tex; mode=display\">\nq_{*}(s,a)=\\max_{\\pi} q_{\\pi}(s,a)</script><h3 id=\"贝尔曼最优方程\"><a href=\"#贝尔曼最优方程\" class=\"headerlink\" title=\"贝尔曼最优方程\"></a>贝尔曼最优方程</h3><script type=\"math/tex; mode=display\">\n\\begin{align*}\nv_{*}(s) &= \\max_{a} q_{*}(s,a)\\\\\n&=\\max_{a}\\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]\n\\end{align*}</script><script type=\"math/tex; mode=display\">\n\\begin{align*}\nq_{*}(s,a) &= \\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\mathbb{E}\\left[r+\\gamma \\max_{a'} q_{*}(s',a')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\max_{a'}q_{*}(s',a')\\right]\n\\end{align*}</script><p><img src=\"./价值与贝尔曼方程/vq.jpg\" alt=\"\"></p>\n<p>虽然我们已经定义出了最优值函数和最优策略，而且理论上也可以直接计算出来。但是通常情况下我们没法得到这么多的计算资源。与此同时内存溢出也是一个很大的问题，因为很多问题的状态数量太多超过存储范围。对于这些情况我们就不能够使用直接存储每个状态的值函数而是必须使用一种更精简的参数型函数表示的方法。</p>\n<p>强化学习的框架迫使我们进行近似求解，而且这个框架同时也很容易进行近似，比如对于很多小概率出现的状态，选择最优解和次优解区别不大。</p>\n<h3 id=\"最优策略\"><a href=\"#最优策略\" class=\"headerlink\" title=\"最优策略\"></a>最优策略</h3><p>定义策略之间的偏序关系</p>\n<script type=\"math/tex; mode=display\">\n\\pi \\geq \\pi' \\ if \\ v_{\\pi}(s) \\geq v_{\\pi'}(s) \\ , \\ \\forall s</script><p>那么有如下定理成立：</p>\n<p>对任意MDP：</p>\n<ul>\n<li>存在最优策略$\\pi_{\\ast}$，满足$\\pi_{\\ast} \\geq \\pi,\\forall \\pi$</li>\n<li>所有最优策略的状态值函数都等于最优状态值函数$v_{\\pi_{\\ast}}(s)=v_{\\ast}(s)$</li>\n<li>所有最优策略的动作值函数都等于最优动作值函数$q_{\\pi_{\\ast}}(s,a)=q_{\\ast}(s,a)$</li>\n</ul>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>对于上述例子和表格，我们来试着计算一下$V(S)、Q(S,A)$。</p>\n<p>第一个问题，怎么计算这些值？初始化终态的状态值为0，然后从后向前递归？我们来试一下！</p>\n<h3 id=\"只初始化终态\"><a href=\"#只初始化终态\" class=\"headerlink\" title=\"只初始化终态\"></a>只初始化终态</h3><p>根据上述公式，设$\\gamma =1$：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\n&v(F)=r=0\\\\\n&q(E，)=1\\times (0+v(F))=0\\\\\n&1表示选择这个动作转移至另一个状态的概率\\\\\n&v(E)=1\\times q(E,)=0\\\\\n&q(D,0.6)=1\\times (10+v(E))=10\\\\\n&q(D,0.4)=0.2\\times(-2+v(B))+0.4\\times(-2+v(C))+0.4\\times(-2+v(D))=\\\\\n&v(D)=0.4\\times q(D,0.4)+0.6\\times q(D,0.6)=\\\\\n&q(C,0.8)=1\\times (-2+v(D))=\\\\\n&q(C,0.2)=1\\times (0+v(F))=0\\\\\n&v(C)=0.2\\times q(C,0.2)+0.8\\times q(C,0.8)=\\\\\n&q(B,0.5_{C})=1\\times (-2+v(C))=\\\\\n&q(B,0.5_{A})=1\\times (-1+v(A))=\\\\\n&v(B)=0.5\\times q(B,0.5_{C})+0.5 \\times q(B,0.5_{A})=\\\\\n&q(A,0.9)=1\\times (-1+v(A))=\\\\\n&q(A,0.1)=1\\times(-2+v(B))=\\\\\n&v(A)=0.1\\times q(A,0.1)+0.9\\times q(A,0.9)=\n\\end{align*}</script><p>哎呀，卡住了，解不出来，$v(D)、v(A)、v(B)$互相依赖，解不出来，看来这样计算是行不通了。其实，很多问题中终态都很难定义，更别说使用这种方法了。</p>\n<h3 id=\"初始化全部状态值\"><a href=\"#初始化全部状态值\" class=\"headerlink\" title=\"初始化全部状态值\"></a>初始化全部状态值</h3><p>初始化所有状态的值函数为0，即</p>\n<script type=\"math/tex; mode=display\">\nv(s)=0,\\ for\\ all\\ s\\in S</script><p>先试验一下$\\gamma =0.5$，</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">V和Q，$\\gamma =0.5$</th>\n<th style=\"text-align:center\">初始化V计算Q</th>\n<th style=\"text-align:center\">迭代→V→Q</th>\n<th>第46轮完全收敛</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.171</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-1.880</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0.651</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>5.627</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(A,0.1)\\rightarrow B$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.940</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(A,0.9)\\rightarrow A$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.085</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(B,0.5_{A})\\rightarrow A$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.085</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(B,0.5_{C})\\rightarrow C$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-1.675</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(C,0.2)\\rightarrow F$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(C,0.8)\\rightarrow D$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0.814</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(D,0.4)\\rightarrow \\begin{cases}B,0.2\\\\C,0.4\\\\D,0.4\\end{cases}$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-0.932</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(D,0.6)\\rightarrow E$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(E,1.0)\\rightarrow F$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这是代码计算的结果，接下来我使$\\gamma =1$，计算结果如下，每迭代100次输出一下：</p>\n<p><img src=\"./价值与贝尔曼方程/example1.png\" alt=\"\"></p>\n<p>可以发现，在700至800次迭代后值函数最终收敛。</p>\n<p>如果我将$\\gamma $设置为0.1呢？来看一下结果：</p>\n<p><img src=\"./价值与贝尔曼方程/example2.png\" alt=\"\"></p>\n<p>仅仅需要十几次就可以迭代至收敛。</p>\n<p>如果设置为0呢？会怎么样？看结果：</p>\n<p><img src=\"./价值与贝尔曼方程/example3.png\" alt=\"\"></p>\n<p>仅需一次迭代就可以收敛，而且就是转移状态的立即奖励值，这下可以理解$\\gamma$为什么表示对未来的看重程度了吧。</p>\n<p>一般我们是不会将$\\gamma$设置为0的，从这个例子的直观感受也可以得到，就拿$\\gamma =0$与$\\gamma =0.5来比较$：</p>\n<ul>\n<li><p>$\\gamma =0$状态值最高的是$v(D)=5.2$，这很容易理解，D状态距离最大奖励值10最近，理应最好，这点与$\\gamma =0.5$时相同。</p>\n</li>\n<li><p>但是对于状态C，$\\gamma =0$时认为这个状态最差，$v(C)=-1.6$，$\\gamma =0$时认为这个状态次优，$v(C)=0.651$，其实这就是目光短浅与目光长远的不同，$\\gamma =0$并没有考虑到其附近状态的临近状态的价值，导致其主观的认为最接近我的都是负的，于是状态肯定差。</p>\n</li>\n<li><p>对于动作值也是一样，一个认为次优，一个认为最差。</p>\n</li>\n</ul>\n<p><strong>注意：并不是说$\\gamma$越接近于1越好，因为在有些问题上，$\\gamma=1$时其值函数永远不收敛，必须设置$0 \\leq \\gamma \\lt 1$，值函数才能收敛。为什么呢？试着计算一下$\\gamma^{n}$，看看对不同的$\\gamma$值，$n$取什么值时结果接近0。</strong></p>\n<p>试着计算一下这个例子，红色代表立即奖励，蓝色代表选择动作的概率以及状态转移的概率，小写字母代表动作，大写字母代表状态。</p>\n<p><img src=\"./价值与贝尔曼方程/example4.png\" alt=\"\"></p>\n<p>$\\gamma =1$时，迭代100W次也不收敛：</p>\n<p><img src=\"./价值与贝尔曼方程/example5.png\" alt=\"\"></p>\n<p>$\\gamma =0.5$时，迭代50多次即可收敛：</p>\n<p><img src=\"./价值与贝尔曼方程/example6.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"价值与贝尔曼方程\"><a href=\"#价值与贝尔曼方程\" class=\"headerlink\" title=\"价值与贝尔曼方程\"></a>价值与贝尔曼方程</h1><p>我们人在做决策的时候往往会判断做这件事的价值和后果，就像失恋了去喝不喝闷酒一样，不同的人有不同的选择，但是选择前肯定会判断这么做能给自己带来什么。</p>\n<p>选择去喝酒的人觉得这可以缓解自己的痛苦，这就是判断喝酒这个动作的价值。因为身体原因不选择去喝酒的人觉得喝醉之后身体很不舒服，还会说胡话、闹事，这就是衡量后果、判断喝酒后状态的价值。</p>\n<p>在乎过程的会根据动作的价值进行抉择，在乎结果的会根据状态的价值进行抉择。总之，衡量价值，毫无疑问是我们做决策的重要评判标准。</p>\n<p>机器也一样，我们想教会机器学会自主决策，必然得让它们有一个价值导向，毕竟它可不会、也决不能像人一样”没有原因呀，就随便选择了一个而已”。</p>\n<p>本文介绍了<strong>绝大部分强化学习问题及算法</strong>中值函数与贝尔曼方程的定义。因为有一些研究探索的，如好奇心、信息熵等方向的算法对值函数的定义有稍许不同。</p>","more":"<hr>\n<p>注：以下公式及推导过程可能与其他博客、论文、书本上有稍许不同，不过都是经过细细分析，一步步推导的，或许有些公式难以理解，但都是尽可能细化每一处细节。使读者可以更清楚地了解每一个值的来龙去脉。</p>\n<hr>\n<h2 id=\"值函数\"><a href=\"#值函数\" class=\"headerlink\" title=\"值函数\"></a>值函数</h2><p>值函数分为状态值函数与动作值函数，分别用来表示状态和状态下执行某动作的好坏程度、优劣程度。</p>\n<p>回顾一下回报：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}</script><script type=\"math/tex; mode=display\">\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}</script><p>回顾一下之前的MDP例子：</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MDP.jpg\" alt=\"\"></p>\n<p>将状态用符号表示为</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n\\mathcal{Pass} & E\\\\ \n睡觉 & F\n\\end{bmatrix}</script><p>将转移概率矩阵$\\mathcal{P}$写成如下形式</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">A</th>\n<th style=\"text-align:center\">B</th>\n<th style=\"text-align:center\">C</th>\n<th style=\"text-align:center\">D</th>\n<th style=\"text-align:center\">E</th>\n<th style=\"text-align:center\">F</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Reward</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">-2</td>\n<td style=\"text-align:center\">-2</td>\n<td style=\"text-align:center\">-2</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">0.9</td>\n<td style=\"text-align:center\">0.1</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">0.5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D,0.4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.2</td>\n<td style=\"text-align:center\">0.4</td>\n<td style=\"text-align:center\">0.4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D,0.6</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0.6</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1.0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其中，D状态有两个动作，但是其0.4概率选到的动作并不一定确定地转移到另一个状态，所以将两个动作分开写，其实除了Reward的每一行都是一个$(s,a)$的状态-动作对，但是除了D状态有特殊外，其他状态的转移都是确定的，于是省略了动作。后续将会看到如果根据$(D,0.4)$这个状态-动作对去进行相应的计算。</p>\n<h3 id=\"状态值函数-V-s\"><a href=\"#状态值函数-V-s\" class=\"headerlink\" title=\"状态值函数$V(s)$\"></a>状态值函数$V(s)$</h3><p>$\\pi$策略下$s$状态的价值函数可以表示为$v_{\\pi}(s)$，由<strong>期望回报</strong>表示</p>\n<script type=\"math/tex; mode=display\">\nv_{\\pi}(s) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s \\right ], \\ for \\ all \\ s\\in S</script><p>有了这个公式，我们能根据上述表格计算出每个状态的价值吗？当然可以，只是很麻烦，如果对于连续状态空间的问题就不只是麻烦的问题，而是不能计算。</p>\n<p>为什么呢？因为要求期望需要遍历所有可能性的episode，连续状态空间根本无法遍历所有的情况。</p>\n<h3 id=\"动作值函数-Q-s-a\"><a href=\"#动作值函数-Q-s-a\" class=\"headerlink\" title=\"动作值函数$Q(s,a)$\"></a>动作值函数$Q(s,a)$</h3><p>动作值函数与状态值函数在公式表示上差别不大，$\\pi$策略$s$状态下执行a动作的价值函数可以表示为$Q_{\\pi}(s，a)$，由<strong>期望回报</strong>表示</p>\n<script type=\"math/tex; mode=display\">\nQ_{\\pi}(s,a) \\doteq \\mathbb{E}_{\\pi}[G_{t}|S_{t}=s,A_{t}=a] = \\mathbb{E}_{\\pi}\\left [ \\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\mid S_{t}=s,A_{t}=a \\right ]</script><h2 id=\"贝尔曼方程\"><a href=\"#贝尔曼方程\" class=\"headerlink\" title=\"贝尔曼方程\"></a>贝尔曼方程</h2><blockquote>\n<p><a href=\"https://baike.baidu.com/item/贝尔曼方程/5500990?fr=aladdin\" rel=\"external nofollow\" target=\"_blank\">贝尔曼方程（Bellman Equation）(百度百科)</a>也被称作动态规划方程（Dynamic Programming Equation），由理查·贝尔曼（Richard Bellman）发现。</p>\n<p>贝尔曼方程是动态规划（Dynamic Programming）这些数学最佳化方法能够达到最佳化的必要条件。此方程把“决策问题在特定时间怎么的值”以“来自初始选择的报酬比从初始选择衍生的决策问题的值”的形式表示。借此这个方式把动态最佳化问题变成简单的子问题，而这些子问题遵守从贝尔曼所提出来的“最佳化还原理”。</p>\n</blockquote>\n<p><strong>贝尔曼方程将状态值函数$V(s)$与动作值函数$Q(s,a)$、将当前的值函数与之后状态$V(s‘)$或动作的值函数$Q(s’,a‘)$联系起来。</strong></p>\n<h3 id=\"状态值函数-V-s-与动作值函数-Q-s-a-的关系\"><a href=\"#状态值函数-V-s-与动作值函数-Q-s-a-的关系\" class=\"headerlink\" title=\"状态值函数$V(s)$与动作值函数$Q(s,a)$的关系\"></a>状态值函数$V(s)$与动作值函数$Q(s,a)$的关系</h3><p><img src=\"./价值与贝尔曼方程/vs.jpg\" alt=\"\"></p>\n<script type=\"math/tex; mode=display\">\nv_{\\pi}(s)=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)</script><p><img src=\"./价值与贝尔曼方程/qsa.jpg\" alt=\"\"></p>\n<script type=\"math/tex; mode=display\">\nq_{\\pi}(s,a) = \\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]</script><h3 id=\"贝尔曼期望方程\"><a href=\"#贝尔曼期望方程\" class=\"headerlink\" title=\"贝尔曼期望方程\"></a>贝尔曼期望方程</h3><p>状态值函数$V(s)$可以写成如下形式：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nv_{\\pi}(s) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s \\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s'}\\sum_{r}p(s',r\\mid s,a)\\left[r+\\gamma \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s' \\right]\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s)\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\\\\\n&=\\sum_{a}\\pi(a\\mid s) q_{\\pi}(s,a)\n\\end{align*},\nfor \\ all \\ s\\in S</script><p><img src=\"./价值与贝尔曼方程/v.jpg\" alt=\"\"></p>\n<p>看到没有，此时可以将当前状态的状态值$v_{\\pi}(s)$与下一个可到达状态的状态值$v_{\\pi}(s’)$联系起来！</p>\n<p>动作值函数$Q_{\\pi}(s,a)$也可以进行类似推导：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nq_{\\pi}(s,a) & \\doteq \\mathbb{E}_{\\pi}\\left [ G_{t}\\mid S_{t}=s,A_{t}=a \\right ]\\\\\n&=\\mathbb{E}_{t} \\left [R_{t+1}+\\gamma G_{t+1} \\mid S_{t}=s,A_{t}=a \\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') \\mathbb{E}\\left[G_{t+1}\\mid S_{t+1}=s',A_{t+1}=a' \\right]\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma \\sum_{a'}\\pi(a'\\mid s') q_{\\pi}(s',a')\\right]\\\\\n&=\\sum_{s',r}p(s',r \\mid s,a)\\left[r+\\gamma v_{\\pi}(s')\\right]\n\\end{align*}</script><p><img src=\"./价值与贝尔曼方程/q.jpg\" alt=\"\"></p>\n<h3 id=\"最优值函数\"><a href=\"#最优值函数\" class=\"headerlink\" title=\"最优值函数\"></a>最优值函数</h3><p>解决一个强化学习问题也就是意味着找到一种选择动作的策略能够获得足够多的回报。如果执行每个动作所产生的转移都是确定的（有限MDP），那么能够定义出一个最优策略，如果一个策略$\\pi’$的所有状态值函数都大于$\\pi$，那么就说策略$\\pi’$更好，但不一定是最好的，我们把最优策略用$\\pi_{*}$表示。</p>\n<p>最优状态值函数：</p>\n<script type=\"math/tex; mode=display\">\nv_{*}(s)=\\max_{\\pi} v_{\\pi}(s)</script><p>最优动作值函数：</p>\n<script type=\"math/tex; mode=display\">\nq_{*}(s,a)=\\max_{\\pi} q_{\\pi}(s,a)</script><h3 id=\"贝尔曼最优方程\"><a href=\"#贝尔曼最优方程\" class=\"headerlink\" title=\"贝尔曼最优方程\"></a>贝尔曼最优方程</h3><script type=\"math/tex; mode=display\">\n\\begin{align*}\nv_{*}(s) &= \\max_{a} q_{*}(s,a)\\\\\n&=\\max_{a}\\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\max_{a}\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\right]\n\\end{align*}</script><script type=\"math/tex; mode=display\">\n\\begin{align*}\nq_{*}(s,a) &= \\mathbb{E}\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\mathbb{E}\\left[r+\\gamma \\max_{a'} q_{*}(s',a')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma v_{*}(s')\\mid s,a\\right]\\\\\n&=\\sum_{s',r}p(s',r\\mid s,a)\\left[r+\\gamma \\max_{a'}q_{*}(s',a')\\right]\n\\end{align*}</script><p><img src=\"./价值与贝尔曼方程/vq.jpg\" alt=\"\"></p>\n<p>虽然我们已经定义出了最优值函数和最优策略，而且理论上也可以直接计算出来。但是通常情况下我们没法得到这么多的计算资源。与此同时内存溢出也是一个很大的问题，因为很多问题的状态数量太多超过存储范围。对于这些情况我们就不能够使用直接存储每个状态的值函数而是必须使用一种更精简的参数型函数表示的方法。</p>\n<p>强化学习的框架迫使我们进行近似求解，而且这个框架同时也很容易进行近似，比如对于很多小概率出现的状态，选择最优解和次优解区别不大。</p>\n<h3 id=\"最优策略\"><a href=\"#最优策略\" class=\"headerlink\" title=\"最优策略\"></a>最优策略</h3><p>定义策略之间的偏序关系</p>\n<script type=\"math/tex; mode=display\">\n\\pi \\geq \\pi' \\ if \\ v_{\\pi}(s) \\geq v_{\\pi'}(s) \\ , \\ \\forall s</script><p>那么有如下定理成立：</p>\n<p>对任意MDP：</p>\n<ul>\n<li>存在最优策略$\\pi_{\\ast}$，满足$\\pi_{\\ast} \\geq \\pi,\\forall \\pi$</li>\n<li>所有最优策略的状态值函数都等于最优状态值函数$v_{\\pi_{\\ast}}(s)=v_{\\ast}(s)$</li>\n<li>所有最优策略的动作值函数都等于最优动作值函数$q_{\\pi_{\\ast}}(s,a)=q_{\\ast}(s,a)$</li>\n</ul>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>对于上述例子和表格，我们来试着计算一下$V(S)、Q(S,A)$。</p>\n<p>第一个问题，怎么计算这些值？初始化终态的状态值为0，然后从后向前递归？我们来试一下！</p>\n<h3 id=\"只初始化终态\"><a href=\"#只初始化终态\" class=\"headerlink\" title=\"只初始化终态\"></a>只初始化终态</h3><p>根据上述公式，设$\\gamma =1$：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\n&v(F)=r=0\\\\\n&q(E，)=1\\times (0+v(F))=0\\\\\n&1表示选择这个动作转移至另一个状态的概率\\\\\n&v(E)=1\\times q(E,)=0\\\\\n&q(D,0.6)=1\\times (10+v(E))=10\\\\\n&q(D,0.4)=0.2\\times(-2+v(B))+0.4\\times(-2+v(C))+0.4\\times(-2+v(D))=\\\\\n&v(D)=0.4\\times q(D,0.4)+0.6\\times q(D,0.6)=\\\\\n&q(C,0.8)=1\\times (-2+v(D))=\\\\\n&q(C,0.2)=1\\times (0+v(F))=0\\\\\n&v(C)=0.2\\times q(C,0.2)+0.8\\times q(C,0.8)=\\\\\n&q(B,0.5_{C})=1\\times (-2+v(C))=\\\\\n&q(B,0.5_{A})=1\\times (-1+v(A))=\\\\\n&v(B)=0.5\\times q(B,0.5_{C})+0.5 \\times q(B,0.5_{A})=\\\\\n&q(A,0.9)=1\\times (-1+v(A))=\\\\\n&q(A,0.1)=1\\times(-2+v(B))=\\\\\n&v(A)=0.1\\times q(A,0.1)+0.9\\times q(A,0.9)=\n\\end{align*}</script><p>哎呀，卡住了，解不出来，$v(D)、v(A)、v(B)$互相依赖，解不出来，看来这样计算是行不通了。其实，很多问题中终态都很难定义，更别说使用这种方法了。</p>\n<h3 id=\"初始化全部状态值\"><a href=\"#初始化全部状态值\" class=\"headerlink\" title=\"初始化全部状态值\"></a>初始化全部状态值</h3><p>初始化所有状态的值函数为0，即</p>\n<script type=\"math/tex; mode=display\">\nv(s)=0,\\ for\\ all\\ s\\in S</script><p>先试验一下$\\gamma =0.5$，</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">V和Q，$\\gamma =0.5$</th>\n<th style=\"text-align:center\">初始化V计算Q</th>\n<th style=\"text-align:center\">迭代→V→Q</th>\n<th>第46轮完全收敛</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.171</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-1.880</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0.651</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>5.627</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(A,0.1)\\rightarrow B$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.940</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(A,0.9)\\rightarrow A$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.085</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(B,0.5_{A})\\rightarrow A$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-2.085</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(B,0.5_{C})\\rightarrow C$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-1.675</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(C,0.2)\\rightarrow F$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(C,0.8)\\rightarrow D$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0.814</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(D,0.4)\\rightarrow \\begin{cases}B,0.2\\\\C,0.4\\\\D,0.4\\end{cases}$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>-0.932</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(D,0.6)\\rightarrow E$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$(E,1.0)\\rightarrow F$</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">……</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这是代码计算的结果，接下来我使$\\gamma =1$，计算结果如下，每迭代100次输出一下：</p>\n<p><img src=\"./价值与贝尔曼方程/example1.png\" alt=\"\"></p>\n<p>可以发现，在700至800次迭代后值函数最终收敛。</p>\n<p>如果我将$\\gamma $设置为0.1呢？来看一下结果：</p>\n<p><img src=\"./价值与贝尔曼方程/example2.png\" alt=\"\"></p>\n<p>仅仅需要十几次就可以迭代至收敛。</p>\n<p>如果设置为0呢？会怎么样？看结果：</p>\n<p><img src=\"./价值与贝尔曼方程/example3.png\" alt=\"\"></p>\n<p>仅需一次迭代就可以收敛，而且就是转移状态的立即奖励值，这下可以理解$\\gamma$为什么表示对未来的看重程度了吧。</p>\n<p>一般我们是不会将$\\gamma$设置为0的，从这个例子的直观感受也可以得到，就拿$\\gamma =0$与$\\gamma =0.5来比较$：</p>\n<ul>\n<li><p>$\\gamma =0$状态值最高的是$v(D)=5.2$，这很容易理解，D状态距离最大奖励值10最近，理应最好，这点与$\\gamma =0.5$时相同。</p>\n</li>\n<li><p>但是对于状态C，$\\gamma =0$时认为这个状态最差，$v(C)=-1.6$，$\\gamma =0$时认为这个状态次优，$v(C)=0.651$，其实这就是目光短浅与目光长远的不同，$\\gamma =0$并没有考虑到其附近状态的临近状态的价值，导致其主观的认为最接近我的都是负的，于是状态肯定差。</p>\n</li>\n<li><p>对于动作值也是一样，一个认为次优，一个认为最差。</p>\n</li>\n</ul>\n<p><strong>注意：并不是说$\\gamma$越接近于1越好，因为在有些问题上，$\\gamma=1$时其值函数永远不收敛，必须设置$0 \\leq \\gamma \\lt 1$，值函数才能收敛。为什么呢？试着计算一下$\\gamma^{n}$，看看对不同的$\\gamma$值，$n$取什么值时结果接近0。</strong></p>\n<p>试着计算一下这个例子，红色代表立即奖励，蓝色代表选择动作的概率以及状态转移的概率，小写字母代表动作，大写字母代表状态。</p>\n<p><img src=\"./价值与贝尔曼方程/example4.png\" alt=\"\"></p>\n<p>$\\gamma =1$时，迭代100W次也不收敛：</p>\n<p><img src=\"./价值与贝尔曼方程/example5.png\" alt=\"\"></p>\n<p>$\\gamma =0.5$时，迭代50多次即可收敛：</p>\n<p><img src=\"./价值与贝尔曼方程/example6.png\" alt=\"\"></p>"},{"title":"强化学习基本概念","copyright":true,"top":1,"date":"2019-04-08T11:23:16.000Z","mathjax":true,"_content":"\n# 强化学习基本概念\n\n学习了这么久的强化学习, 不做笔记总是会忘记, 于是写在博客里方便自己复习, 也与同路人分享.\n\n## 强化学习是什么?\n\n强化学习是什么? 它的英文名字是*Reinforcement Learning*, 和*Machine Learning*一样, 都是以*'ing'*结尾的. 它是一个问题、一组解决这个问题的方案以及探求这些解决方案的方法. 对于问题和方法一定要有清晰的认识, 很多人在学习强化学习时遇到的各种困惑与不解都是因为不能清晰的认识问题和方法的区别和联系.\n\n<!--more-->\n\n强化学习与有监督学习(*supervised learning*)不同. 有监督学习是目前机器学习领域研究最多的方向, 它从由经验丰富的、学识渊博的专家(监督者)提供一系列带有标签(如每个样本被正确分类的类别)的样本数据中进行学习, 这种方法通常被用于分类问题. 有监督学习的目标是当给定一个没有在训练样本集出现的数据时, 可以准确推断出它的标签/类别. 这种有监督学习非常重要而且有用, 但是它没有能力从**交互**中进行学习, 而强化学习在智能体与环境进行交互的过程中进行学习. 为什么有监督学习不能从交互中学习呢? 因为有监督学习需要的近乎完全的样本以及其准确的信息都是在交互问题中很难获得的(不现实的). 在未知的交互场景中, 我们往往只能根据智能体的经验进行学习.\n\n强化学习与无监督学习(*unsupervised learning*)也是不同的. 无监督学习通常被用于发现无标签样本集的隐藏结构. 我们一般任务机器学习只分为有、无监督学习两种, 而且将强化学习分为无监督学习一类. 但其实强化学习与无监督学习有本质的区别. **强化学习的目的是最大化可获得的奖励值**, 而无监督学习是发现隐藏结构. 当然, 如果在强化学习问题中可以发现其样本内的隐藏结构, 这对于强化学习肯定是很有帮助的, 但是仅仅这些隐藏结构并不能处理强化学习最大化奖励值方法的问题. 因此, 我们通常将强化学习归为机器学习的第三个类别, 与有、无监督学习并列.\n\n*注: 在强化学习问题中, 任何可以反映当前动作所带来的影响的元素都可以被理解为奖励值.(个人见解)*\n\n> Reinforcement learning is learning what to do——how to map situations to actions——so as to maxmize a numerical reward signal.\t——《Reinforcement Learning: An Introduction》\n\n强化学习学习的是从状态*s*到要执行的最优动作*a*之间的映射关系, 也就是找到一个策略(函数/逻辑规则)使得在给定状态下通过该策略所产生的决策可以最终带来最大的回报. 学习者不被告知应该采取什么动作, 而是通过训练使它们发现采取什么样的动作可以产生最高的奖励值. 这与婴儿学习的方式很像, 你可能会说:\"瞎讲, 婴儿可以模仿你的动作进行学习.\". 但你要知道, 当你对婴儿的动作进行批评(吵)和奖励(笑)时, 这就已经是一个强化学习的过程了.\n\n## 强化学习的两个要素\n\n强化学习必不可少的两个要素是智能体`Agent`和环境`Environment`.\n既然强化学习是在交互过程中进行学习, 那么交互必定是双方或者多方的, 在强化学习问题中, 交互的双方是智能体和环境.\n\n1. 智能体\n- 智能体是环境的观察者\n- 智能体是策略的载体\n- 智能体是动作的执行者\n3. 环境\n- 环境是对智能体动作的评判者, 即给出立即奖励\n- 环境是智能体进行运动等行为的基本空间\n- 环境给出当前时刻的观察信息, 供智能体进行采集\n\n## 强化学习的两个特点\n\n1. **trial-and-error/试错学习**\n智能体在与环境交互的过程中进行学习时, 不会得到任何人为的或者示例的指导(如果进行指导, 则为有监督学习/模仿学习/逆强化学习等), 智能体只能通过在环境中不断地**试错**, 积累经验, 最终学到可以完成目标并获得最大奖励值的策略.\n2. **delayed reward/延迟奖励**\n在大多数强化学习问题中, 某一状态*s*下执行的动作*a*不仅会影响当前的立即奖励*r*, 而且还会影响后续的状态序列, 以及后续的奖励值. 当前的立即奖励值并不能反映出在这个动作对(*s,a*)对整个决策过程的影响, 只有等到这一决策过程结束时, 才能判断其在这个状态序列的奖励(价值), 所以, 延迟奖励也是强化学习过程中的一个特点.\n\n## 强化学习的难点(Challenge)\n\n相比其他学习, 强化学习中的一大难点是**探索与利用**, 也就是**exploration and exploitation**, 这个难题已经被数学家研究了几十年了, 但仍然没有解决. 为了获得尽量多的奖励, 智能体需要根据过去学习的经验选择产生立即奖励值最高的动作, 但是给定状态下可供选择的动作有很多, 有些被执行过, 有些没有被执行过, 为了去发现产生立即奖励值最高的动作, 必须尝试选择之前被选择过动作. 这个问题就出现了, **智能体必须利用它已经探索过的产生大奖励值的动作, 也必须探索未知奖励值的动作(有可能很小)为了以后可以选择更好的动作**. 只探索不利用、只利用不探索在强化学习问题中都是独木难支. 在随机任务中, 一个同样的动作往往需要被探索很多次才可能对它的期望奖励值有较准确的估计. \n\n## 强化学习的四个元素\n\n除了智能体与环境两个要素之外, 强化学习系统/框架中还有四个子元素: 策略、奖励机制、值函数、模型(未必有).\n\n1. 策略 Policy\n策略定义了智能体在当前时刻应该做出的行为. 与人类的刺激-反应机制很像, 策略是从感知到的环境信息到执行的行为之间的映射, 策略是强化学习智能体的**核心**, 它决定了智能体的行为. 在一般的强化学习问题中, 策略可能是随机的、非确定的, 它通常给出可选择执行的动作的概率或概率分布.\n\n2. 奖励机制 Reward Signal\n奖励机制定义了强化学习问题的**目标**, 在交互的每一步, 环境都会向智能体传递一个数字信息, 我们称之为\"奖励\". 智能体的唯一目标就是在整个交互过程中最大化总的奖励之和. 因此, 奖励定义了某个动作的好坏(但并不意味着坏的动作在交互过程中是坏的, 其作用由值函数来定义). 类比于我们人类, 奖励就像我们高兴或者痛苦一样, 它们是我们对当前环境-动作的立即反应和评价. \n奖励机制是智能体更新策略Policy的基础, 如果智能体成功进行了学习, 当在当前策略选择了一个较低回报的动作时, 之后它可能会选择其他动作. \n通常, 奖励机制由状态*s*和动作*a*的随机函数表示`R(s,a)`\n\n3. 值函数 Value Function\n立即奖励表示着当前动作或状态带来的立即效果是好是坏, 但是值函数表示这个动作在整个交互过程中扮演的角色是好是坏. 一个状态的值是从该状态开始到交互结束所积累的立即奖励的总和.\n一个状态可能总是产生很低的立即奖励, 但是它有很高的值, 因为该状态之后的后续状态中会产生很大的立即奖励. 相反也是一样. 类比于我们人类, 立即奖励的高低相当于我们高兴或痛苦, 但是值函数给出的值则表示了在整个事件过程中我们有多高兴或不高兴的深刻判断. \n引入值函数的唯一目的就是为了训练智能体以获得更大的奖励, 当智能体做决策以及评估决策时, 我们一直关心的都是值函数而不是立即奖励, 对于动作的选择也是基于对值函数的判断/评估. 值比立即奖励更难以确定, 因为立即奖励可以由环境准确的给出, 但是值却需要评估甚至多次评估才可能相对准确(因为有可能交互过程永远不结束, 那么对值的估计会有偏差). 我们希望选择的动作带来最高的值, 而不是最高的立即奖励, 实际上, 几乎所有强化学习算法中最重要的部分就是对于值函数的有效估计方法. 关于值函数估计所扮演的核心角色在近60年被广泛研究. \n\n4. 模型 Model\n模型是对环境行为的仿真, 我们可以通过模型推断出动作对环境的改变, 给出准确的立即奖励和状态信息. 例如, 给定一个状态和动作, 模型可以预测出下一个要转移的状态以及下一个立即奖励值. 如果模型是确定的, 我们一般使用规划(*planning*)的方法来选择最优动作, 对于这种方式我们称之为基于模型**model-based**的方法, 相反, 如果模型是不确定的, 也就是**model-free**, 我们只能通过试错的方式进行学习并选择动作. \n\n*注: 对于什么是model-based和model-free将在以后进行深入讨论.*\n\n## 强化学习的目标\n\n与目标识别为了最小化误差损失不同，强化学习的目的是寻到一个策略，使得期望（折扣）奖励最大化。\n\n## 强化学习的通用符号表示 Notation\n\n$←$\t赋值\n\n$\\varepsilon$ 在$\\varepsilon-greedy$策略中随机选择动作的概率\n\n$\\gamma$ 计算总奖励的折扣因子\n\n$\\lambda$ 资格迹的衰减率或者GAE的权重因子\n\n$s,s'$ 状态，下一个状态\n\n$a$ 一个动作\n\n$r$ 一个奖励值（标量）\n\n$S$ 状态集（不包含终态）\n\n$S^{+}$ 状态集（包含终态）\n\n$A(s)$ $s$状态下可选择的动作\n\n$R$ 奖励集合\n\n$|S|$ 状态集中的元素数\n\n$t$ 单个时间步\n\n$T$ 一个episode的终态时间点\n\n$A_{t}$ $t$时刻选择的动作\n\n$S_{t}$ $t$时刻所在的状态\n\n$R_{t}$ $t$时刻获得的奖励\n\n$\\pi$ 策略（从状态到动作的映射）\n\n$\\pi(s)$ 在$s$状态下使用$\\pi$策略所选择的动作\n\n$\\pi(a|s)$ 在$s$状态下使用$\\pi$策略选择到动作$a$的概率\n\n$G_{t}$ 以$t$时刻为起始时间点，到终态所能获得的总奖励（回报）\n\n$p(s',r|s,a)$ 在$s$状态执行a动作转移到$s‘$状态并获得奖励值为$r$的概率\n\n$p(s'|s,a)$ 在$s$状态执行$a$动作转移到$s’$状态的概率\n\n$r(s,a)$ 在$s$状态执行$a$动作所获得的**期望**立即奖励（即时奖励）\n\n$r(s,a,s')$ 在$s$状态执行$a$动作转移到$s'$状态所获得的**期望**立即奖励\n\n$v_{\\pi}(s)$ $\\pi$策略下状态$s$的值（以该状态为始态的期望奖励回报）\n\n$v_{*}(s)$ **最优**策略下状态s的值\n\n$q_{\\pi}(s,a)$ $\\pi$策略下状态-行动对$(s,a)$的值\n\n$q_{*}(s,a)$ **最优**策略下状态-行动对$(s,a)$的值\n\n$V,V_{t}$ 状态值的矩阵估计，行和列分别是时间点$t$和每个状态的估计值$v_{\\pi}$或$v_{*}$\n\n$Q,Q_{t}$ 状态-行动对$(s,a)$的矩阵估计，一般为一个3维矩阵,行、列和深度分别为状态、动作、时间点\n\n$V_{t}(s)$ 状态$s$的期望估计值\n\n$\\delta_{t}$ $t$时刻的TD-error时间差分量\n\n$\\theta,\\theta_{t}$ 目标策略的参数（向量）\n\n$\\pi(a|s,\\theta)$ 目标策略的参数为$\\theta$时，在$s$状态选择到$a$动作的概率\n\n$\\pi_{\\theta}$ 表示参数为$\\theta$的策略\n\n$\\nabla{\\pi(a|s,\\theta)}$ $\\pi(a|s,\\theta)$对于参数$\\theta$的偏微分\n\n$J(\\theta)$ 参数为$\\theta$的策略的性能度量、期望奖励(performance measure)\n\n$\\nabla{J(\\theta)}$ 性能度量对于策略参数$\\theta$的偏导数","source":"_posts/强化学习基本概念.md","raw":"---\ntitle: 强化学习基本概念\ncopyright: true\ntop: 1\ndate: 2019-04-08 19:23:16\nmathjax: true\ncategories: ReinforcementLearning\ntags:\n- rl\n---\n\n# 强化学习基本概念\n\n学习了这么久的强化学习, 不做笔记总是会忘记, 于是写在博客里方便自己复习, 也与同路人分享.\n\n## 强化学习是什么?\n\n强化学习是什么? 它的英文名字是*Reinforcement Learning*, 和*Machine Learning*一样, 都是以*'ing'*结尾的. 它是一个问题、一组解决这个问题的方案以及探求这些解决方案的方法. 对于问题和方法一定要有清晰的认识, 很多人在学习强化学习时遇到的各种困惑与不解都是因为不能清晰的认识问题和方法的区别和联系.\n\n<!--more-->\n\n强化学习与有监督学习(*supervised learning*)不同. 有监督学习是目前机器学习领域研究最多的方向, 它从由经验丰富的、学识渊博的专家(监督者)提供一系列带有标签(如每个样本被正确分类的类别)的样本数据中进行学习, 这种方法通常被用于分类问题. 有监督学习的目标是当给定一个没有在训练样本集出现的数据时, 可以准确推断出它的标签/类别. 这种有监督学习非常重要而且有用, 但是它没有能力从**交互**中进行学习, 而强化学习在智能体与环境进行交互的过程中进行学习. 为什么有监督学习不能从交互中学习呢? 因为有监督学习需要的近乎完全的样本以及其准确的信息都是在交互问题中很难获得的(不现实的). 在未知的交互场景中, 我们往往只能根据智能体的经验进行学习.\n\n强化学习与无监督学习(*unsupervised learning*)也是不同的. 无监督学习通常被用于发现无标签样本集的隐藏结构. 我们一般任务机器学习只分为有、无监督学习两种, 而且将强化学习分为无监督学习一类. 但其实强化学习与无监督学习有本质的区别. **强化学习的目的是最大化可获得的奖励值**, 而无监督学习是发现隐藏结构. 当然, 如果在强化学习问题中可以发现其样本内的隐藏结构, 这对于强化学习肯定是很有帮助的, 但是仅仅这些隐藏结构并不能处理强化学习最大化奖励值方法的问题. 因此, 我们通常将强化学习归为机器学习的第三个类别, 与有、无监督学习并列.\n\n*注: 在强化学习问题中, 任何可以反映当前动作所带来的影响的元素都可以被理解为奖励值.(个人见解)*\n\n> Reinforcement learning is learning what to do——how to map situations to actions——so as to maxmize a numerical reward signal.\t——《Reinforcement Learning: An Introduction》\n\n强化学习学习的是从状态*s*到要执行的最优动作*a*之间的映射关系, 也就是找到一个策略(函数/逻辑规则)使得在给定状态下通过该策略所产生的决策可以最终带来最大的回报. 学习者不被告知应该采取什么动作, 而是通过训练使它们发现采取什么样的动作可以产生最高的奖励值. 这与婴儿学习的方式很像, 你可能会说:\"瞎讲, 婴儿可以模仿你的动作进行学习.\". 但你要知道, 当你对婴儿的动作进行批评(吵)和奖励(笑)时, 这就已经是一个强化学习的过程了.\n\n## 强化学习的两个要素\n\n强化学习必不可少的两个要素是智能体`Agent`和环境`Environment`.\n既然强化学习是在交互过程中进行学习, 那么交互必定是双方或者多方的, 在强化学习问题中, 交互的双方是智能体和环境.\n\n1. 智能体\n- 智能体是环境的观察者\n- 智能体是策略的载体\n- 智能体是动作的执行者\n3. 环境\n- 环境是对智能体动作的评判者, 即给出立即奖励\n- 环境是智能体进行运动等行为的基本空间\n- 环境给出当前时刻的观察信息, 供智能体进行采集\n\n## 强化学习的两个特点\n\n1. **trial-and-error/试错学习**\n智能体在与环境交互的过程中进行学习时, 不会得到任何人为的或者示例的指导(如果进行指导, 则为有监督学习/模仿学习/逆强化学习等), 智能体只能通过在环境中不断地**试错**, 积累经验, 最终学到可以完成目标并获得最大奖励值的策略.\n2. **delayed reward/延迟奖励**\n在大多数强化学习问题中, 某一状态*s*下执行的动作*a*不仅会影响当前的立即奖励*r*, 而且还会影响后续的状态序列, 以及后续的奖励值. 当前的立即奖励值并不能反映出在这个动作对(*s,a*)对整个决策过程的影响, 只有等到这一决策过程结束时, 才能判断其在这个状态序列的奖励(价值), 所以, 延迟奖励也是强化学习过程中的一个特点.\n\n## 强化学习的难点(Challenge)\n\n相比其他学习, 强化学习中的一大难点是**探索与利用**, 也就是**exploration and exploitation**, 这个难题已经被数学家研究了几十年了, 但仍然没有解决. 为了获得尽量多的奖励, 智能体需要根据过去学习的经验选择产生立即奖励值最高的动作, 但是给定状态下可供选择的动作有很多, 有些被执行过, 有些没有被执行过, 为了去发现产生立即奖励值最高的动作, 必须尝试选择之前被选择过动作. 这个问题就出现了, **智能体必须利用它已经探索过的产生大奖励值的动作, 也必须探索未知奖励值的动作(有可能很小)为了以后可以选择更好的动作**. 只探索不利用、只利用不探索在强化学习问题中都是独木难支. 在随机任务中, 一个同样的动作往往需要被探索很多次才可能对它的期望奖励值有较准确的估计. \n\n## 强化学习的四个元素\n\n除了智能体与环境两个要素之外, 强化学习系统/框架中还有四个子元素: 策略、奖励机制、值函数、模型(未必有).\n\n1. 策略 Policy\n策略定义了智能体在当前时刻应该做出的行为. 与人类的刺激-反应机制很像, 策略是从感知到的环境信息到执行的行为之间的映射, 策略是强化学习智能体的**核心**, 它决定了智能体的行为. 在一般的强化学习问题中, 策略可能是随机的、非确定的, 它通常给出可选择执行的动作的概率或概率分布.\n\n2. 奖励机制 Reward Signal\n奖励机制定义了强化学习问题的**目标**, 在交互的每一步, 环境都会向智能体传递一个数字信息, 我们称之为\"奖励\". 智能体的唯一目标就是在整个交互过程中最大化总的奖励之和. 因此, 奖励定义了某个动作的好坏(但并不意味着坏的动作在交互过程中是坏的, 其作用由值函数来定义). 类比于我们人类, 奖励就像我们高兴或者痛苦一样, 它们是我们对当前环境-动作的立即反应和评价. \n奖励机制是智能体更新策略Policy的基础, 如果智能体成功进行了学习, 当在当前策略选择了一个较低回报的动作时, 之后它可能会选择其他动作. \n通常, 奖励机制由状态*s*和动作*a*的随机函数表示`R(s,a)`\n\n3. 值函数 Value Function\n立即奖励表示着当前动作或状态带来的立即效果是好是坏, 但是值函数表示这个动作在整个交互过程中扮演的角色是好是坏. 一个状态的值是从该状态开始到交互结束所积累的立即奖励的总和.\n一个状态可能总是产生很低的立即奖励, 但是它有很高的值, 因为该状态之后的后续状态中会产生很大的立即奖励. 相反也是一样. 类比于我们人类, 立即奖励的高低相当于我们高兴或痛苦, 但是值函数给出的值则表示了在整个事件过程中我们有多高兴或不高兴的深刻判断. \n引入值函数的唯一目的就是为了训练智能体以获得更大的奖励, 当智能体做决策以及评估决策时, 我们一直关心的都是值函数而不是立即奖励, 对于动作的选择也是基于对值函数的判断/评估. 值比立即奖励更难以确定, 因为立即奖励可以由环境准确的给出, 但是值却需要评估甚至多次评估才可能相对准确(因为有可能交互过程永远不结束, 那么对值的估计会有偏差). 我们希望选择的动作带来最高的值, 而不是最高的立即奖励, 实际上, 几乎所有强化学习算法中最重要的部分就是对于值函数的有效估计方法. 关于值函数估计所扮演的核心角色在近60年被广泛研究. \n\n4. 模型 Model\n模型是对环境行为的仿真, 我们可以通过模型推断出动作对环境的改变, 给出准确的立即奖励和状态信息. 例如, 给定一个状态和动作, 模型可以预测出下一个要转移的状态以及下一个立即奖励值. 如果模型是确定的, 我们一般使用规划(*planning*)的方法来选择最优动作, 对于这种方式我们称之为基于模型**model-based**的方法, 相反, 如果模型是不确定的, 也就是**model-free**, 我们只能通过试错的方式进行学习并选择动作. \n\n*注: 对于什么是model-based和model-free将在以后进行深入讨论.*\n\n## 强化学习的目标\n\n与目标识别为了最小化误差损失不同，强化学习的目的是寻到一个策略，使得期望（折扣）奖励最大化。\n\n## 强化学习的通用符号表示 Notation\n\n$←$\t赋值\n\n$\\varepsilon$ 在$\\varepsilon-greedy$策略中随机选择动作的概率\n\n$\\gamma$ 计算总奖励的折扣因子\n\n$\\lambda$ 资格迹的衰减率或者GAE的权重因子\n\n$s,s'$ 状态，下一个状态\n\n$a$ 一个动作\n\n$r$ 一个奖励值（标量）\n\n$S$ 状态集（不包含终态）\n\n$S^{+}$ 状态集（包含终态）\n\n$A(s)$ $s$状态下可选择的动作\n\n$R$ 奖励集合\n\n$|S|$ 状态集中的元素数\n\n$t$ 单个时间步\n\n$T$ 一个episode的终态时间点\n\n$A_{t}$ $t$时刻选择的动作\n\n$S_{t}$ $t$时刻所在的状态\n\n$R_{t}$ $t$时刻获得的奖励\n\n$\\pi$ 策略（从状态到动作的映射）\n\n$\\pi(s)$ 在$s$状态下使用$\\pi$策略所选择的动作\n\n$\\pi(a|s)$ 在$s$状态下使用$\\pi$策略选择到动作$a$的概率\n\n$G_{t}$ 以$t$时刻为起始时间点，到终态所能获得的总奖励（回报）\n\n$p(s',r|s,a)$ 在$s$状态执行a动作转移到$s‘$状态并获得奖励值为$r$的概率\n\n$p(s'|s,a)$ 在$s$状态执行$a$动作转移到$s’$状态的概率\n\n$r(s,a)$ 在$s$状态执行$a$动作所获得的**期望**立即奖励（即时奖励）\n\n$r(s,a,s')$ 在$s$状态执行$a$动作转移到$s'$状态所获得的**期望**立即奖励\n\n$v_{\\pi}(s)$ $\\pi$策略下状态$s$的值（以该状态为始态的期望奖励回报）\n\n$v_{*}(s)$ **最优**策略下状态s的值\n\n$q_{\\pi}(s,a)$ $\\pi$策略下状态-行动对$(s,a)$的值\n\n$q_{*}(s,a)$ **最优**策略下状态-行动对$(s,a)$的值\n\n$V,V_{t}$ 状态值的矩阵估计，行和列分别是时间点$t$和每个状态的估计值$v_{\\pi}$或$v_{*}$\n\n$Q,Q_{t}$ 状态-行动对$(s,a)$的矩阵估计，一般为一个3维矩阵,行、列和深度分别为状态、动作、时间点\n\n$V_{t}(s)$ 状态$s$的期望估计值\n\n$\\delta_{t}$ $t$时刻的TD-error时间差分量\n\n$\\theta,\\theta_{t}$ 目标策略的参数（向量）\n\n$\\pi(a|s,\\theta)$ 目标策略的参数为$\\theta$时，在$s$状态选择到$a$动作的概率\n\n$\\pi_{\\theta}$ 表示参数为$\\theta$的策略\n\n$\\nabla{\\pi(a|s,\\theta)}$ $\\pi(a|s,\\theta)$对于参数$\\theta$的偏微分\n\n$J(\\theta)$ 参数为$\\theta$的策略的性能度量、期望奖励(performance measure)\n\n$\\nabla{J(\\theta)}$ 性能度量对于策略参数$\\theta$的偏导数","slug":"强化学习基本概念","published":1,"updated":"2019-05-12T10:38:59.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaabu002gm8venlon6nq6","content":"<h1 id=\"强化学习基本概念\"><a href=\"#强化学习基本概念\" class=\"headerlink\" title=\"强化学习基本概念\"></a>强化学习基本概念</h1><p>学习了这么久的强化学习, 不做笔记总是会忘记, 于是写在博客里方便自己复习, 也与同路人分享.</p>\n<h2 id=\"强化学习是什么\"><a href=\"#强化学习是什么\" class=\"headerlink\" title=\"强化学习是什么?\"></a>强化学习是什么?</h2><p>强化学习是什么? 它的英文名字是<em>Reinforcement Learning</em>, 和<em>Machine Learning</em>一样, 都是以<em>‘ing’</em>结尾的. 它是一个问题、一组解决这个问题的方案以及探求这些解决方案的方法. 对于问题和方法一定要有清晰的认识, 很多人在学习强化学习时遇到的各种困惑与不解都是因为不能清晰的认识问题和方法的区别和联系.</p>\n<a id=\"more\"></a>\n<p>强化学习与有监督学习(<em>supervised learning</em>)不同. 有监督学习是目前机器学习领域研究最多的方向, 它从由经验丰富的、学识渊博的专家(监督者)提供一系列带有标签(如每个样本被正确分类的类别)的样本数据中进行学习, 这种方法通常被用于分类问题. 有监督学习的目标是当给定一个没有在训练样本集出现的数据时, 可以准确推断出它的标签/类别. 这种有监督学习非常重要而且有用, 但是它没有能力从<strong>交互</strong>中进行学习, 而强化学习在智能体与环境进行交互的过程中进行学习. 为什么有监督学习不能从交互中学习呢? 因为有监督学习需要的近乎完全的样本以及其准确的信息都是在交互问题中很难获得的(不现实的). 在未知的交互场景中, 我们往往只能根据智能体的经验进行学习.</p>\n<p>强化学习与无监督学习(<em>unsupervised learning</em>)也是不同的. 无监督学习通常被用于发现无标签样本集的隐藏结构. 我们一般任务机器学习只分为有、无监督学习两种, 而且将强化学习分为无监督学习一类. 但其实强化学习与无监督学习有本质的区别. <strong>强化学习的目的是最大化可获得的奖励值</strong>, 而无监督学习是发现隐藏结构. 当然, 如果在强化学习问题中可以发现其样本内的隐藏结构, 这对于强化学习肯定是很有帮助的, 但是仅仅这些隐藏结构并不能处理强化学习最大化奖励值方法的问题. 因此, 我们通常将强化学习归为机器学习的第三个类别, 与有、无监督学习并列.</p>\n<p><em>注: 在强化学习问题中, 任何可以反映当前动作所带来的影响的元素都可以被理解为奖励值.(个人见解)</em></p>\n<blockquote>\n<p>Reinforcement learning is learning what to do——how to map situations to actions——so as to maxmize a numerical reward signal.    ——《Reinforcement Learning: An Introduction》</p>\n</blockquote>\n<p>强化学习学习的是从状态<em>s</em>到要执行的最优动作<em>a</em>之间的映射关系, 也就是找到一个策略(函数/逻辑规则)使得在给定状态下通过该策略所产生的决策可以最终带来最大的回报. 学习者不被告知应该采取什么动作, 而是通过训练使它们发现采取什么样的动作可以产生最高的奖励值. 这与婴儿学习的方式很像, 你可能会说:”瞎讲, 婴儿可以模仿你的动作进行学习.”. 但你要知道, 当你对婴儿的动作进行批评(吵)和奖励(笑)时, 这就已经是一个强化学习的过程了.</p>\n<h2 id=\"强化学习的两个要素\"><a href=\"#强化学习的两个要素\" class=\"headerlink\" title=\"强化学习的两个要素\"></a>强化学习的两个要素</h2><p>强化学习必不可少的两个要素是智能体<code>Agent</code>和环境<code>Environment</code>.<br>既然强化学习是在交互过程中进行学习, 那么交互必定是双方或者多方的, 在强化学习问题中, 交互的双方是智能体和环境.</p>\n<ol>\n<li>智能体</li>\n</ol>\n<ul>\n<li>智能体是环境的观察者</li>\n<li>智能体是策略的载体</li>\n<li>智能体是动作的执行者</li>\n</ul>\n<ol>\n<li>环境</li>\n</ol>\n<ul>\n<li>环境是对智能体动作的评判者, 即给出立即奖励</li>\n<li>环境是智能体进行运动等行为的基本空间</li>\n<li>环境给出当前时刻的观察信息, 供智能体进行采集</li>\n</ul>\n<h2 id=\"强化学习的两个特点\"><a href=\"#强化学习的两个特点\" class=\"headerlink\" title=\"强化学习的两个特点\"></a>强化学习的两个特点</h2><ol>\n<li><strong>trial-and-error/试错学习</strong><br>智能体在与环境交互的过程中进行学习时, 不会得到任何人为的或者示例的指导(如果进行指导, 则为有监督学习/模仿学习/逆强化学习等), 智能体只能通过在环境中不断地<strong>试错</strong>, 积累经验, 最终学到可以完成目标并获得最大奖励值的策略.</li>\n<li><strong>delayed reward/延迟奖励</strong><br>在大多数强化学习问题中, 某一状态<em>s</em>下执行的动作<em>a</em>不仅会影响当前的立即奖励<em>r</em>, 而且还会影响后续的状态序列, 以及后续的奖励值. 当前的立即奖励值并不能反映出在这个动作对(<em>s,a</em>)对整个决策过程的影响, 只有等到这一决策过程结束时, 才能判断其在这个状态序列的奖励(价值), 所以, 延迟奖励也是强化学习过程中的一个特点.</li>\n</ol>\n<h2 id=\"强化学习的难点-Challenge\"><a href=\"#强化学习的难点-Challenge\" class=\"headerlink\" title=\"强化学习的难点(Challenge)\"></a>强化学习的难点(Challenge)</h2><p>相比其他学习, 强化学习中的一大难点是<strong>探索与利用</strong>, 也就是<strong>exploration and exploitation</strong>, 这个难题已经被数学家研究了几十年了, 但仍然没有解决. 为了获得尽量多的奖励, 智能体需要根据过去学习的经验选择产生立即奖励值最高的动作, 但是给定状态下可供选择的动作有很多, 有些被执行过, 有些没有被执行过, 为了去发现产生立即奖励值最高的动作, 必须尝试选择之前被选择过动作. 这个问题就出现了, <strong>智能体必须利用它已经探索过的产生大奖励值的动作, 也必须探索未知奖励值的动作(有可能很小)为了以后可以选择更好的动作</strong>. 只探索不利用、只利用不探索在强化学习问题中都是独木难支. 在随机任务中, 一个同样的动作往往需要被探索很多次才可能对它的期望奖励值有较准确的估计. </p>\n<h2 id=\"强化学习的四个元素\"><a href=\"#强化学习的四个元素\" class=\"headerlink\" title=\"强化学习的四个元素\"></a>强化学习的四个元素</h2><p>除了智能体与环境两个要素之外, 强化学习系统/框架中还有四个子元素: 策略、奖励机制、值函数、模型(未必有).</p>\n<ol>\n<li><p>策略 Policy<br>策略定义了智能体在当前时刻应该做出的行为. 与人类的刺激-反应机制很像, 策略是从感知到的环境信息到执行的行为之间的映射, 策略是强化学习智能体的<strong>核心</strong>, 它决定了智能体的行为. 在一般的强化学习问题中, 策略可能是随机的、非确定的, 它通常给出可选择执行的动作的概率或概率分布.</p>\n</li>\n<li><p>奖励机制 Reward Signal<br>奖励机制定义了强化学习问题的<strong>目标</strong>, 在交互的每一步, 环境都会向智能体传递一个数字信息, 我们称之为”奖励”. 智能体的唯一目标就是在整个交互过程中最大化总的奖励之和. 因此, 奖励定义了某个动作的好坏(但并不意味着坏的动作在交互过程中是坏的, 其作用由值函数来定义). 类比于我们人类, 奖励就像我们高兴或者痛苦一样, 它们是我们对当前环境-动作的立即反应和评价.<br>奖励机制是智能体更新策略Policy的基础, 如果智能体成功进行了学习, 当在当前策略选择了一个较低回报的动作时, 之后它可能会选择其他动作.<br>通常, 奖励机制由状态<em>s</em>和动作<em>a</em>的随机函数表示<code>R(s,a)</code></p>\n</li>\n<li><p>值函数 Value Function<br>立即奖励表示着当前动作或状态带来的立即效果是好是坏, 但是值函数表示这个动作在整个交互过程中扮演的角色是好是坏. 一个状态的值是从该状态开始到交互结束所积累的立即奖励的总和.<br>一个状态可能总是产生很低的立即奖励, 但是它有很高的值, 因为该状态之后的后续状态中会产生很大的立即奖励. 相反也是一样. 类比于我们人类, 立即奖励的高低相当于我们高兴或痛苦, 但是值函数给出的值则表示了在整个事件过程中我们有多高兴或不高兴的深刻判断.<br>引入值函数的唯一目的就是为了训练智能体以获得更大的奖励, 当智能体做决策以及评估决策时, 我们一直关心的都是值函数而不是立即奖励, 对于动作的选择也是基于对值函数的判断/评估. 值比立即奖励更难以确定, 因为立即奖励可以由环境准确的给出, 但是值却需要评估甚至多次评估才可能相对准确(因为有可能交互过程永远不结束, 那么对值的估计会有偏差). 我们希望选择的动作带来最高的值, 而不是最高的立即奖励, 实际上, 几乎所有强化学习算法中最重要的部分就是对于值函数的有效估计方法. 关于值函数估计所扮演的核心角色在近60年被广泛研究. </p>\n</li>\n<li><p>模型 Model<br>模型是对环境行为的仿真, 我们可以通过模型推断出动作对环境的改变, 给出准确的立即奖励和状态信息. 例如, 给定一个状态和动作, 模型可以预测出下一个要转移的状态以及下一个立即奖励值. 如果模型是确定的, 我们一般使用规划(<em>planning</em>)的方法来选择最优动作, 对于这种方式我们称之为基于模型<strong>model-based</strong>的方法, 相反, 如果模型是不确定的, 也就是<strong>model-free</strong>, 我们只能通过试错的方式进行学习并选择动作. </p>\n</li>\n</ol>\n<p><em>注: 对于什么是model-based和model-free将在以后进行深入讨论.</em></p>\n<h2 id=\"强化学习的目标\"><a href=\"#强化学习的目标\" class=\"headerlink\" title=\"强化学习的目标\"></a>强化学习的目标</h2><p>与目标识别为了最小化误差损失不同，强化学习的目的是寻到一个策略，使得期望（折扣）奖励最大化。</p>\n<h2 id=\"强化学习的通用符号表示-Notation\"><a href=\"#强化学习的通用符号表示-Notation\" class=\"headerlink\" title=\"强化学习的通用符号表示 Notation\"></a>强化学习的通用符号表示 Notation</h2><p>$←$    赋值</p>\n<p>$\\varepsilon$ 在$\\varepsilon-greedy$策略中随机选择动作的概率</p>\n<p>$\\gamma$ 计算总奖励的折扣因子</p>\n<p>$\\lambda$ 资格迹的衰减率或者GAE的权重因子</p>\n<p>$s,s’$ 状态，下一个状态</p>\n<p>$a$ 一个动作</p>\n<p>$r$ 一个奖励值（标量）</p>\n<p>$S$ 状态集（不包含终态）</p>\n<p>$S^{+}$ 状态集（包含终态）</p>\n<p>$A(s)$ $s$状态下可选择的动作</p>\n<p>$R$ 奖励集合</p>\n<p>$|S|$ 状态集中的元素数</p>\n<p>$t$ 单个时间步</p>\n<p>$T$ 一个episode的终态时间点</p>\n<p>$A_{t}$ $t$时刻选择的动作</p>\n<p>$S_{t}$ $t$时刻所在的状态</p>\n<p>$R_{t}$ $t$时刻获得的奖励</p>\n<p>$\\pi$ 策略（从状态到动作的映射）</p>\n<p>$\\pi(s)$ 在$s$状态下使用$\\pi$策略所选择的动作</p>\n<p>$\\pi(a|s)$ 在$s$状态下使用$\\pi$策略选择到动作$a$的概率</p>\n<p>$G_{t}$ 以$t$时刻为起始时间点，到终态所能获得的总奖励（回报）</p>\n<p>$p(s’,r|s,a)$ 在$s$状态执行a动作转移到$s‘$状态并获得奖励值为$r$的概率</p>\n<p>$p(s’|s,a)$ 在$s$状态执行$a$动作转移到$s’$状态的概率</p>\n<p>$r(s,a)$ 在$s$状态执行$a$动作所获得的<strong>期望</strong>立即奖励（即时奖励）</p>\n<p>$r(s,a,s’)$ 在$s$状态执行$a$动作转移到$s’$状态所获得的<strong>期望</strong>立即奖励</p>\n<p>$v_{\\pi}(s)$ $\\pi$策略下状态$s$的值（以该状态为始态的期望奖励回报）</p>\n<p>$v_{<em>}(s)$ <em>*最优</em></em>策略下状态s的值</p>\n<p>$q_{\\pi}(s,a)$ $\\pi$策略下状态-行动对$(s,a)$的值</p>\n<p>$q_{<em>}(s,a)$ <em>*最优</em></em>策略下状态-行动对$(s,a)$的值</p>\n<p>$V,V_{t}$ 状态值的矩阵估计，行和列分别是时间点$t$和每个状态的估计值$v_{\\pi}$或$v_{*}$</p>\n<p>$Q,Q_{t}$ 状态-行动对$(s,a)$的矩阵估计，一般为一个3维矩阵,行、列和深度分别为状态、动作、时间点</p>\n<p>$V_{t}(s)$ 状态$s$的期望估计值</p>\n<p>$\\delta_{t}$ $t$时刻的TD-error时间差分量</p>\n<p>$\\theta,\\theta_{t}$ 目标策略的参数（向量）</p>\n<p>$\\pi(a|s,\\theta)$ 目标策略的参数为$\\theta$时，在$s$状态选择到$a$动作的概率</p>\n<p>$\\pi_{\\theta}$ 表示参数为$\\theta$的策略</p>\n<p>$\\nabla{\\pi(a|s,\\theta)}$ $\\pi(a|s,\\theta)$对于参数$\\theta$的偏微分</p>\n<p>$J(\\theta)$ 参数为$\\theta$的策略的性能度量、期望奖励(performance measure)</p>\n<p>$\\nabla{J(\\theta)}$ 性能度量对于策略参数$\\theta$的偏导数</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"强化学习基本概念\"><a href=\"#强化学习基本概念\" class=\"headerlink\" title=\"强化学习基本概念\"></a>强化学习基本概念</h1><p>学习了这么久的强化学习, 不做笔记总是会忘记, 于是写在博客里方便自己复习, 也与同路人分享.</p>\n<h2 id=\"强化学习是什么\"><a href=\"#强化学习是什么\" class=\"headerlink\" title=\"强化学习是什么?\"></a>强化学习是什么?</h2><p>强化学习是什么? 它的英文名字是<em>Reinforcement Learning</em>, 和<em>Machine Learning</em>一样, 都是以<em>‘ing’</em>结尾的. 它是一个问题、一组解决这个问题的方案以及探求这些解决方案的方法. 对于问题和方法一定要有清晰的认识, 很多人在学习强化学习时遇到的各种困惑与不解都是因为不能清晰的认识问题和方法的区别和联系.</p>","more":"<p>强化学习与有监督学习(<em>supervised learning</em>)不同. 有监督学习是目前机器学习领域研究最多的方向, 它从由经验丰富的、学识渊博的专家(监督者)提供一系列带有标签(如每个样本被正确分类的类别)的样本数据中进行学习, 这种方法通常被用于分类问题. 有监督学习的目标是当给定一个没有在训练样本集出现的数据时, 可以准确推断出它的标签/类别. 这种有监督学习非常重要而且有用, 但是它没有能力从<strong>交互</strong>中进行学习, 而强化学习在智能体与环境进行交互的过程中进行学习. 为什么有监督学习不能从交互中学习呢? 因为有监督学习需要的近乎完全的样本以及其准确的信息都是在交互问题中很难获得的(不现实的). 在未知的交互场景中, 我们往往只能根据智能体的经验进行学习.</p>\n<p>强化学习与无监督学习(<em>unsupervised learning</em>)也是不同的. 无监督学习通常被用于发现无标签样本集的隐藏结构. 我们一般任务机器学习只分为有、无监督学习两种, 而且将强化学习分为无监督学习一类. 但其实强化学习与无监督学习有本质的区别. <strong>强化学习的目的是最大化可获得的奖励值</strong>, 而无监督学习是发现隐藏结构. 当然, 如果在强化学习问题中可以发现其样本内的隐藏结构, 这对于强化学习肯定是很有帮助的, 但是仅仅这些隐藏结构并不能处理强化学习最大化奖励值方法的问题. 因此, 我们通常将强化学习归为机器学习的第三个类别, 与有、无监督学习并列.</p>\n<p><em>注: 在强化学习问题中, 任何可以反映当前动作所带来的影响的元素都可以被理解为奖励值.(个人见解)</em></p>\n<blockquote>\n<p>Reinforcement learning is learning what to do——how to map situations to actions——so as to maxmize a numerical reward signal.    ——《Reinforcement Learning: An Introduction》</p>\n</blockquote>\n<p>强化学习学习的是从状态<em>s</em>到要执行的最优动作<em>a</em>之间的映射关系, 也就是找到一个策略(函数/逻辑规则)使得在给定状态下通过该策略所产生的决策可以最终带来最大的回报. 学习者不被告知应该采取什么动作, 而是通过训练使它们发现采取什么样的动作可以产生最高的奖励值. 这与婴儿学习的方式很像, 你可能会说:”瞎讲, 婴儿可以模仿你的动作进行学习.”. 但你要知道, 当你对婴儿的动作进行批评(吵)和奖励(笑)时, 这就已经是一个强化学习的过程了.</p>\n<h2 id=\"强化学习的两个要素\"><a href=\"#强化学习的两个要素\" class=\"headerlink\" title=\"强化学习的两个要素\"></a>强化学习的两个要素</h2><p>强化学习必不可少的两个要素是智能体<code>Agent</code>和环境<code>Environment</code>.<br>既然强化学习是在交互过程中进行学习, 那么交互必定是双方或者多方的, 在强化学习问题中, 交互的双方是智能体和环境.</p>\n<ol>\n<li>智能体</li>\n</ol>\n<ul>\n<li>智能体是环境的观察者</li>\n<li>智能体是策略的载体</li>\n<li>智能体是动作的执行者</li>\n</ul>\n<ol>\n<li>环境</li>\n</ol>\n<ul>\n<li>环境是对智能体动作的评判者, 即给出立即奖励</li>\n<li>环境是智能体进行运动等行为的基本空间</li>\n<li>环境给出当前时刻的观察信息, 供智能体进行采集</li>\n</ul>\n<h2 id=\"强化学习的两个特点\"><a href=\"#强化学习的两个特点\" class=\"headerlink\" title=\"强化学习的两个特点\"></a>强化学习的两个特点</h2><ol>\n<li><strong>trial-and-error/试错学习</strong><br>智能体在与环境交互的过程中进行学习时, 不会得到任何人为的或者示例的指导(如果进行指导, 则为有监督学习/模仿学习/逆强化学习等), 智能体只能通过在环境中不断地<strong>试错</strong>, 积累经验, 最终学到可以完成目标并获得最大奖励值的策略.</li>\n<li><strong>delayed reward/延迟奖励</strong><br>在大多数强化学习问题中, 某一状态<em>s</em>下执行的动作<em>a</em>不仅会影响当前的立即奖励<em>r</em>, 而且还会影响后续的状态序列, 以及后续的奖励值. 当前的立即奖励值并不能反映出在这个动作对(<em>s,a</em>)对整个决策过程的影响, 只有等到这一决策过程结束时, 才能判断其在这个状态序列的奖励(价值), 所以, 延迟奖励也是强化学习过程中的一个特点.</li>\n</ol>\n<h2 id=\"强化学习的难点-Challenge\"><a href=\"#强化学习的难点-Challenge\" class=\"headerlink\" title=\"强化学习的难点(Challenge)\"></a>强化学习的难点(Challenge)</h2><p>相比其他学习, 强化学习中的一大难点是<strong>探索与利用</strong>, 也就是<strong>exploration and exploitation</strong>, 这个难题已经被数学家研究了几十年了, 但仍然没有解决. 为了获得尽量多的奖励, 智能体需要根据过去学习的经验选择产生立即奖励值最高的动作, 但是给定状态下可供选择的动作有很多, 有些被执行过, 有些没有被执行过, 为了去发现产生立即奖励值最高的动作, 必须尝试选择之前被选择过动作. 这个问题就出现了, <strong>智能体必须利用它已经探索过的产生大奖励值的动作, 也必须探索未知奖励值的动作(有可能很小)为了以后可以选择更好的动作</strong>. 只探索不利用、只利用不探索在强化学习问题中都是独木难支. 在随机任务中, 一个同样的动作往往需要被探索很多次才可能对它的期望奖励值有较准确的估计. </p>\n<h2 id=\"强化学习的四个元素\"><a href=\"#强化学习的四个元素\" class=\"headerlink\" title=\"强化学习的四个元素\"></a>强化学习的四个元素</h2><p>除了智能体与环境两个要素之外, 强化学习系统/框架中还有四个子元素: 策略、奖励机制、值函数、模型(未必有).</p>\n<ol>\n<li><p>策略 Policy<br>策略定义了智能体在当前时刻应该做出的行为. 与人类的刺激-反应机制很像, 策略是从感知到的环境信息到执行的行为之间的映射, 策略是强化学习智能体的<strong>核心</strong>, 它决定了智能体的行为. 在一般的强化学习问题中, 策略可能是随机的、非确定的, 它通常给出可选择执行的动作的概率或概率分布.</p>\n</li>\n<li><p>奖励机制 Reward Signal<br>奖励机制定义了强化学习问题的<strong>目标</strong>, 在交互的每一步, 环境都会向智能体传递一个数字信息, 我们称之为”奖励”. 智能体的唯一目标就是在整个交互过程中最大化总的奖励之和. 因此, 奖励定义了某个动作的好坏(但并不意味着坏的动作在交互过程中是坏的, 其作用由值函数来定义). 类比于我们人类, 奖励就像我们高兴或者痛苦一样, 它们是我们对当前环境-动作的立即反应和评价.<br>奖励机制是智能体更新策略Policy的基础, 如果智能体成功进行了学习, 当在当前策略选择了一个较低回报的动作时, 之后它可能会选择其他动作.<br>通常, 奖励机制由状态<em>s</em>和动作<em>a</em>的随机函数表示<code>R(s,a)</code></p>\n</li>\n<li><p>值函数 Value Function<br>立即奖励表示着当前动作或状态带来的立即效果是好是坏, 但是值函数表示这个动作在整个交互过程中扮演的角色是好是坏. 一个状态的值是从该状态开始到交互结束所积累的立即奖励的总和.<br>一个状态可能总是产生很低的立即奖励, 但是它有很高的值, 因为该状态之后的后续状态中会产生很大的立即奖励. 相反也是一样. 类比于我们人类, 立即奖励的高低相当于我们高兴或痛苦, 但是值函数给出的值则表示了在整个事件过程中我们有多高兴或不高兴的深刻判断.<br>引入值函数的唯一目的就是为了训练智能体以获得更大的奖励, 当智能体做决策以及评估决策时, 我们一直关心的都是值函数而不是立即奖励, 对于动作的选择也是基于对值函数的判断/评估. 值比立即奖励更难以确定, 因为立即奖励可以由环境准确的给出, 但是值却需要评估甚至多次评估才可能相对准确(因为有可能交互过程永远不结束, 那么对值的估计会有偏差). 我们希望选择的动作带来最高的值, 而不是最高的立即奖励, 实际上, 几乎所有强化学习算法中最重要的部分就是对于值函数的有效估计方法. 关于值函数估计所扮演的核心角色在近60年被广泛研究. </p>\n</li>\n<li><p>模型 Model<br>模型是对环境行为的仿真, 我们可以通过模型推断出动作对环境的改变, 给出准确的立即奖励和状态信息. 例如, 给定一个状态和动作, 模型可以预测出下一个要转移的状态以及下一个立即奖励值. 如果模型是确定的, 我们一般使用规划(<em>planning</em>)的方法来选择最优动作, 对于这种方式我们称之为基于模型<strong>model-based</strong>的方法, 相反, 如果模型是不确定的, 也就是<strong>model-free</strong>, 我们只能通过试错的方式进行学习并选择动作. </p>\n</li>\n</ol>\n<p><em>注: 对于什么是model-based和model-free将在以后进行深入讨论.</em></p>\n<h2 id=\"强化学习的目标\"><a href=\"#强化学习的目标\" class=\"headerlink\" title=\"强化学习的目标\"></a>强化学习的目标</h2><p>与目标识别为了最小化误差损失不同，强化学习的目的是寻到一个策略，使得期望（折扣）奖励最大化。</p>\n<h2 id=\"强化学习的通用符号表示-Notation\"><a href=\"#强化学习的通用符号表示-Notation\" class=\"headerlink\" title=\"强化学习的通用符号表示 Notation\"></a>强化学习的通用符号表示 Notation</h2><p>$←$    赋值</p>\n<p>$\\varepsilon$ 在$\\varepsilon-greedy$策略中随机选择动作的概率</p>\n<p>$\\gamma$ 计算总奖励的折扣因子</p>\n<p>$\\lambda$ 资格迹的衰减率或者GAE的权重因子</p>\n<p>$s,s’$ 状态，下一个状态</p>\n<p>$a$ 一个动作</p>\n<p>$r$ 一个奖励值（标量）</p>\n<p>$S$ 状态集（不包含终态）</p>\n<p>$S^{+}$ 状态集（包含终态）</p>\n<p>$A(s)$ $s$状态下可选择的动作</p>\n<p>$R$ 奖励集合</p>\n<p>$|S|$ 状态集中的元素数</p>\n<p>$t$ 单个时间步</p>\n<p>$T$ 一个episode的终态时间点</p>\n<p>$A_{t}$ $t$时刻选择的动作</p>\n<p>$S_{t}$ $t$时刻所在的状态</p>\n<p>$R_{t}$ $t$时刻获得的奖励</p>\n<p>$\\pi$ 策略（从状态到动作的映射）</p>\n<p>$\\pi(s)$ 在$s$状态下使用$\\pi$策略所选择的动作</p>\n<p>$\\pi(a|s)$ 在$s$状态下使用$\\pi$策略选择到动作$a$的概率</p>\n<p>$G_{t}$ 以$t$时刻为起始时间点，到终态所能获得的总奖励（回报）</p>\n<p>$p(s’,r|s,a)$ 在$s$状态执行a动作转移到$s‘$状态并获得奖励值为$r$的概率</p>\n<p>$p(s’|s,a)$ 在$s$状态执行$a$动作转移到$s’$状态的概率</p>\n<p>$r(s,a)$ 在$s$状态执行$a$动作所获得的<strong>期望</strong>立即奖励（即时奖励）</p>\n<p>$r(s,a,s’)$ 在$s$状态执行$a$动作转移到$s’$状态所获得的<strong>期望</strong>立即奖励</p>\n<p>$v_{\\pi}(s)$ $\\pi$策略下状态$s$的值（以该状态为始态的期望奖励回报）</p>\n<p>$v_{<em>}(s)$ <em>*最优</em></em>策略下状态s的值</p>\n<p>$q_{\\pi}(s,a)$ $\\pi$策略下状态-行动对$(s,a)$的值</p>\n<p>$q_{<em>}(s,a)$ <em>*最优</em></em>策略下状态-行动对$(s,a)$的值</p>\n<p>$V,V_{t}$ 状态值的矩阵估计，行和列分别是时间点$t$和每个状态的估计值$v_{\\pi}$或$v_{*}$</p>\n<p>$Q,Q_{t}$ 状态-行动对$(s,a)$的矩阵估计，一般为一个3维矩阵,行、列和深度分别为状态、动作、时间点</p>\n<p>$V_{t}(s)$ 状态$s$的期望估计值</p>\n<p>$\\delta_{t}$ $t$时刻的TD-error时间差分量</p>\n<p>$\\theta,\\theta_{t}$ 目标策略的参数（向量）</p>\n<p>$\\pi(a|s,\\theta)$ 目标策略的参数为$\\theta$时，在$s$状态选择到$a$动作的概率</p>\n<p>$\\pi_{\\theta}$ 表示参数为$\\theta$的策略</p>\n<p>$\\nabla{\\pi(a|s,\\theta)}$ $\\pi(a|s,\\theta)$对于参数$\\theta$的偏微分</p>\n<p>$J(\\theta)$ 参数为$\\theta$的策略的性能度量、期望奖励(performance measure)</p>\n<p>$\\nabla{J(\\theta)}$ 性能度量对于策略参数$\\theta$的偏导数</p>"},{"title":"强化学习之MDP马尔科夫决策过程","copyright":true,"top":1,"date":"2019-05-08T03:04:20.000Z","mathjax":true,"_content":"\n# 强化学习之MDP马尔科夫决策过程\n\n每每提到强化学习，最先接触的理论肯定是马尔科夫决策过程（MDP，Markov Decision Process），为什么总提到MDP呢？并不是只有我一个人有这个疑问。\n\n<!--more-->\n\n百度上没有人提出这样的问题，可能是大家理解得都比较透彻吧，于是在Google查到相关提问和解释。\n\n> [What is the relationship between Markov Decision Processes and Reinforcement Learning?](https://datascience.stackexchange.com/a/38851)\n\n>>In Reinforcement Learning (RL), the problem to resolve is described as a Markov Decision Process (MDP). Theoretical results in RL rely on the MDP description being a correct match to the problem. If your problem is well described as a MDP, then RL may be a good framework to use to find solutions. That does not mean you need to fully describe the MDP (all the transition probabilities), just that you expect an MDP model could be made or discovered.\n\n>>Conversely, if you cannot map your problem onto a MDP, then the theory behind RL makes no guarantees of any useful result.\n\n>>One key factor that affects how well RL will work is that the states should have the Markov property - that the value of the current state is enough knowledge to fix immediate transition probabilities and immediate rewards following an action choice. Again you don't need to know in advance what those are, just that this relationship is expected to be reliable and stable. If it is not reliable, you may have a POMDP. If it is not stable, you may have a non-stationary problem. In either case, if the difference from a more strictly defined MDP is small enough, you may still get away with using RL techniques or need to adapt them slightly.\n>>\n>>**The general relationship between RL and MDP is that RL is a framework for solving problems that can be expressed as MDPs.**\n\nMDP是当前强化学习理论推导的基石，对强化学习来说，一般以马尔科夫决策过程作为形式化问题的手段。也就是说，对于目前的绝大部分强化学习算法，只有可以将问题抽象为MDP的才可以确保算法的性能（收敛性，效果等），对于违背MDP的问题并不一定确保算法有效，因为其数学公式都是基于MDP来进行推导的。\n\n## 马尔科夫性\n\n> 马尔科夫性质（英语：Markov property）是概率论中的一个概念，因为俄国数学家安德雷·马尔科夫得名。当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态；换句话说，在给定现在状态时，它与过去状态（即该过程的历史路径）是条件独立的，那么此随机过程即具有马尔科夫性质。[马尔科夫性-百度百科](https://baike.baidu.com/item/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%80%A7%E8%B4%A8/23149887?fr=aladdin)\n\n马尔科夫性，也就是无后效性：**某阶段的状态一旦确定，则此后过程的演变不再受此前各状态及决策的影响**。也就是说，**未来与过去无关**。\n\n具体地说，如果一个问题被划分各个阶段之后，阶段$k$中的状态只能通过阶段$k+1$中的状态通过状态转移方程得来，与其他状态没有关系，特别是与未发生的状态没有关系，这就是无后效性。\n\n公式描述：\n\n$$\nP[S_{t+1}|S_{t}]=P[S_{t+1}|S_{1},...,S_{t}]\n$$\n\n强化学习问题中的状态也符合马尔科夫性，即在当前状态$s_{t}$下执行动作$a_{t}$并转移至下一个状态$s_{t+1}$，而不需要考虑之前的状态$s_{t-1},...,s_{1}$。\n\n举一个不恰当的例子：\n\n![](./强化学习之MDP马尔科夫决策过程/M.jpg)\n\n假设天气预测符合马尔科夫性，如果以每天表示为一种状态，即周一、周二到周日。今天（5月8日，周三）天气为晴，明天（周四）会不会下雨只与今天的天气有关，而与之前周一、周二的天气状况无关。如果以时间节点表示为一种状态，即2点、5点、8点等，如图2点的温度为15.8°C,那么下个时间点5点的气温如何只与2点的温度有关系。\n\n强化学习中默认状态的转移是符合马尔科夫性质的，状态具体是什么，需要根据不同的问题进行不同的设定。\n\n## 马尔科夫过程\n\n马尔科夫过程是随机过程的一种，什么是随机过程呢？简单来说，一个商店从早上营业到晚上打烊这段时间，根据每个时间点店内顾客的人数所组成的序列就是随机过程。随机过程根据时间节点$T_{t}$取到的值是一个变量。\n\n马尔科夫过程是满足马尔科夫性的随机过程，它由二元组$M=(S,P)$组成，且满足：\n\n1. S是有限状态集合\n2. P是状态转移概率矩阵\n\n状态与状态之间的转换过程即为马尔科夫过程。***虽然我们可能不知道P的具体值到底是什么，但是通常我们假设P是存在的（转移概率存在，如果是确定的，无非就是概率为1），而且是稳定的（意思是从状态A到其他状态的转移虽然符合某个分布，但是其转移到某个状态的概率是确定的，不随时间变化的）。***\n\n这里说的**有限**二字我有自己的理解，在最开始的强化学习研究中，解决的都是表格式的问题，也就是状态的数量是有限可取的，但是后续强化学习研究的也有连续状态空间的问题，算法如DQN,PG,PPO等。状态的数量并不是有限的，但是其向量维度则是固定的、有限的，而且也同样符合马尔科夫性质，因此**我认为这里定义的有限并不是说状态数量有限，而是状态维度有限**。因为好像没有无限马尔科夫的叫法，所以姑且这么解释一下。\n\n马尔科夫过程有如下分类：\n\n![](./强化学习之MDP马尔科夫决策过程/MPs.jpg)\n\n### 状态转移矩阵\n\n状态转移矩阵由许多状态转移概率组成，状态转移概率是指从一个马尔科夫状态$s$转移到下一个状态$s'$的概率。\n\n公示表示：\n\n$$\n\\mathcal{P}_{ss'}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]\n$$\n\n等同于：\n\n$$\n\\mathcal{P}(s'|s)=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]\n$$\n\n假设有1到n个状态，将所有的状态从上到下、从左到右排列，组成一个$n \\times n$的矩阵，那么其状态转移矩阵如下所示：\n\n$$\n\\mathcal{P}=\n\\begin{bmatrix}\n\\mathcal{P}_{11} & \\cdots & \\mathcal{P}_{1n} \\\\ \n\\vdots & \\ddots & \\vdots \\\\ \n\\mathcal{P}_{n1} & \\cdots & \\mathcal{P}_{nn} \\\\\n\\end{bmatrix}\n$$\n\n其中，每行元素相加等于1，每列元素相加等于1，矩阵的总和为状态的数量n。\n\n对于可数状态，$\\sum_{s'=1}^{n}\\mathcal{P}(s'|s)=1$\n\n$$\nsum(\\mathcal{P}) = \\sum_{s'=1}^{n}\\sum_{s=1}^{n}\\mathcal{P}_{ss'} = n\n$$\n\n对于不可数状态（连续状态),$\\int_{s'}\\mathcal{P}(s'|s)=1$\n\n$$\nsum(\\mathcal{P}) = \\int_{s'}\\int_{s}\\mathcal{P}_{ss'} = n\n$$\n\n举一个马尔科夫过程的例子:\n\n假设一个学生，他目前在学习语文科目，那么他接下来进行的活动过程如下图所示，游戏的吸引力很大，所以他有50%的概率在学完语文去玩游戏，并且很容易沉迷其中，图示玩游戏这个循环有90%的可能性，他还可以选择学习其他科目或者去睡觉，最终学习结束之后是否能通过考试也是有一定的概率的，这些状态之间转移的概率即为状态转移概率。\n\n![](./强化学习之MDP马尔科夫决策过程/MP.jpg)\n\n如果把例子中的各项状态用字母表示，将其表示为：\n$$\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n挂科 & E\\\\ \n\\mathcal{Pass} & F\\\\ \n睡觉 & G\n\\end{bmatrix}\n$$\n那么其状态转移矩阵$\\mathcal{P}$可以表示成：\n$$\n\\begin{array}{lc}\n\\mbox{}&\n\\begin{array}{cc}A & B & C & D & E & F & G \\end{array}\\\\\n\\begin{array}{c}A\\\\B\\\\C\\\\D\\\\E\\\\F\\\\G\\end{array}&\n\\left[\\begin{array}{cc}\n0.9&0.1\\\\\n0.5& &0.5\\\\\n& & &0.8& & &0.2\\\\\n&&&&0.4&0.6&\\\\\n&0.2&0.4&0.4&&&\\\\\n&&&&&&1\\\\\n&&&&&&&\n\\end{array}\\right]\n\\end{array}\n$$\n\n### 马尔科夫链与Episode\n\nEpisode可以翻译为片段、情节、回合等，在强化学习问题中，一个Episode就是一个马尔科夫链，根据状态转移矩阵可以得到许多不同的episode，也就是多个马尔科夫链。\n\n强化学习问题分两种：\n\n1. 如果一个任务总能达到终态，结束任务或者开启下一轮任务，那么这个任务就被称为回合任务，也就是episode任务。例如，让一个智能体学习如何下围棋，围棋棋盘只有那么大，游戏定会终局，所以是一个回合式任务。\n2. 如果一个任务可以无限持续下去，永远不会结束，即永远在训练当中，那么这个任务就被称为连续性任务。例如，教会一辆车能够进行自动驾驶就是一个连续性任务，*不要钻牛角尖说能源会耗尽，车子会磨损，我们只聚焦问题与环境本身，不涉及其他非稳定因素。*\n\n在上边举的例子中就是一个回合式任务，因为无论这个序列有多长，最终都会达到终态-“睡觉”。\n\n根据上述例子我们可能采样出如下episode：\n\n1. $B-C-D-E-C-G$，即“学语文→数学→英语→考试没通过,挂科→继续学数学→睡觉”\n2. $B-A-A-...-A-B-C-G$，即“学语文→玩王者荣耀→玩刺激战场→玩OverCooker→玩守望先锋→玩英雄联盟→玩CS:GO→...→看一会儿数学→睡觉”。（仿佛就是我自己嘛！）\n\n## 马尔科夫奖励过程\n\n马尔科夫过程（Markov Process）主要描述的是状态之间的转移关系，在各个状态的转移过程中赋予不同的奖励值就得到了马尔科夫奖励过程。\n\n定义：马尔科夫奖励过程（Markov Reward Process, MRP）由一个四元组组成$(S,P,R,\\gamma)$\n\n1. $S$代表了状态的集合(也是维度有限的)\n2. $P$描述了状态转移矩阵$\\mathcal{P}_{ss'}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]$\n3. $R$表示奖励函数，$R(s)$描述了在状态$s$下的期望(立即)奖励，$\\mathcal{R}(s)=\\mathbb{E}[R_{t+1}|S_{t}=s]$\n4. $\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$\n\n$\\gamma$是用来计算累计奖励回报的,表示我们有多看中现在或者未来,为什么这么说呢?假设我们现在要计算一个episode始态$S_{0}$的奖励值$V(S_{0})$,不涉及具体公式推导的说,我们应该把$S_{0}$状态后续的奖励全部加和,这样就得到了对始态$S_{0}$的值估计,这些后续奖励的值的权重都是1,或者说此时$\\gamma=1$,但是当前状态对很多步之后的状态未必影响很大,我们这样计算过来并不能完全表示一个状态的值,那么我们应当顺势减少距离远的状态的权重,此时$\\gamma\\lt1$\n\n- 当$\\gamma=0$时,状态$S$的值完全由其转移的期望立即奖励表示,即**一点都不关心未来**\n- 当$\\gamma=1$时,状态$S$的值由以当前状态为始态,运行至终态所得到的所有立即奖励加和的值表示,即**未来与现在同等重要**\n- 当$0 \\lt\\gamma \\lt1$时,状态$S$的值是前两个模式的*trade-off*,即**对未来看重的程度由$\\gamma$决定**\n\n这只是我们的直观感受,其实是为了数学便利（虽然我也不知道具体哪里提高了数学便利，但是在有些情况下会使值函数更快迭代收敛这是真的）。\n\n*注：也有很多地方将MRP表示为三元组，即去掉$\\gamma$，但这不影响我们对这个过程的理解，下边的MDP也是一样，无论是三元组、四元组、还是五元组，只要能描述过程的性质就可以。*\n\n将上述马尔科夫过程的例子升级为马尔科夫奖励过程如下图所示:\n\n![](./强化学习之MDP马尔科夫决策过程/MRP.png)\n\n奖励值定义为:\n$$\n\\begin{bmatrix}\n玩游戏 & A & -1\\\\ \n语文 & B & -2\\\\ \n数学 & C & -2\\\\ \n英语 & D & -2\\\\ \n挂科 & E & -5\\\\ \n\\mathcal{Pass} & F & 10\\\\ \n睡觉 & G & 0\n\\end{bmatrix}\n$$\n这么定义奖励并没有什么复杂的含义,在这个例子中就拿身心愉悦程度来定义吧,学习固然是枯燥无味的,所以给予负奖励-2,玩游戏虽然会心情放松,但是始终面临着考试的压力,其实并不轻松,所以给予负奖励-1,挂科最痛苦为-5,考试全pass最开心为+10。\n\n在马尔科夫过程中的状态转移加入相应的奖励值即为马尔科夫奖励过程。\n\n\n\n## 马尔科夫决策过程\n\n马尔科夫决策过程(Markov Decision Process, MDP)相比马尔科夫奖励过程多了一个动作$A$,它可以用一个五元组$(S,A,P,R,\\gamma)$表示:\n\n1. $S$代表了状态的集合(也是维度有限的)\n2. $A$代表了决策过程中动作的集合(维度有限的)\n3. $P$描述了状态转移矩阵$\\mathcal{P}_{ss'}^{a}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s,A_{t}=a]$\n4. $R$表示奖励函数，$R(s)$描述了在状态$s$下**执行某动作**的期望(立即)奖励，$\\mathcal{R}(s,a)=\\mathbb{E}[R_{t+1}|S_{t}=s,A_{t}=a]$\n5. $\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$\n\nMDPs是一个从交互中达成目标的强化学习问题的一个直接的框架。学习者和决策者叫做Agent。Agent进行交互的其它一切Agent之外的东西都叫做环境。Agent不断的选择动作，而环境也给出相应的反应，并且向Agent表现出新的状态。环境同时也给出一个数值作为反馈。Agent的目标就是通过选择不同的Action来最大化这个反馈值。\n\n![](./强化学习之MDP马尔科夫决策过程/agent-env.png)\n\n强化学习所研究的内容就是得到一个状态$S$到动作$A$的映射关系,因此策略Policy可以表示成\n$$\n\\pi(a|s)=p(A_{t}=a|S_{t}=s)\n$$\n---\n\n注意:\n你可能会认为,在马尔科夫奖励过程(MRP)中没有定义动作,但是其实是包含动作的,因为每个状态有多个转移的下一状态,其实就是多个动作嘛！\n\n很多文章会将有限MDP分开来讲，有限MDP即状态、动作和奖励值都只有有限个元素，对于有限MDP最优策略有唯一解，但是现实世界中任务复杂，因此大多数深度强化学习算法并不局限于解决有限MDP问题，因此本文不将MDP分情况来讲，即默认基于MDP的最优策略**至少有一个解**。\n\n---\n\n没错,的确是这样的,MRP中也包含动作,但是我们并不关心,为什么这么说呢?**因为就算每个状态可以执行多个动作,但是其每个动作所能转移到的状态是确定的,不确定的只是动作的选择,而不是动作的转移,而MDP中不确定的却是动作的转移,即执行动作所转移的下一状态是有一定概率的.**什么意思呢?拿之前MRP的例子来说,语文状态有两个状态可以转移,数学和玩游戏,概率分别是0.5,但是当确定一个转移方向的时候(图中的箭头),其转移结果是确定的,获得的奖励也是确定的,但是在MDP中,执行动作导致转移的结果都未必是确定的.***需要注意的是,MRP是属于MDP的,MDP执行动作并不一定必须是随机的.***\n\n接下来,我们将MRP的例子转换至MDP, 为了方便理解而又不增加示例的复杂性,不妨将\"挂科\"这个状态看作是一个动作,因为这个节点正巧入度为1,姑且就认为从英语到挂科的这个箭头是英语状态所能执行的动作.如图所示:\n\n![](./强化学习之MDP马尔科夫决策过程/MDP.jpg)\n\n比较两个图可以发现区别,我把这个不确定的动作标为实心黑圆圈,这位刻苦的同学在学习完英语之后还想继续学习,但是他感觉三门科目都差不多了,于是他也很迷茫,他执行\"学习\"这个动作时的转移状态有三种:学语文、学数学、学英语.概率分别是:0.2、0.4,、0.4.这下就明白为什么我们要在MDP中加入动作$A$了吧,如果还不明白,请接着看下边的内容.\n\n顺便说一下,这个时候的转移矩阵已经不是简单的二维了,当然也可以用二维来表示,假设总共有$n$个状态,每个状态有$m$个动作,那么其行数为$n\\times m$,即遍历所有的状态和动作,得到$n \\times m$个状态-动作对$(s,a)$,其列数还是$n$.当然,也可以用一个三维tensor来表示,行和列都是$n$,第三维深度为$m$,很好理解.\n\n---\n\n**网上有写MDP在给定策略下会退化为MRP,我对此不置可否,认为此种说法不够严谨,因为即使说在某状态s下选择的动作a是确定的,并不意味着其转移结果是确定的.**\n\n---\n\n### 回报 Return\n\n在强化学习问题中，总是提到回报二字，论文中出现Return或者Discounted Return，我们已经知道奖励是什么，奖励就是转移到某个状态或者执行了某个动作之后转移至某个状态所获得的值$r$.\n\n回报就是由某时刻$t$之后决策序列所获得的奖励值经过一定规则计算出来的数值.\n\n公式描述:\n$$\nG_{t}\\doteq R_{t+1}+R_{t+2}+R_{t+3}+...+R_{t}\n$$\n.其中,$T$表示一个episode达到终态的时间点.\n\n像之前介绍的一样,我们可能对未来有不同的看重程度,于是引入折扣因子$\\gamma$的回报表示为:\n$$\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}\n$$\n其中,$ 0\\leq\\gamma \\leq1$\n\n可以推出回报有如下形式:\n$$\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}\n$$\n\n### 策略 Policy\n\n我们一般使用$\\pi$来表示一个策略,使用$\\pi(a|s)$来表示某状态$s$采取动作$a$的概率,公示表示为:\n$$\n\\pi(a|s)=P(A_{t}=a|S_{t}=s)\n$$\n策略完整定义了智能体在所有状态下的所有行为和其概率.\n\n给定一个MDP和一个策略$\\pi$,采样的状态序列\n$$\nS_{0},S_{1},S_{2},...,S_{n},...\n$$\n是一个马尔科夫过程$\\lt S,P \\gt ^{\\pi}$,\n\n采样的状态、奖励序列\n$$\n(S_{0},R_{0}),(S_{1},R_{1}),(S_{2},R_{2}),...,(S_{n},R_{n}),...\n$$\n是一个马尔科夫奖励过程$ \\lt S,P,R,\\gamma  \\gt^{\\pi}$,\n\n采样的状态、动作、奖励序列\n$$\n(S_{0},A_{0},R_{0}),(S_{1},A_{1},R_{1}),(S_{2},A_{2},R_{2}),...,(S_{n},A_{n},R_{n}),...\n$$\n是一个马尔科夫决策过程$ \\lt S,A^{\\pi},P,R,\\gamma  \\gt^{\\pi}$.\n\n*注意:在编程时一般以四元组$(s,a,r,s')$为单位存储\"经验\"*\n\n$\\pi$策略下$s\\rightarrow s'$转移概率由期望计算得$P_{ss'}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)P_{ss'}^{a}$,$s$状态下的期望立即奖励为$R_{s}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)R_{s}^{a}$.\n\n上述例子中\n$$\n\\begin{align*}\nR_{英语}&=\\sum_{a\\in A}\\pi(a|英语)R_{英语}^{a}\\\\\n&=0.2\\times-2+0.4\\times-2+0.4\\times-2\\\\\n&=-2\n\\end{align*}\n$$\n状态转移概率可以描述为：在执行策略$\\pi$时，状态从$s$转移至$s'$的概率等于执行该状态下所有行为的概率与对应行为能使状态从$s$转移至$s’$的概率的乘积的和。\n\n奖励函数可以描述为：在执行策略$\\pi$时获得的奖励等于执行该状态下所有行为的概率与对应行为产生的即时奖励的乘积的和。\n\n**强化学习的目标就是最大化期望回报,相应的结果就是找到从状态空间$S$映射到动作空间$A$的最优策略**,重点是,如何建立回报与策略之间的联系呢?","source":"_posts/强化学习之MDP马尔科夫决策过程.md","raw":"---\ntitle: 强化学习之MDP马尔科夫决策过程\ncopyright: true\ntop: 1\ndate: 2019-05-08 11:04:20\nmathjax: true\ncategories: ReinforcementLearning\ntags:\n- rl\n---\n\n# 强化学习之MDP马尔科夫决策过程\n\n每每提到强化学习，最先接触的理论肯定是马尔科夫决策过程（MDP，Markov Decision Process），为什么总提到MDP呢？并不是只有我一个人有这个疑问。\n\n<!--more-->\n\n百度上没有人提出这样的问题，可能是大家理解得都比较透彻吧，于是在Google查到相关提问和解释。\n\n> [What is the relationship between Markov Decision Processes and Reinforcement Learning?](https://datascience.stackexchange.com/a/38851)\n\n>>In Reinforcement Learning (RL), the problem to resolve is described as a Markov Decision Process (MDP). Theoretical results in RL rely on the MDP description being a correct match to the problem. If your problem is well described as a MDP, then RL may be a good framework to use to find solutions. That does not mean you need to fully describe the MDP (all the transition probabilities), just that you expect an MDP model could be made or discovered.\n\n>>Conversely, if you cannot map your problem onto a MDP, then the theory behind RL makes no guarantees of any useful result.\n\n>>One key factor that affects how well RL will work is that the states should have the Markov property - that the value of the current state is enough knowledge to fix immediate transition probabilities and immediate rewards following an action choice. Again you don't need to know in advance what those are, just that this relationship is expected to be reliable and stable. If it is not reliable, you may have a POMDP. If it is not stable, you may have a non-stationary problem. In either case, if the difference from a more strictly defined MDP is small enough, you may still get away with using RL techniques or need to adapt them slightly.\n>>\n>>**The general relationship between RL and MDP is that RL is a framework for solving problems that can be expressed as MDPs.**\n\nMDP是当前强化学习理论推导的基石，对强化学习来说，一般以马尔科夫决策过程作为形式化问题的手段。也就是说，对于目前的绝大部分强化学习算法，只有可以将问题抽象为MDP的才可以确保算法的性能（收敛性，效果等），对于违背MDP的问题并不一定确保算法有效，因为其数学公式都是基于MDP来进行推导的。\n\n## 马尔科夫性\n\n> 马尔科夫性质（英语：Markov property）是概率论中的一个概念，因为俄国数学家安德雷·马尔科夫得名。当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态；换句话说，在给定现在状态时，它与过去状态（即该过程的历史路径）是条件独立的，那么此随机过程即具有马尔科夫性质。[马尔科夫性-百度百科](https://baike.baidu.com/item/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%80%A7%E8%B4%A8/23149887?fr=aladdin)\n\n马尔科夫性，也就是无后效性：**某阶段的状态一旦确定，则此后过程的演变不再受此前各状态及决策的影响**。也就是说，**未来与过去无关**。\n\n具体地说，如果一个问题被划分各个阶段之后，阶段$k$中的状态只能通过阶段$k+1$中的状态通过状态转移方程得来，与其他状态没有关系，特别是与未发生的状态没有关系，这就是无后效性。\n\n公式描述：\n\n$$\nP[S_{t+1}|S_{t}]=P[S_{t+1}|S_{1},...,S_{t}]\n$$\n\n强化学习问题中的状态也符合马尔科夫性，即在当前状态$s_{t}$下执行动作$a_{t}$并转移至下一个状态$s_{t+1}$，而不需要考虑之前的状态$s_{t-1},...,s_{1}$。\n\n举一个不恰当的例子：\n\n![](./强化学习之MDP马尔科夫决策过程/M.jpg)\n\n假设天气预测符合马尔科夫性，如果以每天表示为一种状态，即周一、周二到周日。今天（5月8日，周三）天气为晴，明天（周四）会不会下雨只与今天的天气有关，而与之前周一、周二的天气状况无关。如果以时间节点表示为一种状态，即2点、5点、8点等，如图2点的温度为15.8°C,那么下个时间点5点的气温如何只与2点的温度有关系。\n\n强化学习中默认状态的转移是符合马尔科夫性质的，状态具体是什么，需要根据不同的问题进行不同的设定。\n\n## 马尔科夫过程\n\n马尔科夫过程是随机过程的一种，什么是随机过程呢？简单来说，一个商店从早上营业到晚上打烊这段时间，根据每个时间点店内顾客的人数所组成的序列就是随机过程。随机过程根据时间节点$T_{t}$取到的值是一个变量。\n\n马尔科夫过程是满足马尔科夫性的随机过程，它由二元组$M=(S,P)$组成，且满足：\n\n1. S是有限状态集合\n2. P是状态转移概率矩阵\n\n状态与状态之间的转换过程即为马尔科夫过程。***虽然我们可能不知道P的具体值到底是什么，但是通常我们假设P是存在的（转移概率存在，如果是确定的，无非就是概率为1），而且是稳定的（意思是从状态A到其他状态的转移虽然符合某个分布，但是其转移到某个状态的概率是确定的，不随时间变化的）。***\n\n这里说的**有限**二字我有自己的理解，在最开始的强化学习研究中，解决的都是表格式的问题，也就是状态的数量是有限可取的，但是后续强化学习研究的也有连续状态空间的问题，算法如DQN,PG,PPO等。状态的数量并不是有限的，但是其向量维度则是固定的、有限的，而且也同样符合马尔科夫性质，因此**我认为这里定义的有限并不是说状态数量有限，而是状态维度有限**。因为好像没有无限马尔科夫的叫法，所以姑且这么解释一下。\n\n马尔科夫过程有如下分类：\n\n![](./强化学习之MDP马尔科夫决策过程/MPs.jpg)\n\n### 状态转移矩阵\n\n状态转移矩阵由许多状态转移概率组成，状态转移概率是指从一个马尔科夫状态$s$转移到下一个状态$s'$的概率。\n\n公示表示：\n\n$$\n\\mathcal{P}_{ss'}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]\n$$\n\n等同于：\n\n$$\n\\mathcal{P}(s'|s)=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]\n$$\n\n假设有1到n个状态，将所有的状态从上到下、从左到右排列，组成一个$n \\times n$的矩阵，那么其状态转移矩阵如下所示：\n\n$$\n\\mathcal{P}=\n\\begin{bmatrix}\n\\mathcal{P}_{11} & \\cdots & \\mathcal{P}_{1n} \\\\ \n\\vdots & \\ddots & \\vdots \\\\ \n\\mathcal{P}_{n1} & \\cdots & \\mathcal{P}_{nn} \\\\\n\\end{bmatrix}\n$$\n\n其中，每行元素相加等于1，每列元素相加等于1，矩阵的总和为状态的数量n。\n\n对于可数状态，$\\sum_{s'=1}^{n}\\mathcal{P}(s'|s)=1$\n\n$$\nsum(\\mathcal{P}) = \\sum_{s'=1}^{n}\\sum_{s=1}^{n}\\mathcal{P}_{ss'} = n\n$$\n\n对于不可数状态（连续状态),$\\int_{s'}\\mathcal{P}(s'|s)=1$\n\n$$\nsum(\\mathcal{P}) = \\int_{s'}\\int_{s}\\mathcal{P}_{ss'} = n\n$$\n\n举一个马尔科夫过程的例子:\n\n假设一个学生，他目前在学习语文科目，那么他接下来进行的活动过程如下图所示，游戏的吸引力很大，所以他有50%的概率在学完语文去玩游戏，并且很容易沉迷其中，图示玩游戏这个循环有90%的可能性，他还可以选择学习其他科目或者去睡觉，最终学习结束之后是否能通过考试也是有一定的概率的，这些状态之间转移的概率即为状态转移概率。\n\n![](./强化学习之MDP马尔科夫决策过程/MP.jpg)\n\n如果把例子中的各项状态用字母表示，将其表示为：\n$$\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n挂科 & E\\\\ \n\\mathcal{Pass} & F\\\\ \n睡觉 & G\n\\end{bmatrix}\n$$\n那么其状态转移矩阵$\\mathcal{P}$可以表示成：\n$$\n\\begin{array}{lc}\n\\mbox{}&\n\\begin{array}{cc}A & B & C & D & E & F & G \\end{array}\\\\\n\\begin{array}{c}A\\\\B\\\\C\\\\D\\\\E\\\\F\\\\G\\end{array}&\n\\left[\\begin{array}{cc}\n0.9&0.1\\\\\n0.5& &0.5\\\\\n& & &0.8& & &0.2\\\\\n&&&&0.4&0.6&\\\\\n&0.2&0.4&0.4&&&\\\\\n&&&&&&1\\\\\n&&&&&&&\n\\end{array}\\right]\n\\end{array}\n$$\n\n### 马尔科夫链与Episode\n\nEpisode可以翻译为片段、情节、回合等，在强化学习问题中，一个Episode就是一个马尔科夫链，根据状态转移矩阵可以得到许多不同的episode，也就是多个马尔科夫链。\n\n强化学习问题分两种：\n\n1. 如果一个任务总能达到终态，结束任务或者开启下一轮任务，那么这个任务就被称为回合任务，也就是episode任务。例如，让一个智能体学习如何下围棋，围棋棋盘只有那么大，游戏定会终局，所以是一个回合式任务。\n2. 如果一个任务可以无限持续下去，永远不会结束，即永远在训练当中，那么这个任务就被称为连续性任务。例如，教会一辆车能够进行自动驾驶就是一个连续性任务，*不要钻牛角尖说能源会耗尽，车子会磨损，我们只聚焦问题与环境本身，不涉及其他非稳定因素。*\n\n在上边举的例子中就是一个回合式任务，因为无论这个序列有多长，最终都会达到终态-“睡觉”。\n\n根据上述例子我们可能采样出如下episode：\n\n1. $B-C-D-E-C-G$，即“学语文→数学→英语→考试没通过,挂科→继续学数学→睡觉”\n2. $B-A-A-...-A-B-C-G$，即“学语文→玩王者荣耀→玩刺激战场→玩OverCooker→玩守望先锋→玩英雄联盟→玩CS:GO→...→看一会儿数学→睡觉”。（仿佛就是我自己嘛！）\n\n## 马尔科夫奖励过程\n\n马尔科夫过程（Markov Process）主要描述的是状态之间的转移关系，在各个状态的转移过程中赋予不同的奖励值就得到了马尔科夫奖励过程。\n\n定义：马尔科夫奖励过程（Markov Reward Process, MRP）由一个四元组组成$(S,P,R,\\gamma)$\n\n1. $S$代表了状态的集合(也是维度有限的)\n2. $P$描述了状态转移矩阵$\\mathcal{P}_{ss'}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]$\n3. $R$表示奖励函数，$R(s)$描述了在状态$s$下的期望(立即)奖励，$\\mathcal{R}(s)=\\mathbb{E}[R_{t+1}|S_{t}=s]$\n4. $\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$\n\n$\\gamma$是用来计算累计奖励回报的,表示我们有多看中现在或者未来,为什么这么说呢?假设我们现在要计算一个episode始态$S_{0}$的奖励值$V(S_{0})$,不涉及具体公式推导的说,我们应该把$S_{0}$状态后续的奖励全部加和,这样就得到了对始态$S_{0}$的值估计,这些后续奖励的值的权重都是1,或者说此时$\\gamma=1$,但是当前状态对很多步之后的状态未必影响很大,我们这样计算过来并不能完全表示一个状态的值,那么我们应当顺势减少距离远的状态的权重,此时$\\gamma\\lt1$\n\n- 当$\\gamma=0$时,状态$S$的值完全由其转移的期望立即奖励表示,即**一点都不关心未来**\n- 当$\\gamma=1$时,状态$S$的值由以当前状态为始态,运行至终态所得到的所有立即奖励加和的值表示,即**未来与现在同等重要**\n- 当$0 \\lt\\gamma \\lt1$时,状态$S$的值是前两个模式的*trade-off*,即**对未来看重的程度由$\\gamma$决定**\n\n这只是我们的直观感受,其实是为了数学便利（虽然我也不知道具体哪里提高了数学便利，但是在有些情况下会使值函数更快迭代收敛这是真的）。\n\n*注：也有很多地方将MRP表示为三元组，即去掉$\\gamma$，但这不影响我们对这个过程的理解，下边的MDP也是一样，无论是三元组、四元组、还是五元组，只要能描述过程的性质就可以。*\n\n将上述马尔科夫过程的例子升级为马尔科夫奖励过程如下图所示:\n\n![](./强化学习之MDP马尔科夫决策过程/MRP.png)\n\n奖励值定义为:\n$$\n\\begin{bmatrix}\n玩游戏 & A & -1\\\\ \n语文 & B & -2\\\\ \n数学 & C & -2\\\\ \n英语 & D & -2\\\\ \n挂科 & E & -5\\\\ \n\\mathcal{Pass} & F & 10\\\\ \n睡觉 & G & 0\n\\end{bmatrix}\n$$\n这么定义奖励并没有什么复杂的含义,在这个例子中就拿身心愉悦程度来定义吧,学习固然是枯燥无味的,所以给予负奖励-2,玩游戏虽然会心情放松,但是始终面临着考试的压力,其实并不轻松,所以给予负奖励-1,挂科最痛苦为-5,考试全pass最开心为+10。\n\n在马尔科夫过程中的状态转移加入相应的奖励值即为马尔科夫奖励过程。\n\n\n\n## 马尔科夫决策过程\n\n马尔科夫决策过程(Markov Decision Process, MDP)相比马尔科夫奖励过程多了一个动作$A$,它可以用一个五元组$(S,A,P,R,\\gamma)$表示:\n\n1. $S$代表了状态的集合(也是维度有限的)\n2. $A$代表了决策过程中动作的集合(维度有限的)\n3. $P$描述了状态转移矩阵$\\mathcal{P}_{ss'}^{a}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s,A_{t}=a]$\n4. $R$表示奖励函数，$R(s)$描述了在状态$s$下**执行某动作**的期望(立即)奖励，$\\mathcal{R}(s,a)=\\mathbb{E}[R_{t+1}|S_{t}=s,A_{t}=a]$\n5. $\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$\n\nMDPs是一个从交互中达成目标的强化学习问题的一个直接的框架。学习者和决策者叫做Agent。Agent进行交互的其它一切Agent之外的东西都叫做环境。Agent不断的选择动作，而环境也给出相应的反应，并且向Agent表现出新的状态。环境同时也给出一个数值作为反馈。Agent的目标就是通过选择不同的Action来最大化这个反馈值。\n\n![](./强化学习之MDP马尔科夫决策过程/agent-env.png)\n\n强化学习所研究的内容就是得到一个状态$S$到动作$A$的映射关系,因此策略Policy可以表示成\n$$\n\\pi(a|s)=p(A_{t}=a|S_{t}=s)\n$$\n---\n\n注意:\n你可能会认为,在马尔科夫奖励过程(MRP)中没有定义动作,但是其实是包含动作的,因为每个状态有多个转移的下一状态,其实就是多个动作嘛！\n\n很多文章会将有限MDP分开来讲，有限MDP即状态、动作和奖励值都只有有限个元素，对于有限MDP最优策略有唯一解，但是现实世界中任务复杂，因此大多数深度强化学习算法并不局限于解决有限MDP问题，因此本文不将MDP分情况来讲，即默认基于MDP的最优策略**至少有一个解**。\n\n---\n\n没错,的确是这样的,MRP中也包含动作,但是我们并不关心,为什么这么说呢?**因为就算每个状态可以执行多个动作,但是其每个动作所能转移到的状态是确定的,不确定的只是动作的选择,而不是动作的转移,而MDP中不确定的却是动作的转移,即执行动作所转移的下一状态是有一定概率的.**什么意思呢?拿之前MRP的例子来说,语文状态有两个状态可以转移,数学和玩游戏,概率分别是0.5,但是当确定一个转移方向的时候(图中的箭头),其转移结果是确定的,获得的奖励也是确定的,但是在MDP中,执行动作导致转移的结果都未必是确定的.***需要注意的是,MRP是属于MDP的,MDP执行动作并不一定必须是随机的.***\n\n接下来,我们将MRP的例子转换至MDP, 为了方便理解而又不增加示例的复杂性,不妨将\"挂科\"这个状态看作是一个动作,因为这个节点正巧入度为1,姑且就认为从英语到挂科的这个箭头是英语状态所能执行的动作.如图所示:\n\n![](./强化学习之MDP马尔科夫决策过程/MDP.jpg)\n\n比较两个图可以发现区别,我把这个不确定的动作标为实心黑圆圈,这位刻苦的同学在学习完英语之后还想继续学习,但是他感觉三门科目都差不多了,于是他也很迷茫,他执行\"学习\"这个动作时的转移状态有三种:学语文、学数学、学英语.概率分别是:0.2、0.4,、0.4.这下就明白为什么我们要在MDP中加入动作$A$了吧,如果还不明白,请接着看下边的内容.\n\n顺便说一下,这个时候的转移矩阵已经不是简单的二维了,当然也可以用二维来表示,假设总共有$n$个状态,每个状态有$m$个动作,那么其行数为$n\\times m$,即遍历所有的状态和动作,得到$n \\times m$个状态-动作对$(s,a)$,其列数还是$n$.当然,也可以用一个三维tensor来表示,行和列都是$n$,第三维深度为$m$,很好理解.\n\n---\n\n**网上有写MDP在给定策略下会退化为MRP,我对此不置可否,认为此种说法不够严谨,因为即使说在某状态s下选择的动作a是确定的,并不意味着其转移结果是确定的.**\n\n---\n\n### 回报 Return\n\n在强化学习问题中，总是提到回报二字，论文中出现Return或者Discounted Return，我们已经知道奖励是什么，奖励就是转移到某个状态或者执行了某个动作之后转移至某个状态所获得的值$r$.\n\n回报就是由某时刻$t$之后决策序列所获得的奖励值经过一定规则计算出来的数值.\n\n公式描述:\n$$\nG_{t}\\doteq R_{t+1}+R_{t+2}+R_{t+3}+...+R_{t}\n$$\n.其中,$T$表示一个episode达到终态的时间点.\n\n像之前介绍的一样,我们可能对未来有不同的看重程度,于是引入折扣因子$\\gamma$的回报表示为:\n$$\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}\n$$\n其中,$ 0\\leq\\gamma \\leq1$\n\n可以推出回报有如下形式:\n$$\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}\n$$\n\n### 策略 Policy\n\n我们一般使用$\\pi$来表示一个策略,使用$\\pi(a|s)$来表示某状态$s$采取动作$a$的概率,公示表示为:\n$$\n\\pi(a|s)=P(A_{t}=a|S_{t}=s)\n$$\n策略完整定义了智能体在所有状态下的所有行为和其概率.\n\n给定一个MDP和一个策略$\\pi$,采样的状态序列\n$$\nS_{0},S_{1},S_{2},...,S_{n},...\n$$\n是一个马尔科夫过程$\\lt S,P \\gt ^{\\pi}$,\n\n采样的状态、奖励序列\n$$\n(S_{0},R_{0}),(S_{1},R_{1}),(S_{2},R_{2}),...,(S_{n},R_{n}),...\n$$\n是一个马尔科夫奖励过程$ \\lt S,P,R,\\gamma  \\gt^{\\pi}$,\n\n采样的状态、动作、奖励序列\n$$\n(S_{0},A_{0},R_{0}),(S_{1},A_{1},R_{1}),(S_{2},A_{2},R_{2}),...,(S_{n},A_{n},R_{n}),...\n$$\n是一个马尔科夫决策过程$ \\lt S,A^{\\pi},P,R,\\gamma  \\gt^{\\pi}$.\n\n*注意:在编程时一般以四元组$(s,a,r,s')$为单位存储\"经验\"*\n\n$\\pi$策略下$s\\rightarrow s'$转移概率由期望计算得$P_{ss'}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)P_{ss'}^{a}$,$s$状态下的期望立即奖励为$R_{s}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)R_{s}^{a}$.\n\n上述例子中\n$$\n\\begin{align*}\nR_{英语}&=\\sum_{a\\in A}\\pi(a|英语)R_{英语}^{a}\\\\\n&=0.2\\times-2+0.4\\times-2+0.4\\times-2\\\\\n&=-2\n\\end{align*}\n$$\n状态转移概率可以描述为：在执行策略$\\pi$时，状态从$s$转移至$s'$的概率等于执行该状态下所有行为的概率与对应行为能使状态从$s$转移至$s’$的概率的乘积的和。\n\n奖励函数可以描述为：在执行策略$\\pi$时获得的奖励等于执行该状态下所有行为的概率与对应行为产生的即时奖励的乘积的和。\n\n**强化学习的目标就是最大化期望回报,相应的结果就是找到从状态空间$S$映射到动作空间$A$的最优策略**,重点是,如何建立回报与策略之间的联系呢?","slug":"强化学习之MDP马尔科夫决策过程","published":1,"updated":"2019-05-13T01:09:08.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvxtaacy002ym8veb61fhwrs","content":"<h1 id=\"强化学习之MDP马尔科夫决策过程\"><a href=\"#强化学习之MDP马尔科夫决策过程\" class=\"headerlink\" title=\"强化学习之MDP马尔科夫决策过程\"></a>强化学习之MDP马尔科夫决策过程</h1><p>每每提到强化学习，最先接触的理论肯定是马尔科夫决策过程（MDP，Markov Decision Process），为什么总提到MDP呢？并不是只有我一个人有这个疑问。</p>\n<a id=\"more\"></a>\n<p>百度上没有人提出这样的问题，可能是大家理解得都比较透彻吧，于是在Google查到相关提问和解释。</p>\n<blockquote>\n<p><a href=\"https://datascience.stackexchange.com/a/38851\" rel=\"external nofollow\" target=\"_blank\">What is the relationship between Markov Decision Processes and Reinforcement Learning?</a></p>\n<blockquote>\n<p>In Reinforcement Learning (RL), the problem to resolve is described as a Markov Decision Process (MDP). Theoretical results in RL rely on the MDP description being a correct match to the problem. If your problem is well described as a MDP, then RL may be a good framework to use to find solutions. That does not mean you need to fully describe the MDP (all the transition probabilities), just that you expect an MDP model could be made or discovered.</p>\n<p>Conversely, if you cannot map your problem onto a MDP, then the theory behind RL makes no guarantees of any useful result.</p>\n<p>One key factor that affects how well RL will work is that the states should have the Markov property - that the value of the current state is enough knowledge to fix immediate transition probabilities and immediate rewards following an action choice. Again you don’t need to know in advance what those are, just that this relationship is expected to be reliable and stable. If it is not reliable, you may have a POMDP. If it is not stable, you may have a non-stationary problem. In either case, if the difference from a more strictly defined MDP is small enough, you may still get away with using RL techniques or need to adapt them slightly.</p>\n<p><strong>The general relationship between RL and MDP is that RL is a framework for solving problems that can be expressed as MDPs.</strong></p>\n</blockquote>\n</blockquote>\n<p>MDP是当前强化学习理论推导的基石，对强化学习来说，一般以马尔科夫决策过程作为形式化问题的手段。也就是说，对于目前的绝大部分强化学习算法，只有可以将问题抽象为MDP的才可以确保算法的性能（收敛性，效果等），对于违背MDP的问题并不一定确保算法有效，因为其数学公式都是基于MDP来进行推导的。</p>\n<h2 id=\"马尔科夫性\"><a href=\"#马尔科夫性\" class=\"headerlink\" title=\"马尔科夫性\"></a>马尔科夫性</h2><blockquote>\n<p>马尔科夫性质（英语：Markov property）是概率论中的一个概念，因为俄国数学家安德雷·马尔科夫得名。当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态；换句话说，在给定现在状态时，它与过去状态（即该过程的历史路径）是条件独立的，那么此随机过程即具有马尔科夫性质。<a href=\"https://baike.baidu.com/item/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%80%A7%E8%B4%A8/23149887?fr=aladdin\" rel=\"external nofollow\" target=\"_blank\">马尔科夫性-百度百科</a></p>\n</blockquote>\n<p>马尔科夫性，也就是无后效性：<strong>某阶段的状态一旦确定，则此后过程的演变不再受此前各状态及决策的影响</strong>。也就是说，<strong>未来与过去无关</strong>。</p>\n<p>具体地说，如果一个问题被划分各个阶段之后，阶段$k$中的状态只能通过阶段$k+1$中的状态通过状态转移方程得来，与其他状态没有关系，特别是与未发生的状态没有关系，这就是无后效性。</p>\n<p>公式描述：</p>\n<script type=\"math/tex; mode=display\">\nP[S_{t+1}|S_{t}]=P[S_{t+1}|S_{1},...,S_{t}]</script><p>强化学习问题中的状态也符合马尔科夫性，即在当前状态$s_{t}$下执行动作$a_{t}$并转移至下一个状态$s_{t+1}$，而不需要考虑之前的状态$s_{t-1},…,s_{1}$。</p>\n<p>举一个不恰当的例子：</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/M.jpg\" alt=\"\"></p>\n<p>假设天气预测符合马尔科夫性，如果以每天表示为一种状态，即周一、周二到周日。今天（5月8日，周三）天气为晴，明天（周四）会不会下雨只与今天的天气有关，而与之前周一、周二的天气状况无关。如果以时间节点表示为一种状态，即2点、5点、8点等，如图2点的温度为15.8°C,那么下个时间点5点的气温如何只与2点的温度有关系。</p>\n<p>强化学习中默认状态的转移是符合马尔科夫性质的，状态具体是什么，需要根据不同的问题进行不同的设定。</p>\n<h2 id=\"马尔科夫过程\"><a href=\"#马尔科夫过程\" class=\"headerlink\" title=\"马尔科夫过程\"></a>马尔科夫过程</h2><p>马尔科夫过程是随机过程的一种，什么是随机过程呢？简单来说，一个商店从早上营业到晚上打烊这段时间，根据每个时间点店内顾客的人数所组成的序列就是随机过程。随机过程根据时间节点$T_{t}$取到的值是一个变量。</p>\n<p>马尔科夫过程是满足马尔科夫性的随机过程，它由二元组$M=(S,P)$组成，且满足：</p>\n<ol>\n<li>S是有限状态集合</li>\n<li>P是状态转移概率矩阵</li>\n</ol>\n<p>状态与状态之间的转换过程即为马尔科夫过程。<strong><em>虽然我们可能不知道P的具体值到底是什么，但是通常我们假设P是存在的（转移概率存在，如果是确定的，无非就是概率为1），而且是稳定的（意思是从状态A到其他状态的转移虽然符合某个分布，但是其转移到某个状态的概率是确定的，不随时间变化的）。</em></strong></p>\n<p>这里说的<strong>有限</strong>二字我有自己的理解，在最开始的强化学习研究中，解决的都是表格式的问题，也就是状态的数量是有限可取的，但是后续强化学习研究的也有连续状态空间的问题，算法如DQN,PG,PPO等。状态的数量并不是有限的，但是其向量维度则是固定的、有限的，而且也同样符合马尔科夫性质，因此<strong>我认为这里定义的有限并不是说状态数量有限，而是状态维度有限</strong>。因为好像没有无限马尔科夫的叫法，所以姑且这么解释一下。</p>\n<p>马尔科夫过程有如下分类：</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MPs.jpg\" alt=\"\"></p>\n<h3 id=\"状态转移矩阵\"><a href=\"#状态转移矩阵\" class=\"headerlink\" title=\"状态转移矩阵\"></a>状态转移矩阵</h3><p>状态转移矩阵由许多状态转移概率组成，状态转移概率是指从一个马尔科夫状态$s$转移到下一个状态$s’$的概率。</p>\n<p>公示表示：</p>\n<script type=\"math/tex; mode=display\">\n\\mathcal{P}_{ss'}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]</script><p>等同于：</p>\n<script type=\"math/tex; mode=display\">\n\\mathcal{P}(s'|s)=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]</script><p>假设有1到n个状态，将所有的状态从上到下、从左到右排列，组成一个$n \\times n$的矩阵，那么其状态转移矩阵如下所示：</p>\n<script type=\"math/tex; mode=display\">\n\\mathcal{P}=\n\\begin{bmatrix}\n\\mathcal{P}_{11} & \\cdots & \\mathcal{P}_{1n} \\\\ \n\\vdots & \\ddots & \\vdots \\\\ \n\\mathcal{P}_{n1} & \\cdots & \\mathcal{P}_{nn} \\\\\n\\end{bmatrix}</script><p>其中，每行元素相加等于1，每列元素相加等于1，矩阵的总和为状态的数量n。</p>\n<p>对于可数状态，$\\sum_{s’=1}^{n}\\mathcal{P}(s’|s)=1$</p>\n<script type=\"math/tex; mode=display\">\nsum(\\mathcal{P}) = \\sum_{s'=1}^{n}\\sum_{s=1}^{n}\\mathcal{P}_{ss'} = n</script><p>对于不可数状态（连续状态),$\\int_{s’}\\mathcal{P}(s’|s)=1$</p>\n<script type=\"math/tex; mode=display\">\nsum(\\mathcal{P}) = \\int_{s'}\\int_{s}\\mathcal{P}_{ss'} = n</script><p>举一个马尔科夫过程的例子:</p>\n<p>假设一个学生，他目前在学习语文科目，那么他接下来进行的活动过程如下图所示，游戏的吸引力很大，所以他有50%的概率在学完语文去玩游戏，并且很容易沉迷其中，图示玩游戏这个循环有90%的可能性，他还可以选择学习其他科目或者去睡觉，最终学习结束之后是否能通过考试也是有一定的概率的，这些状态之间转移的概率即为状态转移概率。</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MP.jpg\" alt=\"\"></p>\n<p>如果把例子中的各项状态用字母表示，将其表示为：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n挂科 & E\\\\ \n\\mathcal{Pass} & F\\\\ \n睡觉 & G\n\\end{bmatrix}</script><p>那么其状态转移矩阵$\\mathcal{P}$可以表示成：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{array}{lc}\n\\mbox{}&\n\\begin{array}{cc}A & B & C & D & E & F & G \\end{array}\\\\\n\\begin{array}{c}A\\\\B\\\\C\\\\D\\\\E\\\\F\\\\G\\end{array}&\n\\left[\\begin{array}{cc}\n0.9&0.1\\\\\n0.5& &0.5\\\\\n& & &0.8& & &0.2\\\\\n&&&&0.4&0.6&\\\\\n&0.2&0.4&0.4&&&\\\\\n&&&&&&1\\\\\n&&&&&&&\n\\end{array}\\right]\n\\end{array}</script><h3 id=\"马尔科夫链与Episode\"><a href=\"#马尔科夫链与Episode\" class=\"headerlink\" title=\"马尔科夫链与Episode\"></a>马尔科夫链与Episode</h3><p>Episode可以翻译为片段、情节、回合等，在强化学习问题中，一个Episode就是一个马尔科夫链，根据状态转移矩阵可以得到许多不同的episode，也就是多个马尔科夫链。</p>\n<p>强化学习问题分两种：</p>\n<ol>\n<li>如果一个任务总能达到终态，结束任务或者开启下一轮任务，那么这个任务就被称为回合任务，也就是episode任务。例如，让一个智能体学习如何下围棋，围棋棋盘只有那么大，游戏定会终局，所以是一个回合式任务。</li>\n<li>如果一个任务可以无限持续下去，永远不会结束，即永远在训练当中，那么这个任务就被称为连续性任务。例如，教会一辆车能够进行自动驾驶就是一个连续性任务，<em>不要钻牛角尖说能源会耗尽，车子会磨损，我们只聚焦问题与环境本身，不涉及其他非稳定因素。</em></li>\n</ol>\n<p>在上边举的例子中就是一个回合式任务，因为无论这个序列有多长，最终都会达到终态-“睡觉”。</p>\n<p>根据上述例子我们可能采样出如下episode：</p>\n<ol>\n<li>$B-C-D-E-C-G$，即“学语文→数学→英语→考试没通过,挂科→继续学数学→睡觉”</li>\n<li>$B-A-A-…-A-B-C-G$，即“学语文→玩王者荣耀→玩刺激战场→玩OverCooker→玩守望先锋→玩英雄联盟→玩CS:GO→…→看一会儿数学→睡觉”。（仿佛就是我自己嘛！）</li>\n</ol>\n<h2 id=\"马尔科夫奖励过程\"><a href=\"#马尔科夫奖励过程\" class=\"headerlink\" title=\"马尔科夫奖励过程\"></a>马尔科夫奖励过程</h2><p>马尔科夫过程（Markov Process）主要描述的是状态之间的转移关系，在各个状态的转移过程中赋予不同的奖励值就得到了马尔科夫奖励过程。</p>\n<p>定义：马尔科夫奖励过程（Markov Reward Process, MRP）由一个四元组组成$(S,P,R,\\gamma)$</p>\n<ol>\n<li>$S$代表了状态的集合(也是维度有限的)</li>\n<li>$P$描述了状态转移矩阵$\\mathcal{P}_{ss’}=\\mathbb{P}[S_{t+1}=s’|S_{t}=s]$</li>\n<li>$R$表示奖励函数，$R(s)$描述了在状态$s$下的期望(立即)奖励，$\\mathcal{R}(s)=\\mathbb{E}[R_{t+1}|S_{t}=s]$</li>\n<li>$\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$</li>\n</ol>\n<p>$\\gamma$是用来计算累计奖励回报的,表示我们有多看中现在或者未来,为什么这么说呢?假设我们现在要计算一个episode始态$S_{0}$的奖励值$V(S_{0})$,不涉及具体公式推导的说,我们应该把$S_{0}$状态后续的奖励全部加和,这样就得到了对始态$S_{0}$的值估计,这些后续奖励的值的权重都是1,或者说此时$\\gamma=1$,但是当前状态对很多步之后的状态未必影响很大,我们这样计算过来并不能完全表示一个状态的值,那么我们应当顺势减少距离远的状态的权重,此时$\\gamma\\lt1$</p>\n<ul>\n<li>当$\\gamma=0$时,状态$S$的值完全由其转移的期望立即奖励表示,即<strong>一点都不关心未来</strong></li>\n<li>当$\\gamma=1$时,状态$S$的值由以当前状态为始态,运行至终态所得到的所有立即奖励加和的值表示,即<strong>未来与现在同等重要</strong></li>\n<li>当$0 \\lt\\gamma \\lt1$时,状态$S$的值是前两个模式的<em>trade-off</em>,即<strong>对未来看重的程度由$\\gamma$决定</strong></li>\n</ul>\n<p>这只是我们的直观感受,其实是为了数学便利（虽然我也不知道具体哪里提高了数学便利，但是在有些情况下会使值函数更快迭代收敛这是真的）。</p>\n<p><em>注：也有很多地方将MRP表示为三元组，即去掉$\\gamma$，但这不影响我们对这个过程的理解，下边的MDP也是一样，无论是三元组、四元组、还是五元组，只要能描述过程的性质就可以。</em></p>\n<p>将上述马尔科夫过程的例子升级为马尔科夫奖励过程如下图所示:</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MRP.png\" alt=\"\"></p>\n<p>奖励值定义为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n玩游戏 & A & -1\\\\ \n语文 & B & -2\\\\ \n数学 & C & -2\\\\ \n英语 & D & -2\\\\ \n挂科 & E & -5\\\\ \n\\mathcal{Pass} & F & 10\\\\ \n睡觉 & G & 0\n\\end{bmatrix}</script><p>这么定义奖励并没有什么复杂的含义,在这个例子中就拿身心愉悦程度来定义吧,学习固然是枯燥无味的,所以给予负奖励-2,玩游戏虽然会心情放松,但是始终面临着考试的压力,其实并不轻松,所以给予负奖励-1,挂科最痛苦为-5,考试全pass最开心为+10。</p>\n<p>在马尔科夫过程中的状态转移加入相应的奖励值即为马尔科夫奖励过程。</p>\n<h2 id=\"马尔科夫决策过程\"><a href=\"#马尔科夫决策过程\" class=\"headerlink\" title=\"马尔科夫决策过程\"></a>马尔科夫决策过程</h2><p>马尔科夫决策过程(Markov Decision Process, MDP)相比马尔科夫奖励过程多了一个动作$A$,它可以用一个五元组$(S,A,P,R,\\gamma)$表示:</p>\n<ol>\n<li>$S$代表了状态的集合(也是维度有限的)</li>\n<li>$A$代表了决策过程中动作的集合(维度有限的)</li>\n<li>$P$描述了状态转移矩阵$\\mathcal{P}_{ss’}^{a}=\\mathbb{P}[S_{t+1}=s’|S_{t}=s,A_{t}=a]$</li>\n<li>$R$表示奖励函数，$R(s)$描述了在状态$s$下<strong>执行某动作</strong>的期望(立即)奖励，$\\mathcal{R}(s,a)=\\mathbb{E}[R_{t+1}|S_{t}=s,A_{t}=a]$</li>\n<li>$\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$</li>\n</ol>\n<p>MDPs是一个从交互中达成目标的强化学习问题的一个直接的框架。学习者和决策者叫做Agent。Agent进行交互的其它一切Agent之外的东西都叫做环境。Agent不断的选择动作，而环境也给出相应的反应，并且向Agent表现出新的状态。环境同时也给出一个数值作为反馈。Agent的目标就是通过选择不同的Action来最大化这个反馈值。</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/agent-env.png\" alt=\"\"></p>\n<p>强化学习所研究的内容就是得到一个状态$S$到动作$A$的映射关系,因此策略Policy可以表示成</p>\n<script type=\"math/tex; mode=display\">\n\\pi(a|s)=p(A_{t}=a|S_{t}=s)</script><hr>\n<p>注意:<br>你可能会认为,在马尔科夫奖励过程(MRP)中没有定义动作,但是其实是包含动作的,因为每个状态有多个转移的下一状态,其实就是多个动作嘛！</p>\n<p>很多文章会将有限MDP分开来讲，有限MDP即状态、动作和奖励值都只有有限个元素，对于有限MDP最优策略有唯一解，但是现实世界中任务复杂，因此大多数深度强化学习算法并不局限于解决有限MDP问题，因此本文不将MDP分情况来讲，即默认基于MDP的最优策略<strong>至少有一个解</strong>。</p>\n<hr>\n<p>没错,的确是这样的,MRP中也包含动作,但是我们并不关心,为什么这么说呢?<strong>因为就算每个状态可以执行多个动作,但是其每个动作所能转移到的状态是确定的,不确定的只是动作的选择,而不是动作的转移,而MDP中不确定的却是动作的转移,即执行动作所转移的下一状态是有一定概率的.</strong>什么意思呢?拿之前MRP的例子来说,语文状态有两个状态可以转移,数学和玩游戏,概率分别是0.5,但是当确定一个转移方向的时候(图中的箭头),其转移结果是确定的,获得的奖励也是确定的,但是在MDP中,执行动作导致转移的结果都未必是确定的.<strong><em>需要注意的是,MRP是属于MDP的,MDP执行动作并不一定必须是随机的.</em></strong></p>\n<p>接下来,我们将MRP的例子转换至MDP, 为了方便理解而又不增加示例的复杂性,不妨将”挂科”这个状态看作是一个动作,因为这个节点正巧入度为1,姑且就认为从英语到挂科的这个箭头是英语状态所能执行的动作.如图所示:</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MDP.jpg\" alt=\"\"></p>\n<p>比较两个图可以发现区别,我把这个不确定的动作标为实心黑圆圈,这位刻苦的同学在学习完英语之后还想继续学习,但是他感觉三门科目都差不多了,于是他也很迷茫,他执行”学习”这个动作时的转移状态有三种:学语文、学数学、学英语.概率分别是:0.2、0.4,、0.4.这下就明白为什么我们要在MDP中加入动作$A$了吧,如果还不明白,请接着看下边的内容.</p>\n<p>顺便说一下,这个时候的转移矩阵已经不是简单的二维了,当然也可以用二维来表示,假设总共有$n$个状态,每个状态有$m$个动作,那么其行数为$n\\times m$,即遍历所有的状态和动作,得到$n \\times m$个状态-动作对$(s,a)$,其列数还是$n$.当然,也可以用一个三维tensor来表示,行和列都是$n$,第三维深度为$m$,很好理解.</p>\n<hr>\n<p><strong>网上有写MDP在给定策略下会退化为MRP,我对此不置可否,认为此种说法不够严谨,因为即使说在某状态s下选择的动作a是确定的,并不意味着其转移结果是确定的.</strong></p>\n<hr>\n<h3 id=\"回报-Return\"><a href=\"#回报-Return\" class=\"headerlink\" title=\"回报 Return\"></a>回报 Return</h3><p>在强化学习问题中，总是提到回报二字，论文中出现Return或者Discounted Return，我们已经知道奖励是什么，奖励就是转移到某个状态或者执行了某个动作之后转移至某个状态所获得的值$r$.</p>\n<p>回报就是由某时刻$t$之后决策序列所获得的奖励值经过一定规则计算出来的数值.</p>\n<p>公式描述:</p>\n<script type=\"math/tex; mode=display\">\nG_{t}\\doteq R_{t+1}+R_{t+2}+R_{t+3}+...+R_{t}</script><p>.其中,$T$表示一个episode达到终态的时间点.</p>\n<p>像之前介绍的一样,我们可能对未来有不同的看重程度,于是引入折扣因子$\\gamma$的回报表示为:</p>\n<script type=\"math/tex; mode=display\">\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}</script><p>其中,$ 0\\leq\\gamma \\leq1$</p>\n<p>可以推出回报有如下形式:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}</script><h3 id=\"策略-Policy\"><a href=\"#策略-Policy\" class=\"headerlink\" title=\"策略 Policy\"></a>策略 Policy</h3><p>我们一般使用$\\pi$来表示一个策略,使用$\\pi(a|s)$来表示某状态$s$采取动作$a$的概率,公示表示为:</p>\n<script type=\"math/tex; mode=display\">\n\\pi(a|s)=P(A_{t}=a|S_{t}=s)</script><p>策略完整定义了智能体在所有状态下的所有行为和其概率.</p>\n<p>给定一个MDP和一个策略$\\pi$,采样的状态序列</p>\n<script type=\"math/tex; mode=display\">\nS_{0},S_{1},S_{2},...,S_{n},...</script><p>是一个马尔科夫过程$\\lt S,P \\gt ^{\\pi}$,</p>\n<p>采样的状态、奖励序列</p>\n<script type=\"math/tex; mode=display\">\n(S_{0},R_{0}),(S_{1},R_{1}),(S_{2},R_{2}),...,(S_{n},R_{n}),...</script><p>是一个马尔科夫奖励过程$ \\lt S,P,R,\\gamma  \\gt^{\\pi}$,</p>\n<p>采样的状态、动作、奖励序列</p>\n<script type=\"math/tex; mode=display\">\n(S_{0},A_{0},R_{0}),(S_{1},A_{1},R_{1}),(S_{2},A_{2},R_{2}),...,(S_{n},A_{n},R_{n}),...</script><p>是一个马尔科夫决策过程$ \\lt S,A^{\\pi},P,R,\\gamma  \\gt^{\\pi}$.</p>\n<p><em>注意:在编程时一般以四元组$(s,a,r,s’)$为单位存储”经验”</em></p>\n<p>$\\pi$策略下$s\\rightarrow s’$转移概率由期望计算得$P_{ss’}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)P_{ss’}^{a}$,$s$状态下的期望立即奖励为$R_{s}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)R_{s}^{a}$.</p>\n<p>上述例子中</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nR_{英语}&=\\sum_{a\\in A}\\pi(a|英语)R_{英语}^{a}\\\\\n&=0.2\\times-2+0.4\\times-2+0.4\\times-2\\\\\n&=-2\n\\end{align*}</script><p>状态转移概率可以描述为：在执行策略$\\pi$时，状态从$s$转移至$s’$的概率等于执行该状态下所有行为的概率与对应行为能使状态从$s$转移至$s’$的概率的乘积的和。</p>\n<p>奖励函数可以描述为：在执行策略$\\pi$时获得的奖励等于执行该状态下所有行为的概率与对应行为产生的即时奖励的乘积的和。</p>\n<p><strong>强化学习的目标就是最大化期望回报,相应的结果就是找到从状态空间$S$映射到动作空间$A$的最优策略</strong>,重点是,如何建立回报与策略之间的联系呢?</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"强化学习之MDP马尔科夫决策过程\"><a href=\"#强化学习之MDP马尔科夫决策过程\" class=\"headerlink\" title=\"强化学习之MDP马尔科夫决策过程\"></a>强化学习之MDP马尔科夫决策过程</h1><p>每每提到强化学习，最先接触的理论肯定是马尔科夫决策过程（MDP，Markov Decision Process），为什么总提到MDP呢？并不是只有我一个人有这个疑问。</p>","more":"<p>百度上没有人提出这样的问题，可能是大家理解得都比较透彻吧，于是在Google查到相关提问和解释。</p>\n<blockquote>\n<p><a href=\"https://datascience.stackexchange.com/a/38851\" rel=\"external nofollow\" target=\"_blank\">What is the relationship between Markov Decision Processes and Reinforcement Learning?</a></p>\n<blockquote>\n<p>In Reinforcement Learning (RL), the problem to resolve is described as a Markov Decision Process (MDP). Theoretical results in RL rely on the MDP description being a correct match to the problem. If your problem is well described as a MDP, then RL may be a good framework to use to find solutions. That does not mean you need to fully describe the MDP (all the transition probabilities), just that you expect an MDP model could be made or discovered.</p>\n<p>Conversely, if you cannot map your problem onto a MDP, then the theory behind RL makes no guarantees of any useful result.</p>\n<p>One key factor that affects how well RL will work is that the states should have the Markov property - that the value of the current state is enough knowledge to fix immediate transition probabilities and immediate rewards following an action choice. Again you don’t need to know in advance what those are, just that this relationship is expected to be reliable and stable. If it is not reliable, you may have a POMDP. If it is not stable, you may have a non-stationary problem. In either case, if the difference from a more strictly defined MDP is small enough, you may still get away with using RL techniques or need to adapt them slightly.</p>\n<p><strong>The general relationship between RL and MDP is that RL is a framework for solving problems that can be expressed as MDPs.</strong></p>\n</blockquote>\n</blockquote>\n<p>MDP是当前强化学习理论推导的基石，对强化学习来说，一般以马尔科夫决策过程作为形式化问题的手段。也就是说，对于目前的绝大部分强化学习算法，只有可以将问题抽象为MDP的才可以确保算法的性能（收敛性，效果等），对于违背MDP的问题并不一定确保算法有效，因为其数学公式都是基于MDP来进行推导的。</p>\n<h2 id=\"马尔科夫性\"><a href=\"#马尔科夫性\" class=\"headerlink\" title=\"马尔科夫性\"></a>马尔科夫性</h2><blockquote>\n<p>马尔科夫性质（英语：Markov property）是概率论中的一个概念，因为俄国数学家安德雷·马尔科夫得名。当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态；换句话说，在给定现在状态时，它与过去状态（即该过程的历史路径）是条件独立的，那么此随机过程即具有马尔科夫性质。<a href=\"https://baike.baidu.com/item/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%80%A7%E8%B4%A8/23149887?fr=aladdin\" rel=\"external nofollow\" target=\"_blank\">马尔科夫性-百度百科</a></p>\n</blockquote>\n<p>马尔科夫性，也就是无后效性：<strong>某阶段的状态一旦确定，则此后过程的演变不再受此前各状态及决策的影响</strong>。也就是说，<strong>未来与过去无关</strong>。</p>\n<p>具体地说，如果一个问题被划分各个阶段之后，阶段$k$中的状态只能通过阶段$k+1$中的状态通过状态转移方程得来，与其他状态没有关系，特别是与未发生的状态没有关系，这就是无后效性。</p>\n<p>公式描述：</p>\n<script type=\"math/tex; mode=display\">\nP[S_{t+1}|S_{t}]=P[S_{t+1}|S_{1},...,S_{t}]</script><p>强化学习问题中的状态也符合马尔科夫性，即在当前状态$s_{t}$下执行动作$a_{t}$并转移至下一个状态$s_{t+1}$，而不需要考虑之前的状态$s_{t-1},…,s_{1}$。</p>\n<p>举一个不恰当的例子：</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/M.jpg\" alt=\"\"></p>\n<p>假设天气预测符合马尔科夫性，如果以每天表示为一种状态，即周一、周二到周日。今天（5月8日，周三）天气为晴，明天（周四）会不会下雨只与今天的天气有关，而与之前周一、周二的天气状况无关。如果以时间节点表示为一种状态，即2点、5点、8点等，如图2点的温度为15.8°C,那么下个时间点5点的气温如何只与2点的温度有关系。</p>\n<p>强化学习中默认状态的转移是符合马尔科夫性质的，状态具体是什么，需要根据不同的问题进行不同的设定。</p>\n<h2 id=\"马尔科夫过程\"><a href=\"#马尔科夫过程\" class=\"headerlink\" title=\"马尔科夫过程\"></a>马尔科夫过程</h2><p>马尔科夫过程是随机过程的一种，什么是随机过程呢？简单来说，一个商店从早上营业到晚上打烊这段时间，根据每个时间点店内顾客的人数所组成的序列就是随机过程。随机过程根据时间节点$T_{t}$取到的值是一个变量。</p>\n<p>马尔科夫过程是满足马尔科夫性的随机过程，它由二元组$M=(S,P)$组成，且满足：</p>\n<ol>\n<li>S是有限状态集合</li>\n<li>P是状态转移概率矩阵</li>\n</ol>\n<p>状态与状态之间的转换过程即为马尔科夫过程。<strong><em>虽然我们可能不知道P的具体值到底是什么，但是通常我们假设P是存在的（转移概率存在，如果是确定的，无非就是概率为1），而且是稳定的（意思是从状态A到其他状态的转移虽然符合某个分布，但是其转移到某个状态的概率是确定的，不随时间变化的）。</em></strong></p>\n<p>这里说的<strong>有限</strong>二字我有自己的理解，在最开始的强化学习研究中，解决的都是表格式的问题，也就是状态的数量是有限可取的，但是后续强化学习研究的也有连续状态空间的问题，算法如DQN,PG,PPO等。状态的数量并不是有限的，但是其向量维度则是固定的、有限的，而且也同样符合马尔科夫性质，因此<strong>我认为这里定义的有限并不是说状态数量有限，而是状态维度有限</strong>。因为好像没有无限马尔科夫的叫法，所以姑且这么解释一下。</p>\n<p>马尔科夫过程有如下分类：</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MPs.jpg\" alt=\"\"></p>\n<h3 id=\"状态转移矩阵\"><a href=\"#状态转移矩阵\" class=\"headerlink\" title=\"状态转移矩阵\"></a>状态转移矩阵</h3><p>状态转移矩阵由许多状态转移概率组成，状态转移概率是指从一个马尔科夫状态$s$转移到下一个状态$s’$的概率。</p>\n<p>公示表示：</p>\n<script type=\"math/tex; mode=display\">\n\\mathcal{P}_{ss'}=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]</script><p>等同于：</p>\n<script type=\"math/tex; mode=display\">\n\\mathcal{P}(s'|s)=\\mathbb{P}[S_{t+1}=s'|S_{t}=s]</script><p>假设有1到n个状态，将所有的状态从上到下、从左到右排列，组成一个$n \\times n$的矩阵，那么其状态转移矩阵如下所示：</p>\n<script type=\"math/tex; mode=display\">\n\\mathcal{P}=\n\\begin{bmatrix}\n\\mathcal{P}_{11} & \\cdots & \\mathcal{P}_{1n} \\\\ \n\\vdots & \\ddots & \\vdots \\\\ \n\\mathcal{P}_{n1} & \\cdots & \\mathcal{P}_{nn} \\\\\n\\end{bmatrix}</script><p>其中，每行元素相加等于1，每列元素相加等于1，矩阵的总和为状态的数量n。</p>\n<p>对于可数状态，$\\sum_{s’=1}^{n}\\mathcal{P}(s’|s)=1$</p>\n<script type=\"math/tex; mode=display\">\nsum(\\mathcal{P}) = \\sum_{s'=1}^{n}\\sum_{s=1}^{n}\\mathcal{P}_{ss'} = n</script><p>对于不可数状态（连续状态),$\\int_{s’}\\mathcal{P}(s’|s)=1$</p>\n<script type=\"math/tex; mode=display\">\nsum(\\mathcal{P}) = \\int_{s'}\\int_{s}\\mathcal{P}_{ss'} = n</script><p>举一个马尔科夫过程的例子:</p>\n<p>假设一个学生，他目前在学习语文科目，那么他接下来进行的活动过程如下图所示，游戏的吸引力很大，所以他有50%的概率在学完语文去玩游戏，并且很容易沉迷其中，图示玩游戏这个循环有90%的可能性，他还可以选择学习其他科目或者去睡觉，最终学习结束之后是否能通过考试也是有一定的概率的，这些状态之间转移的概率即为状态转移概率。</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MP.jpg\" alt=\"\"></p>\n<p>如果把例子中的各项状态用字母表示，将其表示为：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n玩游戏 & A\\\\ \n语文 & B\\\\ \n数学 & C\\\\ \n英语 & D\\\\ \n挂科 & E\\\\ \n\\mathcal{Pass} & F\\\\ \n睡觉 & G\n\\end{bmatrix}</script><p>那么其状态转移矩阵$\\mathcal{P}$可以表示成：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{array}{lc}\n\\mbox{}&\n\\begin{array}{cc}A & B & C & D & E & F & G \\end{array}\\\\\n\\begin{array}{c}A\\\\B\\\\C\\\\D\\\\E\\\\F\\\\G\\end{array}&\n\\left[\\begin{array}{cc}\n0.9&0.1\\\\\n0.5& &0.5\\\\\n& & &0.8& & &0.2\\\\\n&&&&0.4&0.6&\\\\\n&0.2&0.4&0.4&&&\\\\\n&&&&&&1\\\\\n&&&&&&&\n\\end{array}\\right]\n\\end{array}</script><h3 id=\"马尔科夫链与Episode\"><a href=\"#马尔科夫链与Episode\" class=\"headerlink\" title=\"马尔科夫链与Episode\"></a>马尔科夫链与Episode</h3><p>Episode可以翻译为片段、情节、回合等，在强化学习问题中，一个Episode就是一个马尔科夫链，根据状态转移矩阵可以得到许多不同的episode，也就是多个马尔科夫链。</p>\n<p>强化学习问题分两种：</p>\n<ol>\n<li>如果一个任务总能达到终态，结束任务或者开启下一轮任务，那么这个任务就被称为回合任务，也就是episode任务。例如，让一个智能体学习如何下围棋，围棋棋盘只有那么大，游戏定会终局，所以是一个回合式任务。</li>\n<li>如果一个任务可以无限持续下去，永远不会结束，即永远在训练当中，那么这个任务就被称为连续性任务。例如，教会一辆车能够进行自动驾驶就是一个连续性任务，<em>不要钻牛角尖说能源会耗尽，车子会磨损，我们只聚焦问题与环境本身，不涉及其他非稳定因素。</em></li>\n</ol>\n<p>在上边举的例子中就是一个回合式任务，因为无论这个序列有多长，最终都会达到终态-“睡觉”。</p>\n<p>根据上述例子我们可能采样出如下episode：</p>\n<ol>\n<li>$B-C-D-E-C-G$，即“学语文→数学→英语→考试没通过,挂科→继续学数学→睡觉”</li>\n<li>$B-A-A-…-A-B-C-G$，即“学语文→玩王者荣耀→玩刺激战场→玩OverCooker→玩守望先锋→玩英雄联盟→玩CS:GO→…→看一会儿数学→睡觉”。（仿佛就是我自己嘛！）</li>\n</ol>\n<h2 id=\"马尔科夫奖励过程\"><a href=\"#马尔科夫奖励过程\" class=\"headerlink\" title=\"马尔科夫奖励过程\"></a>马尔科夫奖励过程</h2><p>马尔科夫过程（Markov Process）主要描述的是状态之间的转移关系，在各个状态的转移过程中赋予不同的奖励值就得到了马尔科夫奖励过程。</p>\n<p>定义：马尔科夫奖励过程（Markov Reward Process, MRP）由一个四元组组成$(S,P,R,\\gamma)$</p>\n<ol>\n<li>$S$代表了状态的集合(也是维度有限的)</li>\n<li>$P$描述了状态转移矩阵$\\mathcal{P}_{ss’}=\\mathbb{P}[S_{t+1}=s’|S_{t}=s]$</li>\n<li>$R$表示奖励函数，$R(s)$描述了在状态$s$下的期望(立即)奖励，$\\mathcal{R}(s)=\\mathbb{E}[R_{t+1}|S_{t}=s]$</li>\n<li>$\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$</li>\n</ol>\n<p>$\\gamma$是用来计算累计奖励回报的,表示我们有多看中现在或者未来,为什么这么说呢?假设我们现在要计算一个episode始态$S_{0}$的奖励值$V(S_{0})$,不涉及具体公式推导的说,我们应该把$S_{0}$状态后续的奖励全部加和,这样就得到了对始态$S_{0}$的值估计,这些后续奖励的值的权重都是1,或者说此时$\\gamma=1$,但是当前状态对很多步之后的状态未必影响很大,我们这样计算过来并不能完全表示一个状态的值,那么我们应当顺势减少距离远的状态的权重,此时$\\gamma\\lt1$</p>\n<ul>\n<li>当$\\gamma=0$时,状态$S$的值完全由其转移的期望立即奖励表示,即<strong>一点都不关心未来</strong></li>\n<li>当$\\gamma=1$时,状态$S$的值由以当前状态为始态,运行至终态所得到的所有立即奖励加和的值表示,即<strong>未来与现在同等重要</strong></li>\n<li>当$0 \\lt\\gamma \\lt1$时,状态$S$的值是前两个模式的<em>trade-off</em>,即<strong>对未来看重的程度由$\\gamma$决定</strong></li>\n</ul>\n<p>这只是我们的直观感受,其实是为了数学便利（虽然我也不知道具体哪里提高了数学便利，但是在有些情况下会使值函数更快迭代收敛这是真的）。</p>\n<p><em>注：也有很多地方将MRP表示为三元组，即去掉$\\gamma$，但这不影响我们对这个过程的理解，下边的MDP也是一样，无论是三元组、四元组、还是五元组，只要能描述过程的性质就可以。</em></p>\n<p>将上述马尔科夫过程的例子升级为马尔科夫奖励过程如下图所示:</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MRP.png\" alt=\"\"></p>\n<p>奖励值定义为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{bmatrix}\n玩游戏 & A & -1\\\\ \n语文 & B & -2\\\\ \n数学 & C & -2\\\\ \n英语 & D & -2\\\\ \n挂科 & E & -5\\\\ \n\\mathcal{Pass} & F & 10\\\\ \n睡觉 & G & 0\n\\end{bmatrix}</script><p>这么定义奖励并没有什么复杂的含义,在这个例子中就拿身心愉悦程度来定义吧,学习固然是枯燥无味的,所以给予负奖励-2,玩游戏虽然会心情放松,但是始终面临着考试的压力,其实并不轻松,所以给予负奖励-1,挂科最痛苦为-5,考试全pass最开心为+10。</p>\n<p>在马尔科夫过程中的状态转移加入相应的奖励值即为马尔科夫奖励过程。</p>\n<h2 id=\"马尔科夫决策过程\"><a href=\"#马尔科夫决策过程\" class=\"headerlink\" title=\"马尔科夫决策过程\"></a>马尔科夫决策过程</h2><p>马尔科夫决策过程(Markov Decision Process, MDP)相比马尔科夫奖励过程多了一个动作$A$,它可以用一个五元组$(S,A,P,R,\\gamma)$表示:</p>\n<ol>\n<li>$S$代表了状态的集合(也是维度有限的)</li>\n<li>$A$代表了决策过程中动作的集合(维度有限的)</li>\n<li>$P$描述了状态转移矩阵$\\mathcal{P}_{ss’}^{a}=\\mathbb{P}[S_{t+1}=s’|S_{t}=s,A_{t}=a]$</li>\n<li>$R$表示奖励函数，$R(s)$描述了在状态$s$下<strong>执行某动作</strong>的期望(立即)奖励，$\\mathcal{R}(s,a)=\\mathbb{E}[R_{t+1}|S_{t}=s,A_{t}=a]$</li>\n<li>$\\gamma$表示衰减因子,即discounted factor,$\\gamma\\in[0,1]$</li>\n</ol>\n<p>MDPs是一个从交互中达成目标的强化学习问题的一个直接的框架。学习者和决策者叫做Agent。Agent进行交互的其它一切Agent之外的东西都叫做环境。Agent不断的选择动作，而环境也给出相应的反应，并且向Agent表现出新的状态。环境同时也给出一个数值作为反馈。Agent的目标就是通过选择不同的Action来最大化这个反馈值。</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/agent-env.png\" alt=\"\"></p>\n<p>强化学习所研究的内容就是得到一个状态$S$到动作$A$的映射关系,因此策略Policy可以表示成</p>\n<script type=\"math/tex; mode=display\">\n\\pi(a|s)=p(A_{t}=a|S_{t}=s)</script><hr>\n<p>注意:<br>你可能会认为,在马尔科夫奖励过程(MRP)中没有定义动作,但是其实是包含动作的,因为每个状态有多个转移的下一状态,其实就是多个动作嘛！</p>\n<p>很多文章会将有限MDP分开来讲，有限MDP即状态、动作和奖励值都只有有限个元素，对于有限MDP最优策略有唯一解，但是现实世界中任务复杂，因此大多数深度强化学习算法并不局限于解决有限MDP问题，因此本文不将MDP分情况来讲，即默认基于MDP的最优策略<strong>至少有一个解</strong>。</p>\n<hr>\n<p>没错,的确是这样的,MRP中也包含动作,但是我们并不关心,为什么这么说呢?<strong>因为就算每个状态可以执行多个动作,但是其每个动作所能转移到的状态是确定的,不确定的只是动作的选择,而不是动作的转移,而MDP中不确定的却是动作的转移,即执行动作所转移的下一状态是有一定概率的.</strong>什么意思呢?拿之前MRP的例子来说,语文状态有两个状态可以转移,数学和玩游戏,概率分别是0.5,但是当确定一个转移方向的时候(图中的箭头),其转移结果是确定的,获得的奖励也是确定的,但是在MDP中,执行动作导致转移的结果都未必是确定的.<strong><em>需要注意的是,MRP是属于MDP的,MDP执行动作并不一定必须是随机的.</em></strong></p>\n<p>接下来,我们将MRP的例子转换至MDP, 为了方便理解而又不增加示例的复杂性,不妨将”挂科”这个状态看作是一个动作,因为这个节点正巧入度为1,姑且就认为从英语到挂科的这个箭头是英语状态所能执行的动作.如图所示:</p>\n<p><img src=\"./强化学习之MDP马尔科夫决策过程/MDP.jpg\" alt=\"\"></p>\n<p>比较两个图可以发现区别,我把这个不确定的动作标为实心黑圆圈,这位刻苦的同学在学习完英语之后还想继续学习,但是他感觉三门科目都差不多了,于是他也很迷茫,他执行”学习”这个动作时的转移状态有三种:学语文、学数学、学英语.概率分别是:0.2、0.4,、0.4.这下就明白为什么我们要在MDP中加入动作$A$了吧,如果还不明白,请接着看下边的内容.</p>\n<p>顺便说一下,这个时候的转移矩阵已经不是简单的二维了,当然也可以用二维来表示,假设总共有$n$个状态,每个状态有$m$个动作,那么其行数为$n\\times m$,即遍历所有的状态和动作,得到$n \\times m$个状态-动作对$(s,a)$,其列数还是$n$.当然,也可以用一个三维tensor来表示,行和列都是$n$,第三维深度为$m$,很好理解.</p>\n<hr>\n<p><strong>网上有写MDP在给定策略下会退化为MRP,我对此不置可否,认为此种说法不够严谨,因为即使说在某状态s下选择的动作a是确定的,并不意味着其转移结果是确定的.</strong></p>\n<hr>\n<h3 id=\"回报-Return\"><a href=\"#回报-Return\" class=\"headerlink\" title=\"回报 Return\"></a>回报 Return</h3><p>在强化学习问题中，总是提到回报二字，论文中出现Return或者Discounted Return，我们已经知道奖励是什么，奖励就是转移到某个状态或者执行了某个动作之后转移至某个状态所获得的值$r$.</p>\n<p>回报就是由某时刻$t$之后决策序列所获得的奖励值经过一定规则计算出来的数值.</p>\n<p>公式描述:</p>\n<script type=\"math/tex; mode=display\">\nG_{t}\\doteq R_{t+1}+R_{t+2}+R_{t+3}+...+R_{t}</script><p>.其中,$T$表示一个episode达到终态的时间点.</p>\n<p>像之前介绍的一样,我们可能对未来有不同的看重程度,于是引入折扣因子$\\gamma$的回报表示为:</p>\n<script type=\"math/tex; mode=display\">\nG_{t}\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+...=\\begin{cases}\n\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\\\\n\\sum_{k=t+1}^{T}\\gamma^{k-t-1}R_{k}\n\\end{cases}</script><p>其中,$ 0\\leq\\gamma \\leq1$</p>\n<p>可以推出回报有如下形式:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nG_{t} &\\doteq R_{t+1}+\\gamma R_{t+2}+\\gamma^{2}R_{t+3}+\\gamma^{3}R_{t+4}+...\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma R_{t+3}+\\gamma^{2}R_{t+4}+...)\\\\\n&=R_{t+1}+\\gamma (R_{t+2}+\\gamma (R_{t+3}+\\gamma R_{t+4}+...))\\\\\n&=R_{t+1}+\\gamma G_{t+1}\n\\end{align*}</script><h3 id=\"策略-Policy\"><a href=\"#策略-Policy\" class=\"headerlink\" title=\"策略 Policy\"></a>策略 Policy</h3><p>我们一般使用$\\pi$来表示一个策略,使用$\\pi(a|s)$来表示某状态$s$采取动作$a$的概率,公示表示为:</p>\n<script type=\"math/tex; mode=display\">\n\\pi(a|s)=P(A_{t}=a|S_{t}=s)</script><p>策略完整定义了智能体在所有状态下的所有行为和其概率.</p>\n<p>给定一个MDP和一个策略$\\pi$,采样的状态序列</p>\n<script type=\"math/tex; mode=display\">\nS_{0},S_{1},S_{2},...,S_{n},...</script><p>是一个马尔科夫过程$\\lt S,P \\gt ^{\\pi}$,</p>\n<p>采样的状态、奖励序列</p>\n<script type=\"math/tex; mode=display\">\n(S_{0},R_{0}),(S_{1},R_{1}),(S_{2},R_{2}),...,(S_{n},R_{n}),...</script><p>是一个马尔科夫奖励过程$ \\lt S,P,R,\\gamma  \\gt^{\\pi}$,</p>\n<p>采样的状态、动作、奖励序列</p>\n<script type=\"math/tex; mode=display\">\n(S_{0},A_{0},R_{0}),(S_{1},A_{1},R_{1}),(S_{2},A_{2},R_{2}),...,(S_{n},A_{n},R_{n}),...</script><p>是一个马尔科夫决策过程$ \\lt S,A^{\\pi},P,R,\\gamma  \\gt^{\\pi}$.</p>\n<p><em>注意:在编程时一般以四元组$(s,a,r,s’)$为单位存储”经验”</em></p>\n<p>$\\pi$策略下$s\\rightarrow s’$转移概率由期望计算得$P_{ss’}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)P_{ss’}^{a}$,$s$状态下的期望立即奖励为$R_{s}^{\\pi}=\\sum_{a\\in A}\\pi(a|s)R_{s}^{a}$.</p>\n<p>上述例子中</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align*}\nR_{英语}&=\\sum_{a\\in A}\\pi(a|英语)R_{英语}^{a}\\\\\n&=0.2\\times-2+0.4\\times-2+0.4\\times-2\\\\\n&=-2\n\\end{align*}</script><p>状态转移概率可以描述为：在执行策略$\\pi$时，状态从$s$转移至$s’$的概率等于执行该状态下所有行为的概率与对应行为能使状态从$s$转移至$s’$的概率的乘积的和。</p>\n<p>奖励函数可以描述为：在执行策略$\\pi$时获得的奖励等于执行该状态下所有行为的概率与对应行为产生的即时奖励的乘积的和。</p>\n<p><strong>强化学习的目标就是最大化期望回报,相应的结果就是找到从状态空间$S$映射到动作空间$A$的最优策略</strong>,重点是,如何建立回报与策略之间的联系呢?</p>"}],"PostAsset":[{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/7.png","slug":"7.png","post":"cjvxtaa9n000sm8ve51ep8e8g","modified":1,"renderable":0},{"_id":"source/_posts/价值与贝尔曼方程/example4.png","slug":"example4.png","post":"cjvxtaabk002em8veyswzvd0m","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/17.png","slug":"17.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/dynamic-programming/pi.png","slug":"pi.png","post":"cjvxtaabf0029m8ve09y0kq4w","modified":1,"renderable":0},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/2.png","slug":"2.png","post":"cjvxtaa9n000sm8ve51ep8e8g","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/2.png","slug":"2.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/Evolution-Strategies-2017/atari.png","slug":"atari.png","post":"cjvxtaabb0026m8vei2w5qjt2","modified":1,"renderable":0},{"_id":"source/_posts/dynamic-programming/iteration.png","slug":"iteration.png","post":"cjvxtaabf0029m8ve09y0kq4w","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/7.png","slug":"7.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/5.png","slug":"5.png","post":"cjvxtaa9n000sm8ve51ep8e8g","modified":1,"renderable":0},{"_id":"source/_posts/something-hard-install-docker/1.png","post":"cjvxtaa9j000km8vewkkgxlp6","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/mc-td/dp.png","post":"cjvxtaa9g000fm8veog2s26w7","slug":"dp.png","modified":1,"renderable":1},{"_id":"source/_posts/mc-td/mc.png","post":"cjvxtaa9g000fm8veog2s26w7","slug":"mc.png","modified":1,"renderable":1},{"_id":"source/_posts/mc-td/td.png","post":"cjvxtaa9g000fm8veog2s26w7","slug":"td.png","modified":1,"renderable":1},{"_id":"source/_posts/强化学习的里程碑/GKBattleWithDeepBlue.jpeg","post":"cjvxtaa9u0013m8ve65v4wt93","slug":"GKBattleWithDeepBlue.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/强化学习的里程碑/KeJieBattleWithAlphaGo.jpeg","post":"cjvxtaa9u0013m8ve65v4wt93","slug":"KeJieBattleWithAlphaGo.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/强化学习的里程碑/LeeSedolBattleWithAlphaGo.jpeg","post":"cjvxtaa9u0013m8ve65v4wt93","slug":"LeeSedolBattleWithAlphaGo.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/use-conda-env-in-jupyter/1.png","post":"cjvxtaa9k000lm8vew4fz21r4","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/use-conda-env-in-jupyter/2.png","post":"cjvxtaa9k000lm8vew4fz21r4","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/use-conda-env-in-jupyter/3.png","post":"cjvxtaa9k000lm8vew4fz21r4","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/use-conda-env-in-jupyter/4.png","post":"cjvxtaa9k000lm8vew4fz21r4","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/win-rightclick-create-md/1546050455.jpg","post":"cjvxtaa9m000qm8vejd2bft2k","slug":"1546050455.jpg","modified":1,"renderable":1},{"_id":"source/_posts/win-rightclick-create-md/20181229103503.png","post":"cjvxtaa9m000qm8vejd2bft2k","slug":"20181229103503.png","modified":1,"renderable":1},{"_id":"source/_posts/win-rightclick-create-md/20181229103752.png","post":"cjvxtaa9m000qm8vejd2bft2k","slug":"20181229103752.png","modified":1,"renderable":1},{"_id":"source/_posts/win-rightclick-create-md/20181229105300.png","post":"cjvxtaa9m000qm8vejd2bft2k","slug":"20181229105300.png","modified":1,"renderable":1},{"_id":"source/_posts/win-rightclick-create-md/20181229105408.png","post":"cjvxtaa9m000qm8vejd2bft2k","slug":"20181229105408.png","modified":1,"renderable":1},{"_id":"source/_posts/rl-classification/model-classification.png","post":"cjvxtaa9i000gm8vegjsl4apw","slug":"model-classification.png","modified":1,"renderable":1},{"_id":"source/_posts/rl-classification/non-stationary.png","post":"cjvxtaa9i000gm8vegjsl4apw","slug":"non-stationary.png","modified":1,"renderable":1},{"_id":"source/_posts/rl-classification/policy-based.png","post":"cjvxtaa9i000gm8vegjsl4apw","slug":"policy-based.png","modified":1,"renderable":1},{"_id":"source/_posts/rl-classification/stationary.png","post":"cjvxtaa9i000gm8vegjsl4apw","slug":"stationary.png","modified":1,"renderable":1},{"_id":"source/_posts/rl-classification/value-based.png","post":"cjvxtaa9i000gm8vegjsl4apw","slug":"value-based.png","modified":1,"renderable":1},{"_id":"source/_posts/rl-classification/图.vsdx","post":"cjvxtaa9i000gm8vegjsl4apw","slug":"图.vsdx","modified":1,"renderable":1},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/1.png","post":"cjvxtaa9n000sm8ve51ep8e8g","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/10.png","post":"cjvxtaa9n000sm8ve51ep8e8g","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/3.png","post":"cjvxtaa9n000sm8ve51ep8e8g","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/4.png","post":"cjvxtaa9n000sm8ve51ep8e8g","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/6.png","post":"cjvxtaa9n000sm8ve51ep8e8g","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/8.png","post":"cjvxtaa9n000sm8ve51ep8e8g","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/为远程Ubuntu服务器安装图像界面/9.png","post":"cjvxtaa9n000sm8ve51ep8e8g","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/11.png","post":"cjvxtaa940004m8veaipm4m46","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/16.png","post":"cjvxtaa940004m8veaipm4m46","slug":"16.png","modified":1,"renderable":1},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/22.png","post":"cjvxtaa940004m8veaipm4m46","slug":"22.png","modified":1,"renderable":1},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/26.png","post":"cjvxtaa940004m8veaipm4m46","slug":"26.png","modified":1,"renderable":1},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/4.png","post":"cjvxtaa940004m8veaipm4m46","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/1.png","slug":"1.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/10.png","slug":"10.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/12.png","slug":"12.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/13.png","slug":"13.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/14.png","slug":"14.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/15.png","slug":"15.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/18.png","slug":"18.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/19.png","slug":"19.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/20.png","slug":"20.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/21.png","slug":"21.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/23.png","slug":"23.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/24.png","slug":"24.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/25.png","slug":"25.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/27.png","slug":"27.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/28.png","slug":"28.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/3.png","slug":"3.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/5.png","slug":"5.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/6.png","slug":"6.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/8.png","slug":"8.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/AnderewNg-deeplearning-note-summary/9.png","slug":"9.png","post":"cjvxtaa940004m8veaipm4m46","modified":1,"renderable":0},{"_id":"source/_posts/Evolution-Strategies-2017/algorithm1.png","post":"cjvxtaabb0026m8vei2w5qjt2","slug":"algorithm1.png","modified":1,"renderable":1},{"_id":"source/_posts/Evolution-Strategies-2017/algorithm2.png","post":"cjvxtaabb0026m8vei2w5qjt2","slug":"algorithm2.png","modified":1,"renderable":1},{"_id":"source/_posts/Evolution-Strategies-2017/frame-skip.png","post":"cjvxtaabb0026m8vei2w5qjt2","slug":"frame-skip.png","modified":1,"renderable":1},{"_id":"source/_posts/Evolution-Strategies-2017/mujoco.png","post":"cjvxtaabb0026m8vei2w5qjt2","slug":"mujoco.png","modified":1,"renderable":1},{"_id":"source/_posts/Evolution-Strategies-2017/parallelization.png","post":"cjvxtaabb0026m8vei2w5qjt2","slug":"parallelization.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-programming/dp.png","post":"cjvxtaabf0029m8ve09y0kq4w","slug":"dp.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-programming/gridworld.png","post":"cjvxtaabf0029m8ve09y0kq4w","slug":"gridworld.png","modified":1,"renderable":1},{"_id":"source/_posts/dynamic-programming/pivsvi.png","slug":"pivsvi.png","post":"cjvxtaabf0029m8ve09y0kq4w","modified":1,"renderable":0},{"_id":"source/_posts/dynamic-programming/vi.png","post":"cjvxtaabf0029m8ve09y0kq4w","slug":"vi.png","modified":1,"renderable":1},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MRP.png","slug":"MRP.png","post":"cjvxtaacy002ym8veb61fhwrs","modified":1,"renderable":0},{"_id":"source/_posts/价值与贝尔曼方程/example1.png","post":"cjvxtaabk002em8veyswzvd0m","slug":"example1.png","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/example2.png","post":"cjvxtaabk002em8veyswzvd0m","slug":"example2.png","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/example3.png","post":"cjvxtaabk002em8veyswzvd0m","slug":"example3.png","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/example5.png","post":"cjvxtaabk002em8veyswzvd0m","slug":"example5.png","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/example6.png","post":"cjvxtaabk002em8veyswzvd0m","slug":"example6.png","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/q.jpg","post":"cjvxtaabk002em8veyswzvd0m","slug":"q.jpg","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/qsa.jpg","post":"cjvxtaabk002em8veyswzvd0m","slug":"qsa.jpg","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/v.jpg","post":"cjvxtaabk002em8veyswzvd0m","slug":"v.jpg","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/vq.jpg","post":"cjvxtaabk002em8veyswzvd0m","slug":"vq.jpg","modified":1,"renderable":1},{"_id":"source/_posts/价值与贝尔曼方程/vs.jpg","post":"cjvxtaabk002em8veyswzvd0m","slug":"vs.jpg","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_10-44-58.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_10-52-49.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_11-29-30.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_11-36-31.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_12-01-32.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_12-02-47.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_13-28-19.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_13-31-15.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_13-31-52.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_15-16-44.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-04_15-18-40.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-25-17.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-11_13-25-17.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-35-56.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-11_13-35-56.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_13-39-26.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-11_13-39-26.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_15-02-16.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-11_15-02-16.png","modified":1,"renderable":1},{"_id":"source/_posts/创建ML-Agents的Docker镜像/Snipaste_2019-01-11_22-38-42.png","post":"cjvxtaabi002bm8veeoodultx","slug":"Snipaste_2019-01-11_22-38-42.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_08-30-41.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_09-42-07.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_09-56-41.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_10-03-30.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_10-11-01.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_10-56-08.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_10-57-56.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_13-49-28.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_16-24-49.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_16-29-58.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_16-32-08.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_16-33-27.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_16-40-53.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_16-44-22.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_17-05-30.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_17-12-36.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_17-39-07.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_18-08-49.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_18-11-49.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_18-14-21.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_18-20-07.png","modified":1,"renderable":1},{"_id":"source/_posts/create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png","post":"cjvxtaabd0027m8vewzvwyrfh","slug":"Snipaste_2019-01-03_18-31-16.png","modified":1,"renderable":1},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/M.jpg","post":"cjvxtaacy002ym8veb61fhwrs","slug":"M.jpg","modified":1,"renderable":1},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MDP.jpg","post":"cjvxtaacy002ym8veb61fhwrs","slug":"MDP.jpg","modified":1,"renderable":1},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MP.jpg","post":"cjvxtaacy002ym8veb61fhwrs","slug":"MP.jpg","modified":1,"renderable":1},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/MPs.jpg","post":"cjvxtaacy002ym8veb61fhwrs","slug":"MPs.jpg","modified":1,"renderable":1},{"_id":"source/_posts/强化学习之MDP马尔科夫决策过程/agent-env.png","post":"cjvxtaacy002ym8veb61fhwrs","slug":"agent-env.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjvxtaa8z0002m8ve2zl36o2r","category_id":"cjvxtaa960005m8veo9tqzaci","_id":"cjvxtaa9i000hm8ve1b1erjsr"},{"post_id":"cjvxtaa940004m8veaipm4m46","category_id":"cjvxtaa9f000cm8veti7esjvy","_id":"cjvxtaa9l000mm8vehdy1g9ds"},{"post_id":"cjvxtaa9j000km8vewkkgxlp6","category_id":"cjvxtaa960005m8veo9tqzaci","_id":"cjvxtaa9o000tm8ve0450l98t"},{"post_id":"cjvxtaa990008m8ve34c3mmwh","category_id":"cjvxtaa9j000im8veqebwfkum","_id":"cjvxtaa9q000ym8veyzk2nd3u"},{"post_id":"cjvxtaa9m000qm8vejd2bft2k","category_id":"cjvxtaa9j000im8veqebwfkum","_id":"cjvxtaa9s0011m8vekue4txrr"},{"post_id":"cjvxtaa9d000am8vextgp6tl5","category_id":"cjvxtaa9l000nm8vexhgqb978","_id":"cjvxtaa9v0014m8vene4u2sdl"},{"post_id":"cjvxtaa9e000bm8vejqrzkadz","category_id":"cjvxtaa9j000im8veqebwfkum","_id":"cjvxtaa9w0017m8ved3hhx37z"},{"post_id":"cjvxtaa9g000fm8veog2s26w7","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaa9x001cm8vebsrbksu2"},{"post_id":"cjvxtaa9i000gm8vegjsl4apw","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaa9z001gm8vev222iiht"},{"post_id":"cjvxtaa9k000lm8vew4fz21r4","category_id":"cjvxtaa9l000nm8vexhgqb978","_id":"cjvxtaaa0001jm8vejkecznde"},{"post_id":"cjvxtaa9n000sm8ve51ep8e8g","category_id":"cjvxtaa9y001fm8ve7q7l17ty","_id":"cjvxtaaa1001nm8ve8rksch0j"},{"post_id":"cjvxtaa9p000xm8vejdm2j7ea","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaaa3001rm8vexl72d8dd"},{"post_id":"cjvxtaa9r0010m8ve1jz2ow11","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaaa4001vm8vewdtbjccy"},{"post_id":"cjvxtaa9u0013m8ve65v4wt93","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaaa5001xm8vedllc8eo6"},{"post_id":"cjvxtaabb0026m8vei2w5qjt2","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaabk002cm8ve5xp0wz1q"},{"post_id":"cjvxtaabd0027m8vewzvwyrfh","category_id":"cjvxtaa960005m8veo9tqzaci","_id":"cjvxtaabl002fm8ve5kg4wvt9"},{"post_id":"cjvxtaabf0029m8ve09y0kq4w","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaabv002jm8ve2owfie29"},{"post_id":"cjvxtaabk002em8veyswzvd0m","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaabx002mm8ve84yf2tm2"},{"post_id":"cjvxtaabu002gm8venlon6nq6","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaac0002om8ve2lw6tmci"},{"post_id":"cjvxtaabi002bm8veeoodultx","category_id":"cjvxtaa960005m8veo9tqzaci","_id":"cjvxtaaca002rm8ve75lhdvdw"},{"post_id":"cjvxtaabi002bm8veeoodultx","category_id":"cjvxtaabv002hm8vezzf9lt3g","_id":"cjvxtaacb002um8vehgoxwmbp"},{"post_id":"cjvxtaacy002ym8veb61fhwrs","category_id":"cjvxtaa9t0012m8vev8gax4xs","_id":"cjvxtaacz0030m8vegui9fqwl"}],"PostTag":[{"post_id":"cjvxtaa8z0002m8ve2zl36o2r","tag_id":"cjvxtaa980006m8vep89rf5r3","_id":"cjvxtaa9g000em8vek9kajdkg"},{"post_id":"cjvxtaa9j000km8vewkkgxlp6","tag_id":"cjvxtaa980006m8vep89rf5r3","_id":"cjvxtaa9m000pm8vejfe3wpji"},{"post_id":"cjvxtaa940004m8veaipm4m46","tag_id":"cjvxtaa9f000dm8veqh8m9kmr","_id":"cjvxtaa9n000rm8ve9khlvlcp"},{"post_id":"cjvxtaa940004m8veaipm4m46","tag_id":"cjvxtaa9j000jm8vewmhfwyld","_id":"cjvxtaa9o000um8vehh9b8w3e"},{"post_id":"cjvxtaa990008m8ve34c3mmwh","tag_id":"cjvxtaa9m000om8vejdsfpssy","_id":"cjvxtaa9r000zm8ve5okn0ruv"},{"post_id":"cjvxtaa9d000am8vextgp6tl5","tag_id":"cjvxtaa9p000wm8veziefvjl3","_id":"cjvxtaa9v0016m8ve6shq4t8e"},{"post_id":"cjvxtaa9e000bm8vejqrzkadz","tag_id":"cjvxtaa9v0015m8veqtpfepjy","_id":"cjvxtaa9x001am8vem60juste"},{"post_id":"cjvxtaa9g000fm8veog2s26w7","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaa9y001em8vesbgk4w8v"},{"post_id":"cjvxtaa9i000gm8vegjsl4apw","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaa9z001im8verr1e23s8"},{"post_id":"cjvxtaa9k000lm8vew4fz21r4","tag_id":"cjvxtaa9p000wm8veziefvjl3","_id":"cjvxtaaa2001pm8veq8qcbqzk"},{"post_id":"cjvxtaa9k000lm8vew4fz21r4","tag_id":"cjvxtaaa0001lm8vewxuii6b0","_id":"cjvxtaaa3001sm8ve3hlffkr9"},{"post_id":"cjvxtaa9m000qm8vejd2bft2k","tag_id":"cjvxtaa9v0015m8veqtpfepjy","_id":"cjvxtaaa4001um8vemnz9lje5"},{"post_id":"cjvxtaa9n000sm8ve51ep8e8g","tag_id":"cjvxtaaa3001tm8vekwpesl7s","_id":"cjvxtaaa6001zm8ve857qr0zx"},{"post_id":"cjvxtaa9n000sm8ve51ep8e8g","tag_id":"cjvxtaaa4001wm8ven3kvyaqv","_id":"cjvxtaaa60020m8ve7nhg7cx0"},{"post_id":"cjvxtaa9p000xm8vejdm2j7ea","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaaa70022m8ve1yqeigr8"},{"post_id":"cjvxtaa9r0010m8ve1jz2ow11","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaaa80024m8veg8gstqnl"},{"post_id":"cjvxtaa9u0013m8ve65v4wt93","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaaa90025m8vejsbz7mbe"},{"post_id":"cjvxtaabb0026m8vei2w5qjt2","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaabf0028m8veds4w4cke"},{"post_id":"cjvxtaabf0029m8ve09y0kq4w","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaabk002dm8verkt5l65u"},{"post_id":"cjvxtaabk002em8veyswzvd0m","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaabw002km8ve8z9qryns"},{"post_id":"cjvxtaabu002gm8venlon6nq6","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaabx002lm8vet3lpp3hs"},{"post_id":"cjvxtaabd0027m8vewzvwyrfh","tag_id":"cjvxtaa980006m8vep89rf5r3","_id":"cjvxtaac1002pm8ve5ksb910y"},{"post_id":"cjvxtaabd0027m8vewzvwyrfh","tag_id":"cjvxtaabi002am8vefgga2e1r","_id":"cjvxtaaca002qm8veh1qn2i3v"},{"post_id":"cjvxtaabd0027m8vewzvwyrfh","tag_id":"cjvxtaabv002im8veak7bwu3i","_id":"cjvxtaacb002tm8vegu0rje6c"},{"post_id":"cjvxtaabi002bm8veeoodultx","tag_id":"cjvxtaa980006m8vep89rf5r3","_id":"cjvxtaach002vm8vekeizlcvr"},{"post_id":"cjvxtaabi002bm8veeoodultx","tag_id":"cjvxtaabx002nm8verds06dnp","_id":"cjvxtaach002wm8vee78o3scz"},{"post_id":"cjvxtaabi002bm8veeoodultx","tag_id":"cjvxtaaca002sm8veosmuob0k","_id":"cjvxtaaci002xm8veeqdzibda"},{"post_id":"cjvxtaacy002ym8veb61fhwrs","tag_id":"cjvxtaa9w0019m8veh90lejfm","_id":"cjvxtaacz002zm8ve57i9yjhm"}],"Tag":[{"name":"docker","_id":"cjvxtaa980006m8vep89rf5r3"},{"name":"note","_id":"cjvxtaa9f000dm8veqh8m9kmr"},{"name":"deeplearning","_id":"cjvxtaa9j000jm8vewmhfwyld"},{"name":"Git","_id":"cjvxtaa9m000om8vejdsfpssy"},{"name":"conda","_id":"cjvxtaa9p000wm8veziefvjl3"},{"name":"markdown","_id":"cjvxtaa9v0015m8veqtpfepjy"},{"name":"rl","_id":"cjvxtaa9w0019m8veh90lejfm"},{"name":"jupyter notebook","_id":"cjvxtaaa0001lm8vewxuii6b0"},{"name":"ubuntu","_id":"cjvxtaaa3001tm8vekwpesl7s"},{"name":"x2go","_id":"cjvxtaaa4001wm8ven3kvyaqv"},{"name":"mxnet","_id":"cjvxtaabi002am8vefgga2e1r"},{"name":"sniper","_id":"cjvxtaabv002im8veak7bwu3i"},{"name":"unity","_id":"cjvxtaabx002nm8verds06dnp"},{"name":"ml-agents","_id":"cjvxtaaca002sm8veosmuob0k"}]}}