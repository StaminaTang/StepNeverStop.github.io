<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[强化学习基本概念]]></title>
    <url>%2F2019%2F04%2F08%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[强化学习基本概念学习了这么久的强化学习, 不做笔记总是会忘记, 于是写在博客里方便自己复习, 也与同路人分享. 强化学习是什么?强化学习是什么? 它的英文名字是Reinforcement Learning, 和Machine Learning一样, 都是以‘ing’结尾的. 它是一个问题、一组解决这个问题的方案以及探求这些解决方案的方法. 对于问题和方法一定要有清晰的认识, 很多人在学习强化学习时遇到的各种困惑与不解都是因为不能清晰的认识问题和方法的区别和联系. 强化学习与有监督学习(supervised learning)不同. 有监督学习是目前机器学习领域研究最多的方向, 它从由经验丰富的、学识渊博的专家(监督者)提供一系列带有标签(如每个样本被正确分类的类别)的样本数据中进行学习, 这种方法通常被用于分类问题. 有监督学习的目标是当给定一个没有在训练样本集出现的数据时, 可以准确推断出它的标签/类别. 这种有监督学习非常重要而且有用, 但是它没有能力从交互中进行学习, 而强化学习在智能体与环境进行交互的过程中进行学习. 为什么有监督学习不能从交互中学习呢? 因为有监督学习需要的近乎完全的样本以及其准确的信息都是在交互问题中很难获得的(不现实的). 在未知的交互场景中, 我们往往只能根据智能体的经验进行学习. 强化学习与无监督学习(unsupervised learning)也是不同的. 无监督学习通常被用于发现无标签样本集的隐藏结构. 我们一般任务机器学习只分为有、无监督学习两种, 而且将强化学习分为无监督学习一类. 但其实强化学习与无监督学习有本质的区别. 强化学习的目的是最大化可获得的奖励值, 而无监督学习是发现隐藏结构. 当然, 如果在强化学习问题中可以发现其样本内的隐藏结构, 这对于强化学习肯定是很有帮助的, 但是仅仅这些隐藏结构并不能处理强化学习最大化奖励值方法的问题. 因此, 我们通常将强化学习归为机器学习的第三个类别, 与有、无监督学习并列. 注: 在强化学习问题中, 任何可以反映当前动作所带来的影响的元素都可以被理解为奖励值.(个人见解) Reinforcement learning is learning what to do——how to map situations to actions——so as to maxmize a numerical reward signal. ——《Reinforcement Learning: An Introduction》 强化学习学习的是从状态s到要执行的最优动作a之间的映射关系, 也就是找到一个策略(函数/逻辑规则)使得在给定状态下通过该策略所产生的决策可以最终带来最大的回报. 学习者不被告知应该采取什么动作, 而是通过训练使它们发现采取什么样的动作可以产生最高的奖励值. 这与婴儿学习的方式很像, 你可能会说:”瞎讲, 婴儿可以模仿你的动作进行学习.”. 但你要知道, 当你对婴儿的动作进行批评(吵)和奖励(笑)时, 这就已经是一个强化学习的过程了. 强化学习的两个要素强化学习必不可少的两个要素是智能体Agent和环境Environment.既然强化学习是在交互过程中进行学习, 那么交互必定是双方或者多方的, 在强化学习问题中, 交互的双方是智能体和环境. 智能体 智能体是环境的观察者 智能体是策略的载体 智能体是动作的执行者 环境 环境是对智能体动作的评判者, 即给出立即奖励 环境是智能体进行运动等行为的基本空间 环境给出当前时刻的观察信息, 供智能体进行采集 强化学习的两个特点 trial-and-error/试错学习智能体在与环境交互的过程中进行学习时, 不会得到任何人为的或者示例的指导(如果进行指导, 则为有监督学习/模仿学习/逆强化学习等), 智能体只能通过在环境中不断地试错, 积累经验, 最终学到可以完成目标并获得最大奖励值的策略. delayed reward/延迟奖励在大多数强化学习问题中, 某一状态s下执行的动作a不仅会影响当前的立即奖励r, 而且还会影响后续的状态序列, 以及后续的奖励值. 当前的立即奖励值并不能反映出在这个动作对(s,a)对整个决策过程的影响, 只有等到这一决策过程结束时, 才能判断其在这个状态序列的奖励(价值), 所以, 延迟奖励也是强化学习过程中的一个特点. 强化学习的难点(Challenge)相比其他学习, 强化学习中的一大难点是探索与利用, 也就是exploration and exploitation, 这个难题已经被数学家研究了几十年了, 但仍然没有解决. 为了获得尽量多的奖励, 智能体需要根据过去学习的经验选择产生立即奖励值最高的动作, 但是给定状态下可供选择的动作有很多, 有些被执行过, 有些没有被执行过, 为了去发现产生立即奖励值最高的动作, 必须尝试选择之前被选择过动作. 这个问题就出现了, 智能体必须利用它已经探索过的产生大奖励值的动作, 也必须探索未知奖励值的动作(有可能很小)为了以后可以选择更好的动作. 只探索不利用、只利用不探索在强化学习问题中都是独木难支. 在随机任务中, 一个同样的动作往往需要被探索很多次才可能对它的期望奖励值有较准确的估计. 强化学习的四个元素除了智能体与环境两个要素之外, 强化学习系统/框架中还有四个子元素: 策略、奖励机制、值函数、模型(未必有). 策略 Policy策略定义了智能体在当前时刻应该做出的行为. 与人类的刺激-反应机制很像, 策略是从感知到的环境信息到执行的行为之间的映射, 策略是强化学习智能体的核心, 它决定了智能体的行为. 在一般的强化学习问题中, 策略可能是随机的、非确定的, 它通常给出可选择执行的动作的概率或概率分布. 奖励机制 Reward Signal奖励机制定义了强化学习问题的目标, 在交互的每一步, 环境都会向智能体传递一个数字信息, 我们称之为”奖励”. 智能体的唯一目标就是在整个交互过程中最大化总的奖励之和. 因此, 奖励定义了某个动作的好坏(但并不意味着坏的动作在交互过程中是坏的, 其作用由值函数来定义). 类比于我们人类, 奖励就像我们高兴或者痛苦一样, 它们是我们对当前环境-动作的立即反应和评价.奖励机制是智能体更新策略Policy的基础, 如果智能体成功进行了学习, 当在当前策略选择了一个较低回报的动作时, 之后它可能会选择其他动作.通常, 奖励机制由状态s和动作a的随机函数表示R(s,a) 值函数 Value Function立即奖励表示着当前动作或状态带来的立即效果是好是坏, 但是值函数表示这个动作在整个交互过程中扮演的角色是好是坏. 一个状态的值是从该状态开始到交互结束所积累的立即奖励的总和.一个状态可能总是产生很低的立即奖励, 但是它有很高的值, 因为该状态之后的后续状态中会产生很大的立即奖励. 相反也是一样. 类比于我们人类, 立即奖励的高低相当于我们高兴或痛苦, 但是值函数给出的值则表示了在整个事件过程中我们有多高兴或不高兴的深刻判断.引入值函数的唯一目的就是为了训练智能体以获得更大的奖励, 当智能体做决策以及评估决策时, 我们一直关心的都是值函数而不是立即奖励, 对于动作的选择也是基于对值函数的判断/评估. 值比立即奖励更难以确定, 因为立即奖励可以由环境准确的给出, 但是值却需要评估甚至多次评估才可能相对准确(因为有可能交互过程永远不结束, 那么对值的估计会有偏差). 我们希望选择的动作带来最高的值, 而不是最高的立即奖励, 实际上, 几乎所有强化学习算法中最重要的部分就是对于值函数的有效估计方法. 关于值函数估计所扮演的核心角色在近60年被广泛研究. 模型 Model模型是对环境行为的仿真, 我们可以通过模型推断出动作对环境的改变, 给出准确的立即奖励和状态信息. 例如, 给定一个状态和动作, 模型可以预测出下一个要转移的状态以及下一个立即奖励值. 如果模型是确定的, 我们一般使用规划(planning)的方法来选择最优动作, 对于这种方式我们称之为基于模型model-based的方法, 相反, 如果模型是不确定的, 也就是model-free, 我们只能通过试错的方式进行学习并选择动作. 注: 对于什么是model-based和model-free将在以后进行深入讨论. 强化学习的通用符号表示 Notation$$← 赋值$$]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吴恩达deeplearning.ai课程笔记总结]]></title>
    <url>%2F2019%2F03%2F25%2FAnderewNg-deeplearning-note-summary%2F</url>
    <content type="text"><![CDATA[吴恩达deeplearning.ai课程笔记总结在吴恩达机器学习系列课程完结后不久，一位名叫Tess Ferrandez的小姐姐在推特上分享了一套自己的课程笔记，瞬间收获了3k+赞和1k+转发。 不同于满屏公式代码的黑白笔记，这套信息图不仅知识点满满，且行文构图都像插画一样颜值颇高。吴恩达自己也在推特上转发称赞了这一位有诚意的学习者，毕竟他一直倡导学习是一件简单快乐的事情。 Link: 笔记源地址 1. 深度学习介绍 2. 逻辑回归 3. 浅层神经网络 4. 深层神经网络 5. 机器学习应用程序设置 6. 正则化——防止过拟合 7. 优化训练 8. 优化算法 9. 超参数调试 10. 机器学习项目构建 11. 错误分析 12. 训练 vs 验证/测试 失配 13. 扩展学习 14. 卷积基础 15. Padding 16. 深层 CNN 17. 典型的 CNN 模型 18. ResNet 19. 实用建议 20. 检测算法 21. 人脸识别 22. 神经风格迁移 23. 循环神经网络 24. 更多 RNN 模型 25. NLP-词嵌入 26. 词嵌入详解 27. 序列到序列基本模型 28. 序列到序列]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些在Docker中比较难以安装的库(整理)]]></title>
    <url>%2F2019%2F03%2F24%2Fsomething-hard-install-docker%2F</url>
    <content type="text"><![CDATA[一些在Docker中比较难以安装的库(整理)前言在配置镜像时, 强烈建议将源更改为国内镜像站, 因为国外有些镜像站链接速度很慢, 更新也很慢, 很多库无法正确安装我所使用的镜像站为sources.list:1234567891011121314151617deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 在Dockerfile或者在容器内使用命令12RUN cp /etc/apt/sources.list /etc/apt/sources.list.bakCOPY sources.list /etc/apt/sources.list 将源替换. CUDA 9.0 开发者版dockerfile如下:1234567891011121314FROM nvidia/cuda:9.0-runtime-ubuntu16.04LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;RUN apt-get update &amp;&amp; apt-get install -y --allow-unauthenticated --no-install-recommends \ cuda-libraries-dev-$CUDA_PKG_VERSION \ cuda-nvml-dev-$CUDA_PKG_VERSION \ cuda-minimal-build-$CUDA_PKG_VERSION \ cuda-command-line-tools-$CUDA_PKG_VERSION \ cuda-core-9-0=9.0.176.3-1 \ cuda-cublas-dev-9-0=9.0.176.4-1 \ libnccl-dev=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \ rm -rf /var/lib/apt/lists/*ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs –allow-unauthenticated 这句命令很重要, 不使用的话很有可能安装失败 cudnn 7.0.5 https://developer.nvidia.com/rdp/cudnn-archive 下载cuDNN Libraries for Linux,不要下载 Power 8 把下载好的包上传到FTP服务器, 或者传输到容器内, 或者直接在容器中下载好 cd到包位置 cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz tar -xvf cudnn-9.0-linux-x64-v7.tgz cp include/* /usr/local/cuda-9.0/include cp lib64/* /usr/local/cuda-9.0/lib64 chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn* 这一步如果cuda是base版本,则没有include文件夹,需要手动创建后再执行 export PATH=/usr/local/cuda-9.0/bin:$PATH cd到/usr/local/cuda-9.0/lib64 nano ~/.bashrc,关联环境变量 在最后一行加入export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc ldconfig -v 使用cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2 查看cudnn版本 jemalloc选择安装jemalloc,这个工具可以加速编译,碎片整理,具体请自行谷歌 apt-get install autoconf apt-get install automake apt-get install libtool git clone https://github.com/jemalloc/jemalloc.git cd jemalloc git checkout 4.5.0安装4.5.0版本的jemalloc,5.x版本的有坑,深坑 ./autogen.sh make make install_bin install_include install_lib,之所以不使用make install是因为会报错,如下: Python3.6记得sudo apt-get install software-properties-common add-apt-repository ppa:jonathonf/python-3.6, 按ENTER apt-get update &amp;&amp; apt-get install python3.6 -y 修改系统默认的python版本为3.6 cd /usr/bin, 保险起见,建议分两步 rm python ln -s python3.6m python 如需更新,pip3 install --upgrade pip, 8.1.1-&gt;19.0.3 python -V]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Jupyter Notebook中使用本机的conda环境]]></title>
    <url>%2F2019%2F03%2F22%2Fuse-conda-env-in-jupyter%2F</url>
    <content type="text"><![CDATA[在Jupyter Notebook中使用本机的conda环境Jupyter下conda多环境管理1. 手撸命令 在base环境下安装内核管理工具pip install ipykernel 将环境内核添加到jupyter kernel中python -m ipykernel install --user --name [env_name] --display-name &quot;[show name in jupyter]&quot; 查看已在jupyter中创建的虚拟环境内核jupyter kernelspec list 删除内核jupyter kernelspec uninstall [env_name] 2. 使用插件简单粗暴, 在base环境下使用命令conda install nb_conda接下来, 看看jupyter中能不能显示conda环境jupyter notebook在文件内部也可以很方便的切换环境]]></content>
      <categories>
        <category>Conda</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为远程Ubuntu服务器安装图像界面]]></title>
    <url>%2F2019%2F01%2F09%2F%E4%B8%BA%E8%BF%9C%E7%A8%8BUbuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[为远程服务器Ubuntu系统安装图形界面资源 X2GO 在服务器上安装X2go服务器 安装这个add-apt-repository命令 apt-get install -y python-software-properties software-properties-common 添加PPA apt-add-repository -y ppa:x2go/stable 更新包列表并安装x2go服务器端 apt-get update apt-get install x2goserver x2goserver-xsession 安装XFCE图像界面在安装XFCE桌面环境时，有可能会出错，原因是perl为系统使用zh_CN.UTF-8，但系统不知道zh_CN.UTF-8是什么东西，所以需要安装一个中文语言，系统就知道zh_CN.UTF-8了，这个时候perl就不会报错了​ - apt-get install language-pack-zh-hans​ - apt-get install xfce4 安装GNOME图像界面apt-get install -y gnome没有测试成功,似乎是不兼容的问题 安装MATE图像界面apt-get install -y mate 安装LXDE图像界面apt-get install -y xorg lxde 重要配置开启远程连接时有可能会出现mesg: ttyname failed: Inappropriate ioctl for device错误，所以需要修改一下文件​ - nano /root/.profile​ - 把mesg n 替换成 tty -s &amp;&amp; mesg n 在客户端上安装X2go客户端MAC 安装Xquartz XQuartz 输入命令 echo &quot;*VT100.translations: #override Meta &lt;KeyPress&gt; V: insert-selection(PRIMARY, CUT_BUFFER0) \n&quot; &gt; ~/.Xdefaults 安装X2Go Client X2Go Client 打开客户端，设置连接 检查客户端设置，确保X11被正确引导 开始连接 连接成功 Windows 安装x2goclient x2goclient 配置好之后连接成功 Linux下各种图像界面测评]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>x2go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建ML-Agents的Docker镜像]]></title>
    <url>%2F2019%2F01%2F04%2F%E5%88%9B%E5%BB%BAML-Agents%E7%9A%84Docker%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[创建ML-Agents的Docker镜像前言 如果需要在镜像中使用GPU训练,可以将Nvidia的官方镜像作为基础镜像,Dockerfile如下:1234567891011121314151617181920212223242526FROM nvidia/cuda:9.0-base-ubuntu16.04LABEL maintainer &quot;NVIDIA CORPORATION &lt;cudatools@nvidia.com&gt;&quot;ENV NCCL_VERSION 2.3.7RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \ apt-utils \ cuda-libraries-$CUDA_PKG_VERSION \ cuda-cublas-9-0=9.0.176.4-1 \ libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \ apt-mark hold libnccl2 &amp;&amp; \ rm -rf /var/lib/apt/lists/*RUN apt-get update &amp;&amp; apt-get install -y openssh-serverRUN apt-get install -y nanoRUN mkdir /var/run/sshdRUN echo &quot;root:1234&quot; | chpasswdRUN sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_configEXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] ML-Agents v0.6.0 环境本机环境 ML-Agents 0.6.0 Windows 10 专业版 docker client version 18.09.0 docker server version 18.09.0 平台 机器学习平台 创建镜像 打开~/ml-agents-0.6.0/目录,看到有一个官方给定的Dockerfile 直接Build,在该目录下运行docker build -t [name]:[tag] .,一定要注意最后的.,很重要 新建一个sources.list文件,为镜像内换源,因为将来有可能需要在容器内安装某些包,有一些国外的资源往往会下载失败,所以需要换源 新建一个sources.list 用文本编辑器打开,写入以下内容 123456789101112131415161718# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 保存退出 新建一个DockerfilePlus,在官方生成的基础镜像上安装一些可以在平台上运行的包,openssh-server,联网工具net-tools,心爱的apt-file等等 新建一个DockerfilePlus 用文本编辑器打开,输入以下内容12345678910111213141516171819202122FROM hub.hoc.ccshu.net/wjs/mlunityv060:v0.1RUN cp /etc/apt/sources.list /etc/apt/sources.list.bakCOPY sources.list /etc/apt/sources.listENV PYTHONPATH /ml-agents:$PYTHONPATHRUN apt-get update &amp;&amp; apt-get install -y \ apt-file \ nano \ net-tools \ iputils-ping \ openssh-server \ apt-utils \ &amp;&amp; rm -rf /var/lib/apt/lists/* \ &amp;&amp; mkdir /var/run/sshd \ &amp;&amp; echo &quot;root:1234&quot; | chpasswd \ &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_configEXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] 在DockerfilePlus所在文件夹下,执行build -t [name]:[tag] -f DockerfilePlus . 为了使用GPU.改写完的Dockerfile如下(不需要看):123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161FROM nvidia/cuda:9.0-base-ubuntu16.04LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;ENV NCCL_VERSION 2.3.7RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \ apt-utils \ cuda-libraries-$CUDA_PKG_VERSION \ cuda-cublas-9-0=9.0.176.4-1 \ libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \ apt-mark hold libnccl2 &amp;&amp; \ rm -rf /var/lib/apt/lists/*# ensure local python is preferred over distribution pythonENV PATH /usr/local/bin:$PATH# http://bugs.python.org/issue19846# &gt; At the moment, setting &quot;LANG=C&quot; on a Linux system *fundamentally breaks Python 3*, and that&apos;s not OK.ENV LANG C.UTF-8# runtime dependenciesRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \ ca-certificates \ libexpat1 \ libffi6 \ libgdbm3 \ libreadline6 \ libsqlite3-0 \ libssl1.0.0 \ &amp;&amp; rm -rf /var/lib/apt/lists/*ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DENV PYTHON_VERSION 3.6.4RUN set -ex \ &amp;&amp; buildDeps=&quot; \ dpkg-dev \ gcc \ libbz2-dev \ libc6-dev \ libexpat1-dev \ libffi-dev \ libgdbm-dev \ liblzma-dev \ libncursesw5-dev \ libreadline-dev \ libsqlite3-dev \ libssl-dev \ make \ tcl-dev \ tk-dev \ wget \ xz-utils \ zlib1g-dev \# as of Stretch, &quot;gpg&quot; is no longer included by default $(command -v gpg &gt; /dev/null || echo &apos;gnupg dirmngr&apos;) \ &quot; \ &amp;&amp; apt-get update &amp;&amp; apt-get install -y $buildDeps --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/* \ \ &amp;&amp; wget -O python.tar.xz &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz&quot; \ &amp;&amp; wget -O python.tar.xz.asc &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz.asc&quot; \ &amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \ &amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$GPG_KEY&quot; \ &amp;&amp; gpg --batch --verify python.tar.xz.asc python.tar.xz \ &amp;&amp; rm -rf &quot;$GNUPGHOME&quot; python.tar.xz.asc \ &amp;&amp; mkdir -p /usr/src/python \ &amp;&amp; tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \ &amp;&amp; rm python.tar.xz \ \ &amp;&amp; cd /usr/src/python \ &amp;&amp; gnuArch=&quot;$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)&quot; \ &amp;&amp; ./configure \ --build=&quot;$gnuArch&quot; \ --enable-loadable-sqlite-extensions \ --enable-shared \ --with-system-expat \ --with-system-ffi \ --without-ensurepip \ &amp;&amp; make -j &quot;$(nproc)&quot; \ &amp;&amp; make install \ &amp;&amp; ldconfig \ \ &amp;&amp; apt-get purge -y --auto-remove $buildDeps \ \ &amp;&amp; find /usr/local -depth \ \( \ \( -type d -a \( -name test -o -name tests \) \) \ -o \ \( -type f -a \( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \) \) \ \) -exec rm -rf &apos;&#123;&#125;&apos; + \ &amp;&amp; rm -rf /usr/src/python# make some useful symlinks that are expected to existRUN cd /usr/local/bin \ &amp;&amp; ln -s idle3 idle \ &amp;&amp; ln -s pydoc3 pydoc \ &amp;&amp; ln -s python3 python \ &amp;&amp; ln -s python3-config python-config# if this is called &quot;PIP_VERSION&quot;, pip explodes with &quot;ValueError: invalid truth value &apos;&lt;VERSION&gt;&apos;&quot;ENV PYTHON_PIP_VERSION 9.0.3RUN set -ex; \ \ apt-get update; \ apt-get install -y --no-install-recommends wget; \ rm -rf /var/lib/apt/lists/*; \ \ wget -O get-pip.py &apos;https://bootstrap.pypa.io/get-pip.py&apos;; \ \ apt-get purge -y --auto-remove wget; \ \ python get-pip.py \ --disable-pip-version-check \ --no-cache-dir \ &quot;pip==$PYTHON_PIP_VERSION&quot; \ ; \ pip --version; \ \ find /usr/local -depth \ \( \ \( -type d -a \( -name test -o -name tests \) \) \ -o \ \( -type f -a \( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \) \) \ \) -exec rm -rf &apos;&#123;&#125;&apos; +; \ rm -f get-pip.pyRUN apt-get update &amp;&amp; apt-get -y upgrade# xvfb is used to do CPU based rendering of UnityRUN apt-get install -y xvfbCOPY ml-agents /ml-agentsWORKDIR /ml-agentsRUN pip install .# port 5005 is the port used in in Editor training.EXPOSE 5005RUN cp /etc/apt/sources.list /etc/apt/sources.list.bakCOPY sources.list /etc/apt/sources.listENV PYTHONPATH /ml-agents:$PYTHONPATHRUN apt-get update &amp;&amp; apt-get install -y \ apt-file \ nano \ net-tools \ iputils-ping \ openssh-server \ apt-utils \ &amp;&amp; rm -rf /var/lib/apt/lists/* \ &amp;&amp; mkdir /var/run/sshd \ &amp;&amp; echo &quot;root:1234&quot; | chpasswd \ &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_configEXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] PUSH镜像docker push [name]:[tag] 测试镜像 登录机器学习平台,没有使用平台的可以在本地使用docker run直接开启容器 先测试使用容器的方式 创建容器将要运行和储存的文件夹放在数据卷data下,这个目录要在运行时由--docker-target-name指定 等待容器创建成功 容器创建成功后进入容器 执行mlagents-learn trainer_config.yaml --docker-target-name=data/unity-volume --env=3dball --train --run-id=test --save-freq=5000 | tee /data/unity-volume/log.txt,如果不想在屏幕输出,可以在后边加上&gt;/dev/null 安装Miniconda确保你的安装包放在了data文件夹下apt-get update &amp;&amp; apt-get install bzip2 -y &amp;&amp; cd /data &amp;&amp; bash Miniconda3-latest-Linux-x86_64.sh 一路按回车、yes等等就成功了.如果需要安装到指定目录,在安装过程中会有提示告诉你让你指定安装路径 注意 在学校机器学习平台上使用时,如果是使用容器的方式,那么新开的容器就可以使用conda命令,不存在conda:command not found的错误信息. 但是,如果在平台上以提交任务的形式来使用带conda的镜像所产生的容器时,就算是在镜像中配置了echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc,当提交任务时环境变量中仍然没有~/anaconda3/bin,这个问题目前没有找到比较方便的解决办法,目前所采用的方式是: 在提交任务时, 首先加上命令export PATH=&quot;~/anaconda3/bin:$PATH&quot; &amp;&amp; 接着又实验了一下echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; /etc/profile, 正常来说, 如果在容器中这样设置环境变量, 等待下次从镜像创建容器时, 这个环境变量一般并不会生效, 但是不知道这样设置对于提交任务方式来说有没有效, 索性试了一下 根据输出日志来看, 这种方式也并没有奏效 当然, 如果觉得上述配置比较麻烦的话,可以使用Dockerfile的ENV命令来设置环境变量, 这样设置99%是不会有问题的 12FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.5ENV PATH /usr/miniconda3/bin:$PATH 实验了一下,结果如下: 表示可以使用conda命令, 但是不能使用conda activate命令激活环境 根据错误信息, 在Dockerfile中写入以下代码也不可行: RUN ln -s /usr/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh 查了一下相关资料,发现在4.5版本的conda是无解的https://github.com/ContinuumIO/docker-images/issues/89 希望4.6版本可以解决吧 更新2019年1月14日14:26:01已解决 4.6版本的确可以解决以提交任务模式运行时的问题, 需要使用命令conda run -n [环境名字] [要执行的命令], 而不是使用conda activate [环境名字]先激活一个环境. 不过, 更新至4.6版本需要相关配置12conda config --add channels conda-canaryconda update conda 我使用Dockerfile来生成镜像, 代码如下:1234FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.6ENV PATH /usr/miniconda3/bin:$PATHRUN conda config --add channels conda-canary &amp;&amp; conda update conda -y 原因是, 使用Dockerfile比较容易设置环境变量, 减少出错]]></content>
      <categories>
        <category>Docker</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>unity</tag>
        <tag>ml-agents</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker命令学习]]></title>
    <url>%2F2019%2F01%2F03%2FDocker%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Docker常用以及组合命令学习 停止并删除正在运行的容器docker rm $(docker stop $(docker ps -aq)) 查看容器的长IDdocker inspect -f &#39;{?{.ID}}&#39; [name]去掉命令中的?,因为双括号会转义失败 宿主机向容器内传输文件/文件夹docker cp 本地文件路径 ID全称:容器路径 容器传输文件/文件夹到宿主机docker cp ID全称:容器文件路径 本地路径 修改本地已有镜像的名字docker tag [ImageID] [NewImageNmae]:[tag]]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build一个基于Mxnet的Sniper镜像]]></title>
    <url>%2F2019%2F01%2F02%2Fcreate-sniper-docker-image%2F</url>
    <content type="text"><![CDATA[创建一个基于Mxnet的Sniper Docker镜像说明由于此镜像是用于学校机器学习平台,所以文中会出现FTP服务器等字眼,其实是在平台上使用镜像创建一个容器时,平台会自动将服务器上我所申请的文件存储区mount到创建的容器,我通过FileZillaFTP工具与在平台申请的文件存储区进行连接​本文教程虽然有了一个FTP过程,但是如果是生成本地镜像,不考虑FTP,无视文中相关部分即可 虽然本文中写了关于压缩的相关内容,但是最终并没有使用压缩,原因是由于压缩后出现未知问题,导致在平台上创建的容器不能使用宿主机的NVIDIA驱动,并不能成功运行Demo 环境本机环境 windows 10 专业版 docker client version 18.09.0 docker server version 18.09.0 FTP工具 FileZilla 平台环境 docker version 17.06.2-ce 镜像环境 python 2.7.12 CUDA version 9.0.176 pip 9.0.3 SNIPER机器学习平台,这是学校资源 一 配置基础镜像从学校机器学习平台上拉取原始镜像,因为这个镜像配好了一些基本的环境,如python2.x,CUDA9.0等等,所以直接使用它们的镜像作为基础镜像比较省心省力docker pull hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh 拉取到镜像之后,可以选择使用Dockerfile来生成我们需要的镜像,但是往往我们需要在镜像中添加许多库/包/插件,而且使用Dockerfile来生成镜像很容易出BUG.当然,最好的方式是使用Dockerfile,前提是你能确保Dockerfile文件中的每一行命令都不会出错.在当前情况下,我选择使用从容器生成镜像的方法,这种方式会使得最终生成的镜像占内存巨大,但是可以在容器内部调试每一步配置过程.使用docker run -itd --name [name] hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh开启一个容器 使用docker ps -a查看正在运行的容器ID 使用docker exec -it [name] /bin/bash进入容器 在容器中使用cat /etc/issue命令查看容器的操作系统版本 结果输出: Ubuntu 16.04.4 LTS \n \l 安装 apt-file安装apt-file apt-get install apt-file -y 出现错误: 使用apt-get install apt-file -y --fix-missing同样不能解决问题 考虑换源 cp /etc/apt/sources.list /etc/apt/sources.list.bak备份系统原有的源 安装Linux下的文本编辑器nano,执行命令apt-get install nano -y安装nano成功后,执行nano /etc/apt/sources.list修改源文件在打开的文件中,将内容替换为123456789101112131415161718# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 这里使用的源是阿里的镜像站,也可以使用网易163的,源如下:12345678910deb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse 更改好源文件后,执行sudo apt-get update更新源 再次执行apt-get install apt-file -y,可以成功安装apt-file包 之后执行apt-file update更新apt-file cache使用apt-file find [name]可以查找计算机上文件的位置,很方便使用apt-file search [name]可以搜索缺少的库,解决文件缺失依赖选择好自己需要的包,然后使用apt-get install [name]即可 如果需要把镜像上传到云上使用,有可能需要网络服务, 执行apt-get install net-tools安装ifconfig 执行apt-get install iputils-ping安装ping 此时为了避免诸如使用ping [IP]有效,但是ping [HOST]无效的情况,需要使用nano /etc/resolv.conf修改配置文件将namespace后的IP地址更改为8.8.8.8或者4.4.4.4或者使用echo &quot;nameserver 114.114.114.114 &gt; /etc/resolv.conf&quot;也可以退出保存即可 有可能上述修改DNS的方式并不成功,原因是在云上运行容器时,配置文件自动修改,如果发生这种情况,请每次在新开一个容器时,手动修改配置文件的DNS服务器,使其可以使用网络服务 二 安装编译依赖各种包在电脑上空闲的地方,从Github拉取Sniper项目 git clone --recursive https://github.com/mahyarnajibi/SNIPER.git 因为我是在学校机器学习平台上运行docker容器,所以选择直接将clone下的文件上传至容器mount的ftp服务器,使用的软件是FileZilla 上传成功后可以在容器内通过cd /data/[file or folder name]进行访问 如果要在本地镜像内操作的话,也可以直接把本机文件或文件夹拷贝过去docker cp 本地文件路径 ID全称:容器路径 cd /data/SNIPER/SNIPER-mxnetmake USE_CUDA_PATH=/usr/local/cuda-9.0输出信息: 安装 jemalloc选择安装jemalloc,这个工具可以加速编译,碎片整理,具体请自行谷歌 apt-get install autoconf apt-get install automake apt-get install libtool git clone https://github.com/jemalloc/jemalloc.git cd jemalloc git checkout 4.5.0安装4.5.0版本的jemalloc,5.x版本的有坑,深坑 ./autogen.sh make make install_bin install_include install_lib,之所以不使用make install是因为会报错,如下: 切换至SNIPER-mxnet文件夹,再次make USE_CUDA_PATH=/usr/local/cuda-9.0虽然可以编译,但是有以下信息:强迫症必须搞定它,果断ctrl+c终止编译 安装 pkg-config 打开https://pkg-config.freedesktop.org/releases/ 下载最新的,现在看到的是pkg-config-0.29.2.tar.gz 下载好之后,通过FileZilla等工具传输到FTP服务器 在容器内cd到压缩包位置 tar -xf pkg-config-0.29.2.tar.gz cd pkg-config-0.29.2 ./configure --with-internal-glib,注意,中间是一个空格,非常关键 make &amp;&amp; make install 再次make USE_CUDA_PATH=/usr/local/cuda-9.0算了，还是安装一下cudnn吧 安装 cudnn7.0 https://developer.nvidia.com/rdp/cudnn-archive 下载cuDNN Libraries for Linux,不要下载 Power 8 把下载好的包上传到FTP服务器 cd到包位置 cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz tar -xvf cudnn-9.0-linux-x64-v7.tgz cp include/* /usr/local/cuda-9.0/include cp lib64/* /usr/local/cuda-9.0/lib64 chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn* export PATH=/usr/local/cuda-9.0/bin:$PATH cd到/usr/local/cuda-9.0/lib64 nano ~/.bashrc,关联环境变量 在最后一行加入export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc ldconfig -v 使用cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2 查看cudnn版本 安装 OpenCV 使用pkg-config opencv --modversion查看 发现已经有OpenCV 安装 OpenBLAS apt-get install libopenblas-dev 编译 Mxnetmake USE_CUDA_PATH=/usr/local/cuda-9.0 心好累,总共make了将近两个半小时 编译c++文件bash scripts/compile.sh这一步一定要在/SNIPER/文件夹下,不然贼坑,绝对不要cd到/SNIPER/scripts文件夹下再bash compile.sh,因为代码内有cd lib/nms等,如果不在/SNIPER文件夹下,会找不到文件 如果出现syntax error near unexpected token$’\r’’错误,可以使用sed命令将\r去掉,或者是在[Github](https://github.com/mahyarnajibi/SNIPER/blob/master/scripts/compile.sh)上将代码复制,使用nano编辑然后粘贴 ![](/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png) 可以使用cat -v [filename]查看 ![]/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png) 以^M结尾的代表你所处理的文件换行符是dos格式的“\r\n”` 我选择第二种笨方法,因为涉及的代码并不多 执行结果: 安装 dos2unix由于发现这种简单的复制粘贴方式并不能很好的解决,所以查了一些相关资料选择使用dos2unix来转换 apt-get install dos2unix dos2unix [filename] 问题解决啦 安装依赖在/SNIPER/文件夹下pip install -r requirements.txt一定要确保镜像内可以联网 测试Demo bash download_sniper_detector.sh,download_sniper_detector.sh文件在/SNIPER/scripts文件夹下 cd .. &amp;&amp; python demo.py 运行成功!!! 三 生成镜像 使用exit退出容器 使用docker ps -a查看容器ID 使用docker stop [ID]停止容器 使用docker commit -a &quot;作者信息&quot; -m &quot;附带信息&quot; [ID] [name]:[tag]生成镜像,会返回一个sha256开头的长ID,这个就是生成的镜像ID 使用docker images查看生成的镜像 如果需要的话,使用docker push [name]:[tag]将刚刚生成的镜像推送到云上 四 压缩镜像压缩镜像非常麻烦,但是也是有方法的,目前大概三种方法 使用Dockerfile生成镜像 这种方法需要让容器在运行状态,使用docker export [ID] | docker import - [name]:[tag]导出容器快照,并从快照生成镜像,这种方式可以大大压缩镜像,但是缺点是有可能会使得镜像中的环境变量、开放端口、默认进入命令改变或消失.使用这种方式时,最好在生成镜像之后,创建一个Dockerfile文件,From这个镜像,并添加端口和命令入口 使用docker-squash压缩镜像,这个方法适用于Linux和Mac系统 目前可以运行的镜像是13.6Ghub.hoc.ccshu.net/wjs/sniper:v1.1现在要对它进行压缩 第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去 开启一个容器docker run -itd --name [name] [id] 复制容器内文件到本地docker cp [长ID]:[容器内路径] [本地路径],将放置在本地的文件夹上传至FTP服务器 进入容器docker exec -it [name] /bin/bash 删除容器内文件夹/SNIPER/,使用rm -rf SNIPER,一定要小心使用 退出容器exit 第二步,压缩镜像压缩容器docker export [ID] | docker import - [name]:[tag] 可以看到,镜像体积少了大约2个G 由于使用这种方法会使得镜像丢失部分信息,所以,创建一个新的Dockerfile,在其中添加缺失的信息 第三步,完善镜像在任意位置新建Dockerfile输入123FROM [name]:[tag]EXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] 然后docker build -t [name]:[tag] .,不要忘了最后的. 第四步 Pushdocker push [name]:[tag] 至此,所有配置以及完成镜像在hoc.hoc.ccshu.net的私有仓库里SNIPER文件夹放置在机器学习平台服务器mount的目录里 五 测试 在平台上创建容器 耐心等待创建完成 创建成功 测试结果测试失败 但是,使用未压缩的镜像测试成功]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mxnet</tag>
        <tag>sniper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令学习记录]]></title>
    <url>%2F2018%2F12%2F29%2FGit-learn%2F</url>
    <content type="text"><![CDATA[Git命令学习记录 删除远程仓库的文件,保留本地的文件 123git rm -r /path/to/filenamegit commit -m &quot;msg&quot;git push 删除远程仓库的文件,同时删除本地文件 123git rm /path/to/filenamegit commit -m &quot;msg&quot;git push 查看本地所有分支 1git branch -a 查看本地分支 1git branch 切换分支 1git checkout [branchname] 查看各个分支当前所指的对象 1git log --oneline --decorate 如果我同一项目有两个不同的版本，怎么切换某一版本到master分支呢？比如说我有两个分支名字为A和B，目前默认master分支指向A，现在我想把master切换至B，该怎么做呢？ 123456git branch -m master A把当前的master分支内容放置分支Agit branch -m B master将分支B重命名为mastergit push -f origin master更新master分支 如果在本地git仓库下有另外一个clone过来的git仓库，那么当使用git add .，然后再git commit ...时会报错。并且上传到仓库的文件夹是空的，解决方案如下： cd到clone的仓库目录下，执行rd /s/q .git命令，删除clone的仓库目录下的.git文件夹 回到仓库根目录删除仓库中的空文件夹 2.1 git rm -r --cached &quot;themes/[branchname]&quot; 2.2 git commit -m &quot;remove empty folder&quot; 2.3 git push origin master 在仓库根目录重新提交代码 3.1 git add . 3.2 git commit -m &quot;repush&quot; 3.3 git push origin master]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown基本语法]]></title>
    <url>%2F2018%2F12%2F29%2FMarkDown-Grammar%2F</url>
    <content type="text"><![CDATA[MarkDown基本语法所有使用Markdown语法标记的符号后要加一个空格Space 一、 标题 {#…}使用#来设置标题级数,一个#则代表一级标题,字体大小最大 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题二、 列表1. 无序列表使用-、+、*三个符号都可以 使用- 使用+ 使用* 如果在列表中想取消下一行的列表性质,需要按下退格Backspace删除列表前的圆点后,然后按Shift+Tab组合键来退回首位. 一级列表 二级列表 三级列表 四级列表 共有三级标题 2. 有序列表数字加点加空格,如1.[Space]、2.[Space] 需要往前挪动请按Tab键,往后挪动请按Shift+Tab组合键 第一级 第二级 第二级第一小节 第二级第二小节 第二级第二小节第一小小节 第二级第二小节第二小小节 第二级第三小节 第三级 三、 字体 斜体 用法:*[内容]*或_[内容]_,包含在两个*星号或两个_下划线中间的内容会倾斜 *Hello World*:Hello World _Hello World_:Hello World 加粗 用法:**[内容]**,包含在四个*星号中间的内容会加粗 **Hello World**:Hello World 斜体加粗 用法:***[内容]***,包含在六个*星号中间的内容会加粗并斜体 ***Hello World***:Hello World 删除线 用法:~~[内容]~~,包含在四个~波浪号中间的内容会添加删除线 ~~Hello World~~:Hello World 四、 引用&gt;表示引用,与#用法相同 &gt; 一级引用 &gt;&gt; 二级引用 &gt;&gt;&gt; 三级引用 退格使用Shift+Tab 五、 分割线大于等于三个的-或+或* --- +++ +++ *** 六、 图片语法:![图片文字](图片地址 &quot;鼠标放置时显示的信息&quot;) 例子: ![大桥](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg &quot;美丽的桥梁&quot;) 七、 超链接语法:[超链接名](超链接地址 &quot;鼠标放置时显示的信息&quot;) 例子:[百度一下,你就知道](www.baidu.com &quot;我就是百度&quot;) 百度一下,你就知道 八、 代码1. 单行使用&#96;反引号包裹 2.多行,代码块使用三个反引号包裹 &#96;&#96;&#96; 使用&#96;&#96;&#96;+编程语言可以打开代码编辑器 如 &#96;&#96;&#96;+python 12import sys这是一个python语法的编译器 九、 表格每一行都使用|隔开 第二行使用:设置对齐,两边都加表示文字居中,加在左边表示居左 123|标题1|标题2|标题3||-|:-:|:-||1|2|3| 标题1 标题2 标题3 1 2 3 十、 流程图123456789​```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op​ 123456789```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下右键新建.md文件教程]]></title>
    <url>%2F2018%2F12%2F29%2Fwin-rightclick-create-md%2F</url>
    <content type="text"><![CDATA[Windows下右键新建.md文件教程环境windows10操作系统Typora编辑器 效果图 步骤1. 打开注册表 CMD+R，打开运行对话框 输入regedit，打开注册表编辑器 2. 修改注册表 在计算机&gt;HKEY_CLASSES_ROOT右键查找，输入Typora，勾选项，取消勾选值和数据 确认运行的程序名字，我的电脑如图所示，运行文件是Typora.exe 如果使用的是markdownpad或者其他编辑器，同理 在磁盘任意位置新建一个文件，后缀为.reg 打开编辑刚刚创建好的注册表文件，写入一下内容：1234567Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\.md]@=&quot;Typora.exe&quot;[HKEY_CLASSES_ROOT\.md\ShellNew]&quot;NullFile&quot;=&quot;&quot;[HKEY_CLASSES_ROOT\Typora.exe]@=&quot;Markdown&quot; @=&quot;Typora.exe&quot; 代表的是指定.md文件的运行程序@=&quot;Markdown&quot; 代表的是右键时默认的文件名字，这样写新建为新建Markdown.md文件，而且右键菜单中显示MarkDown 编辑好之后,另存为,设置如图所示: 文件名可以随便设置，但是后缀必须是.reg文件,保存类型一定要是文本文档(*.txt),编码选择Unicode,非常重要!!!!! 保存文件后,双击运行,修改注册表即可,现在右键即可达到预期效果,如果不行,请重启一下. 3. 编辑新建图标(非必须) 以Typora为例,在注册表Typora.exe下点击项DefaultIcon,右键修改 将属性修改为想要设置的Markdown文件图标 文档有错或转载请联系邮箱`stepneverstop@qq.com`]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
