<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为远程Ubuntu服务器安装图像界面</title>
      <link href="/2019/01/09/%E4%B8%BA%E8%BF%9C%E7%A8%8BUbuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E7%95%8C%E9%9D%A2/"/>
      <url>/2019/01/09/%E4%B8%BA%E8%BF%9C%E7%A8%8BUbuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="为远程服务器Ubuntu系统安装图形界面"><a href="#为远程服务器Ubuntu系统安装图形界面" class="headerlink" title="为远程服务器Ubuntu系统安装图形界面"></a>为远程服务器Ubuntu系统安装图形界面</h1><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://wiki.x2go.org/doku.php/doc:installation:x2goclient" target="_blank" rel="noopener">X2GO</a></li></ul><h2 id="在服务器上安装X2go服务器"><a href="#在服务器上安装X2go服务器" class="headerlink" title="在服务器上安装X2go服务器"></a>在服务器上安装X2go服务器</h2><ol><li><p>安装这个<code>add-apt-repository</code>命令</p><ul><li><code>apt-get install -y python-software-properties software-properties-common</code></li></ul></li><li><p>添加PPA</p><ul><li><code>apt-add-repository -y ppa:x2go/stable</code></li></ul></li><li><p>更新包列表并安装<code>x2go</code>服务器端</p><ul><li><code>apt-get update</code></li><li><code>apt-get install x2goserver x2goserver-xsession</code></li></ul></li></ol><h3 id="安装XFCE图像界面"><a href="#安装XFCE图像界面" class="headerlink" title="安装XFCE图像界面"></a>安装XFCE图像界面</h3><p>在安装<code>XFCE</code>桌面环境时，有可能会出错，原因是perl为系统使用<code>zh_CN.UTF-8</code>，但系统不知道<code>zh_CN.UTF-8</code>是什么东西，所以需要安装一个中文语言，系统就知道<code>zh_CN.UTF-8</code>了，这个时候perl就不会报错了<br>​    - <code>apt-get install language-pack-zh-hans</code><br>​    - <code>apt-get install xfce4</code></p><h3 id="安装GNOME图像界面"><a href="#安装GNOME图像界面" class="headerlink" title="安装GNOME图像界面"></a>安装GNOME图像界面</h3><p><code>apt-get install -y gnome</code><br><em>没有测试成功,似乎是不兼容的问题</em></p><h3 id="安装MATE图像界面"><a href="#安装MATE图像界面" class="headerlink" title="安装MATE图像界面"></a>安装MATE图像界面</h3><p><code>apt-get install -y mate</code><br><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/9.png" alt=""></p><h3 id="安装LXDE图像界面"><a href="#安装LXDE图像界面" class="headerlink" title="安装LXDE图像界面"></a>安装LXDE图像界面</h3><p><code>apt-get install -y xorg lxde</code><br><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/10.png" alt=""></p><h3 id="重要配置"><a href="#重要配置" class="headerlink" title="重要配置"></a><strong>重要配置</strong></h3><p>开启远程连接时有可能会出现<code>mesg: ttyname failed: Inappropriate ioctl for device</code>错误，所以需要修改一下文件<br>​    - <code>nano /root/.profile</code><br>​    - 把<code>mesg n</code> 替换成 <code>tty -s &amp;&amp; mesg n</code></p><h2 id="在客户端上安装X2go客户端"><a href="#在客户端上安装X2go客户端" class="headerlink" title="在客户端上安装X2go客户端"></a>在客户端上安装X2go客户端</h2><h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><ol><li>安装<code>Xquartz</code> <a href="https://www.xquartz.org/" target="_blank" rel="noopener">XQuartz</a></li></ol><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/1.png" alt=""></p><ol start="2"><li>输入命令</li></ol><p><code>echo &quot;*VT100.translations: #override Meta &lt;KeyPress&gt; V: insert-selection(PRIMARY, CUT_BUFFER0) \n&quot; &gt; ~/.Xdefaults</code></p><ol start="3"><li><p>安装<code>X2Go Client</code> <a href="https://code.x2go.org/releases/binary-macosx/x2goclient/" target="_blank" rel="noopener">X2Go Client</a></p></li><li><p>打开客户端，设置连接</p></li></ol><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/2.png" alt=""></p><ol start="5"><li>检查客户端设置，确保X11被正确引导</li></ol><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/3.png" alt=""></p><ol start="6"><li>开始连接</li></ol><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/4.png" alt=""></p><ol start="7"><li>连接成功</li></ol><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/5.png" alt=""></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol><li>安装<code>x2goclient</code> <a href="https://code.x2go.org/releases/binary-win32/x2goclient/releases/4.1.2.0-2018.06.22/" target="_blank" rel="noopener">x2goclient</a></li></ol><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/6.png" alt=""></p><ol start="2"><li>配置好之后连接成功</li></ol><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/7.png" alt=""></p><h2 id="Linux下各种图像界面测评"><a href="#Linux下各种图像界面测评" class="headerlink" title="Linux下各种图像界面测评"></a>Linux下各种图像界面测评</h2><p><img src="/2019/01/09/为远程Ubuntu服务器安装图像界面/8.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> x2go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建ML-Agents的Docker镜像</title>
      <link href="/2019/01/04/%E5%88%9B%E5%BB%BAML-Agents%E7%9A%84Docker%E9%95%9C%E5%83%8F/"/>
      <url>/2019/01/04/%E5%88%9B%E5%BB%BAML-Agents%E7%9A%84Docker%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="创建ML-Agents的Docker镜像"><a href="#创建ML-Agents的Docker镜像" class="headerlink" title="创建ML-Agents的Docker镜像"></a>创建ML-Agents的Docker镜像</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  如果需要在镜像中使用GPU训练,可以将Nvidia的官方镜像作为基础镜像,<code>Dockerfile</code>如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">FROM nvidia/cuda:9.0-base-ubuntu16.04</span><br><span class="line">LABEL maintainer &quot;NVIDIA CORPORATION &lt;cudatools@nvidia.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">ENV NCCL_VERSION 2.3.7</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">apt-utils \</span><br><span class="line">        cuda-libraries-$CUDA_PKG_VERSION \</span><br><span class="line">        cuda-cublas-9-0=9.0.176.4-1 \</span><br><span class="line">        libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \</span><br><span class="line">    apt-mark hold libnccl2 &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y openssh-server</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y nano</span><br><span class="line"></span><br><span class="line">RUN mkdir /var/run/sshd</span><br><span class="line"></span><br><span class="line">RUN echo &quot;root:1234&quot; | chpasswd</span><br><span class="line"></span><br><span class="line">RUN sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p><h2 id="ML-Agents-v0-6-0"><a href="#ML-Agents-v0-6-0" class="headerlink" title="ML-Agents v0.6.0"></a>ML-Agents v0.6.0</h2><p><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-44-58.png" alt=""></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>本机环境</p><ul><li>ML-Agents 0.6.0</li><li>Windows 10 专业版</li><li>docker client version 18.09.0</li><li>docker server version 18.09.0</li></ul><p>平台</p><ul><li><a href="http://10.0.4.228" target="_blank" rel="noopener">机器学习平台</a></li></ul><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><ol><li>打开<code>~/ml-agents-0.6.0/</code>目录,看到有一个官方给定的<code>Dockerfile</code><br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_10-52-49.png" alt=""></li><li>直接<code>Build</code>,在该目录下运行<code>docker build -t [name]:[tag] .</code>,一定要注意最后的<code>.</code>,很<strong>重要</strong><br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-29-30.png" alt=""></li><li>新建一个<code>sources.list</code>文件,为镜像内换源,因为将来有可能需要在容器内安装某些包,有一些国外的资源往往会下载失败,所以需要<strong>换源</strong></li></ol><ul><li>新建一个<code>sources.list</code></li><li><p>用文本编辑器打开,写入以下内容<br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_11-36-31.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure></li><li><p>保存退出</p></li></ul><ol start="4"><li>新建一个<code>DockerfilePlus</code>,在官方生成的基础镜像上安装一些可以在平台上运行的包,<code>openssh-server</code>,联网工具<code>net-tools</code>,心爱的<code>apt-file</code>等等</li></ol><ul><li>新建一个<code>DockerfilePlus</code></li><li>用文本编辑器打开,输入以下内容<br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-01-32.png" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM hub.hoc.ccshu.net/wjs/mlunityv060:v0.1</span><br><span class="line"></span><br><span class="line">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">COPY sources.list /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">ENV PYTHONPATH /ml-agents:$PYTHONPATH</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">        apt-file \</span><br><span class="line">        nano \</span><br><span class="line">        net-tools \</span><br><span class="line">        iputils-ping \</span><br><span class="line">        openssh-server \</span><br><span class="line">        apt-utils \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; mkdir /var/run/sshd \</span><br><span class="line">    &amp;&amp; echo &quot;root:1234&quot; | chpasswd \</span><br><span class="line">    &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>在<code>DockerfilePlus</code>所在文件夹下,执行<code>build -t [name]:[tag] -f DockerfilePlus .</code></li></ol><p><strong>为了使用GPU.改写完的Dockerfile如下(不需要看):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">FROM nvidia/cuda:9.0-base-ubuntu16.04</span><br><span class="line">LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;</span><br><span class="line"></span><br><span class="line">ENV NCCL_VERSION 2.3.7</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">apt-utils \</span><br><span class="line">        cuda-libraries-$CUDA_PKG_VERSION \</span><br><span class="line">        cuda-cublas-9-0=9.0.176.4-1 \</span><br><span class="line">        libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \</span><br><span class="line">    apt-mark hold libnccl2 &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ensure local python is preferred over distribution python</span><br><span class="line">ENV PATH /usr/local/bin:$PATH</span><br><span class="line"></span><br><span class="line"># http://bugs.python.org/issue19846</span><br><span class="line"># &gt; At the moment, setting &quot;LANG=C&quot; on a Linux system *fundamentally breaks Python 3*, and that&apos;s not OK.</span><br><span class="line">ENV LANG C.UTF-8</span><br><span class="line"></span><br><span class="line"># runtime dependencies</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">ca-certificates \</span><br><span class="line">libexpat1 \</span><br><span class="line">libffi6 \</span><br><span class="line">libgdbm3 \</span><br><span class="line">libreadline6 \</span><br><span class="line">libsqlite3-0 \</span><br><span class="line">libssl1.0.0 \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D</span><br><span class="line">ENV PYTHON_VERSION 3.6.4</span><br><span class="line"></span><br><span class="line">RUN set -ex \</span><br><span class="line">&amp;&amp; buildDeps=&quot; \</span><br><span class="line">dpkg-dev \</span><br><span class="line">gcc \</span><br><span class="line">libbz2-dev \</span><br><span class="line">libc6-dev \</span><br><span class="line">libexpat1-dev \</span><br><span class="line">libffi-dev \</span><br><span class="line">libgdbm-dev \</span><br><span class="line">liblzma-dev \</span><br><span class="line">libncursesw5-dev \</span><br><span class="line">libreadline-dev \</span><br><span class="line">libsqlite3-dev \</span><br><span class="line">libssl-dev \</span><br><span class="line">make \</span><br><span class="line">tcl-dev \</span><br><span class="line">tk-dev \</span><br><span class="line">wget \</span><br><span class="line">xz-utils \</span><br><span class="line">zlib1g-dev \</span><br><span class="line"># as of Stretch, &quot;gpg&quot; is no longer included by default</span><br><span class="line">$(command -v gpg &gt; /dev/null || echo &apos;gnupg dirmngr&apos;) \</span><br><span class="line">&quot; \</span><br><span class="line">&amp;&amp; apt-get update &amp;&amp; apt-get install -y $buildDeps --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">\</span><br><span class="line">&amp;&amp; wget -O python.tar.xz &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz&quot; \</span><br><span class="line">&amp;&amp; wget -O python.tar.xz.asc &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz.asc&quot; \</span><br><span class="line">&amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \</span><br><span class="line">&amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$GPG_KEY&quot; \</span><br><span class="line">&amp;&amp; gpg --batch --verify python.tar.xz.asc python.tar.xz \</span><br><span class="line">&amp;&amp; rm -rf &quot;$GNUPGHOME&quot; python.tar.xz.asc \</span><br><span class="line">&amp;&amp; mkdir -p /usr/src/python \</span><br><span class="line">&amp;&amp; tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \</span><br><span class="line">&amp;&amp; rm python.tar.xz \</span><br><span class="line">\</span><br><span class="line">&amp;&amp; cd /usr/src/python \</span><br><span class="line">&amp;&amp; gnuArch=&quot;$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)&quot; \</span><br><span class="line">&amp;&amp; ./configure \</span><br><span class="line">--build=&quot;$gnuArch&quot; \</span><br><span class="line">--enable-loadable-sqlite-extensions \</span><br><span class="line">--enable-shared \</span><br><span class="line">--with-system-expat \</span><br><span class="line">--with-system-ffi \</span><br><span class="line">--without-ensurepip \</span><br><span class="line">&amp;&amp; make -j &quot;$(nproc)&quot; \</span><br><span class="line">&amp;&amp; make install \</span><br><span class="line">&amp;&amp; ldconfig \</span><br><span class="line">\</span><br><span class="line">&amp;&amp; apt-get purge -y --auto-remove $buildDeps \</span><br><span class="line">\</span><br><span class="line">&amp;&amp; find /usr/local -depth \</span><br><span class="line">\( \</span><br><span class="line">\( -type d -a \( -name test -o -name tests \) \) \</span><br><span class="line">-o \</span><br><span class="line">\( -type f -a \( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \) \) \</span><br><span class="line">\) -exec rm -rf &apos;&#123;&#125;&apos; + \</span><br><span class="line">&amp;&amp; rm -rf /usr/src/python</span><br><span class="line"></span><br><span class="line"># make some useful symlinks that are expected to exist</span><br><span class="line">RUN cd /usr/local/bin \</span><br><span class="line">&amp;&amp; ln -s idle3 idle \</span><br><span class="line">&amp;&amp; ln -s pydoc3 pydoc \</span><br><span class="line">&amp;&amp; ln -s python3 python \</span><br><span class="line">&amp;&amp; ln -s python3-config python-config</span><br><span class="line"></span><br><span class="line"># if this is called &quot;PIP_VERSION&quot;, pip explodes with &quot;ValueError: invalid truth value &apos;&lt;VERSION&gt;&apos;&quot;</span><br><span class="line">ENV PYTHON_PIP_VERSION 9.0.3</span><br><span class="line"></span><br><span class="line">RUN set -ex; \</span><br><span class="line">\</span><br><span class="line">apt-get update; \</span><br><span class="line">apt-get install -y --no-install-recommends wget; \</span><br><span class="line">rm -rf /var/lib/apt/lists/*; \</span><br><span class="line">\</span><br><span class="line">wget -O get-pip.py &apos;https://bootstrap.pypa.io/get-pip.py&apos;; \</span><br><span class="line">\</span><br><span class="line">apt-get purge -y --auto-remove wget; \</span><br><span class="line">\</span><br><span class="line">python get-pip.py \</span><br><span class="line">--disable-pip-version-check \</span><br><span class="line">--no-cache-dir \</span><br><span class="line">&quot;pip==$PYTHON_PIP_VERSION&quot; \</span><br><span class="line">; \</span><br><span class="line">pip --version; \</span><br><span class="line">\</span><br><span class="line">find /usr/local -depth \</span><br><span class="line">\( \</span><br><span class="line">\( -type d -a \( -name test -o -name tests \) \) \</span><br><span class="line">-o \</span><br><span class="line">\( -type f -a \( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \) \) \</span><br><span class="line">\) -exec rm -rf &apos;&#123;&#125;&apos; +; \</span><br><span class="line">rm -f get-pip.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get -y upgrade</span><br><span class="line"></span><br><span class="line"># xvfb is used to do CPU based rendering of Unity</span><br><span class="line">RUN apt-get install -y xvfb</span><br><span class="line"></span><br><span class="line">COPY ml-agents /ml-agents</span><br><span class="line">WORKDIR /ml-agents</span><br><span class="line">RUN pip install .</span><br><span class="line"></span><br><span class="line"># port 5005 is the port used in in Editor training.</span><br><span class="line">EXPOSE 5005</span><br><span class="line"></span><br><span class="line">RUN cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">COPY sources.list /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">ENV PYTHONPATH /ml-agents:$PYTHONPATH</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">        apt-file \</span><br><span class="line">        nano \</span><br><span class="line">        net-tools \</span><br><span class="line">        iputils-ping \</span><br><span class="line">        openssh-server \</span><br><span class="line">        apt-utils \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; mkdir /var/run/sshd \</span><br><span class="line">    &amp;&amp; echo &quot;root:1234&quot; | chpasswd \</span><br><span class="line">    &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="PUSH镜像"><a href="#PUSH镜像" class="headerlink" title="PUSH镜像"></a>PUSH镜像</h3><p><code>docker push [name]:[tag]</code><br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_12-02-47.png" alt=""></p><h3 id="测试镜像"><a href="#测试镜像" class="headerlink" title="测试镜像"></a>测试镜像</h3><ul><li>登录<a href="http://10.0.4.228" target="_blank" rel="noopener">机器学习平台</a>,没有使用平台的可以在本地使用<code>docker run</code>直接开启容器</li><li>先测试使用容器的方式<ul><li>创建容器<br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-28-19.png" alt=""><br>将要运行和储存的文件夹放在数据卷<code>data</code>下,这个目录要在运行时由<code>--docker-target-name</code>指定</li><li>等待容器创建成功<br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-15.png" alt=""></li><li>容器创建成功后进入容器<br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_13-31-52.png" alt=""></li><li>执行<code>mlagents-learn trainer_config.yaml --docker-target-name=data/unity-volume --env=3dball --train --run-id=test --save-freq=5000 | tee /data/unity-volume/log.txt</code>,如果不想在屏幕输出,可以在后边加上<code>&gt;/dev/null</code><br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-16-44.png" alt=""><br><img src="/2019/01/04/创建ML-Agents的Docker镜像/Snipaste_2019-01-04_15-18-40.png" alt=""></li></ul></li></ul><hr><h2 id="安装Miniconda"><a href="#安装Miniconda" class="headerlink" title="安装Miniconda"></a>安装Miniconda</h2><p><code>apt-get update &amp;&amp; apt-get install bzip2 -y &amp;&amp; cd /data &amp;&amp; bash Miniconda3-latest-Linux-x86_64.sh</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> unity </tag>
            
            <tag> ml-agents </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令学习</title>
      <link href="/2019/01/03/Docker%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/03/Docker%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker常用以及组合命令学习"><a href="#Docker常用以及组合命令学习" class="headerlink" title="Docker常用以及组合命令学习"></a>Docker常用以及组合命令学习</h1><ul><li><p>停止并删除正在运行的容器<br><code>docker rm $(docker stop $(docker ps -aq))</code></p></li><li><p>查看容器的长ID<br><code>docker inspect -f &#39;{?{.ID}}&#39; [name]</code><br><strong>去掉命令中的<code>?</code>,因为双括号会转义失败</strong></p></li><li><p>宿主机向容器内传输文件/文件夹<br><code>docker cp 本地文件路径 ID全称:容器路径</code></p></li><li><p>容器传输文件/文件夹到宿主机<br><code>docker cp ID全称:容器文件路径 本地路径</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build一个基于Mxnet的Sniper镜像</title>
      <link href="/2019/01/02/create-sniper-docker-image/"/>
      <url>/2019/01/02/create-sniper-docker-image/</url>
      
        <content type="html"><![CDATA[<h1 id="创建一个基于Mxnet的Sniper-Docker镜像"><a href="#创建一个基于Mxnet的Sniper-Docker镜像" class="headerlink" title="创建一个基于Mxnet的Sniper Docker镜像"></a>创建一个基于Mxnet的Sniper Docker镜像</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于此镜像是用于学校机器学习平台,所以文中会出现FTP服务器等字眼,其实是在平台上使用镜像创建一个容器时,平台会<strong>自动</strong>将服务器上我所申请的文件存储区<code>mount</code>到创建的容器,我通过<code>FileZilla</code>FTP工具与在平台申请的文件存储区进行连接<br>​<br>本文教程虽然有了一个FTP过程,但是如果是生成本地镜像,不考虑FTP,无视文中相关部分即可</p><p><strong>虽然本文中写了关于压缩的相关内容,但是最终并没有使用压缩,原因是由于压缩后出现未知问题,导致在平台上创建的容器不能使用宿主机的NVIDIA驱动,并不能成功运行Demo</strong></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本机环境</p><ul><li>windows 10 专业版</li><li>docker client version 18.09.0</li><li>docker server version 18.09.0</li><li>FTP工具 FileZilla</li></ul><p>平台环境</p><ul><li>docker version 17.06.2-ce</li></ul><p>镜像环境</p><ul><li>python 2.7.12</li><li>CUDA version 9.0.176</li><li>pip 9.0.3</li></ul><p><a href="https://github.com/mahyarnajibi/SNIPER" target="_blank" rel="noopener">SNIPER</a><br><a href="http://10.0.4.228" target="_blank" rel="noopener">机器学习平台</a>,这是学校资源</p><h2 id="一-配置基础镜像"><a href="#一-配置基础镜像" class="headerlink" title="一 配置基础镜像"></a>一 配置基础镜像</h2><p>从学校机器学习平台上拉取原始镜像,因为这个镜像配好了一些基本的环境,如python2.x,CUDA9.0等等,所以直接使用它们的镜像作为基础镜像比较省心省力<br><code>docker pull hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh</code></p><p>拉取到镜像之后,可以选择使用<code>Dockerfile</code>来生成我们需要的镜像,但是往往我们需要在镜像中添加许多库/包/插件,而且使用<code>Dockerfile</code>来生成镜像很容易出BUG.当然,最好的方式是使用<code>Dockerfile</code>,前提是你能确保<code>Dockerfile</code>文件中的每一行命令都不会出错.<br>在当前情况下,我选择使用从容器生成镜像的方法,这种方式会使得最终生成的镜像占内存巨大,但是可以在容器内部调试每一步配置过程.<br>使用<code>docker run -itd --name [name] hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh</code>开启一个容器</p><p>使用<code>docker ps -a</code>查看正在运行的容器<code>ID</code></p><p>使用<code>docker exec -it [name] /bin/bash</code>进入容器</p><p>在容器中使用<code>cat /etc/issue</code>命令查看容器的操作系统版本</p><p>结果输出: <code>Ubuntu 16.04.4 LTS \n \l</code></p><h3 id="安装-apt-file"><a href="#安装-apt-file" class="headerlink" title="安装 apt-file"></a>安装 apt-file</h3><p>安装<code>apt-file</code></p><p><code>apt-get install apt-file -y</code></p><p>出现错误:</p><p><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_08-30-41.png" alt=""></p><p>使用<code>apt-get install apt-file -y --fix-missing</code>同样不能解决问题</p><p>考虑<strong>换源</strong></p><p><code>cp /etc/apt/sources.list /etc/apt/sources.list.bak</code>备份系统原有的源</p><p>安装Linux下的文本编辑器<code>nano</code>,执行命令<code>apt-get install nano -y</code><br>安装<code>nano</code>成功后,执行<code>nano /etc/apt/sources.list</code>修改源文件<br>在打开的文件中,将内容替换为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure></p><p>这里使用的源是阿里的镜像站,也可以使用网易163的,源如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></p><p>更改好源文件后,执行<code>sudo apt-get update</code>更新源</p><p>再次执行<code>apt-get install apt-file -y</code>,可以成功安装<code>apt-file</code>包</p><p>之后执行<code>apt-file update</code>更新apt-file cache<br>使用<code>apt-file find [name]</code>可以查找计算机上文件的位置,很方便<br>使用<code>apt-file search [name]</code>可以搜索缺少的库,解决文件缺失依赖<br>选择好自己需要的包,然后使用<code>apt-get install [name]</code>即可</p><ul><li>如果需要把镜像上传到云上使用,有可能需要网络服务,</li><li>执行<code>apt-get install net-tools</code>安装ifconfig</li><li>执行<code>apt-get install iputils-ping</code>安装ping</li></ul><p>此时为了避免诸如使用<code>ping [IP]</code>有效,但是<code>ping [HOST]</code>无效的情况,需要使用<code>nano /etc/resolv.conf</code>修改配置文件<br>将<code>namespace</code>后的IP地址更改为<code>8.8.8.8</code>或者<code>4.4.4.4</code><br><em>或者使用<code>echo &quot;nameserver 114.114.114.114 &gt; /etc/resolv.conf&quot;</code>也可以</em><br>退出保存即可</p><p><em>有可能上述修改DNS的方式并不成功,原因是在云上运行容器时,配置文件自动修改,如果发生这种情况,请每次在新开一个容器时,手动修改配置文件的DNS服务器,使其可以使用网络服务</em></p><h2 id="二-安装编译依赖各种包"><a href="#二-安装编译依赖各种包" class="headerlink" title="二 安装编译依赖各种包"></a>二 安装编译依赖各种包</h2><p>在电脑上空闲的地方,从Github拉取Sniper项目</p><p><code>git clone --recursive https://github.com/mahyarnajibi/SNIPER.git</code></p><ul><li><p>因为我是在学校机器学习平台上运行docker容器,所以选择直接将clone下的文件上传至容器<code>mount</code>的ftp服务器,使用的软件是<code>FileZilla</code></p></li><li><p>上传成功后可以在容器内通过<code>cd /data/[file or folder name]</code>进行访问</p></li></ul><p>如果要在本地镜像内操作的话,也可以直接把本机文件或文件夹拷贝过去<br><code>docker cp 本地文件路径 ID全称:容器路径</code></p><hr><p><code>cd /data/SNIPER/SNIPER-mxnet</code><br><code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>输出信息:<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_09-42-07.png" alt=""></p><h3 id="安装-jemalloc"><a href="#安装-jemalloc" class="headerlink" title="安装 jemalloc"></a>安装 jemalloc</h3><p>选择安装<code>jemalloc</code>,这个工具可以加速编译,碎片整理,具体请自行谷歌</p><ul><li><code>apt-get install autoconf</code></li><li><code>apt-get install automake</code></li><li><code>apt-get install libtool</code></li><li><code>git clone https://github.com/jemalloc/jemalloc.git</code></li><li><code>cd jemalloc</code></li><li><code>git checkout 4.5.0</code>安装4.5.0版本的jemalloc,5.x版本的有坑,深坑</li><li><code>./autogen.sh</code></li><li><code>make</code></li><li><code>make install_bin install_include install_lib</code>,之所以不使用<code>make install</code>是因为会报错,如下: <img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_09-56-41.png" alt=""></li></ul><p>切换至<code>SNIPER-mxnet</code>文件夹,再次<code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>虽然可以编译,但是有以下信息:<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_10-03-30.png" alt=""><br>强迫症必须搞定它,果断<code>ctrl+c</code>终止编译</p><h3 id="安装-pkg-config"><a href="#安装-pkg-config" class="headerlink" title="安装 pkg-config"></a>安装 pkg-config</h3><ul><li>打开<a href="https://pkg-config.freedesktop.org/releases/" target="_blank" rel="noopener">https://pkg-config.freedesktop.org/releases/</a></li><li>下载最新的,现在看到的是<code>pkg-config-0.29.2.tar.gz</code></li><li>下载好之后,通过<code>FileZilla</code>等工具传输到FTP服务器</li><li>在容器内<code>cd</code>到压缩包位置</li><li><code>tar -xf pkg-config-0.29.2.tar.gz</code></li><li><code>cd pkg-config-0.29.2</code></li><li><code>./configure --with-internal-glib</code>,注意,中间是一个空格,非常关键</li><li><code>make &amp;&amp; make install</code><br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_10-11-01.png" alt=""></li></ul><p>再次<code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br>算了，还是安装一下cudnn吧</p><h3 id="安装-cudnn7-0"><a href="#安装-cudnn7-0" class="headerlink" title="安装 cudnn7.0"></a>安装 cudnn7.0</h3><ul><li><a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-archive</a> 下载cuDNN Linux for Linux,不要下载 Power 8</li><li>把下载好的包上传到FTP服务器</li><li><code>cd</code>到包位置</li><li><code>cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz</code></li><li><code>tar -xvf cudnn-9.0-linux-x64-v7.tgz</code></li><li><code>cp include/* /usr/local/cuda-9.0/include</code></li><li><code>cp lib64/* /usr/local/cuda-9.0/lib64</code></li><li><code>chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn*</code></li><li><code>export PATH=/usr/local/cuda-9.0/bin:$PATH</code></li><li><code>cd</code>到<code>/usr/local/cuda-9.0/lib64</code></li><li><code>nano ~/.bashrc</code>,关联环境变量</li><li>在最后一行加入<code>export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH</code></li><li><code>source ~/.bashrc</code></li><li><code>ldconfig -v</code></li><li>使用<code>cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2</code> 查看cudnn版本<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_10-56-08.png" alt=""></li></ul><h3 id="安装-OpenCV"><a href="#安装-OpenCV" class="headerlink" title="安装 OpenCV"></a>安装 OpenCV</h3><ul><li>使用<code>pkg-config opencv --modversion</code>查看</li><li>发现已经有OpenCV<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_10-57-56.png" alt=""></li></ul><h3 id="安装-OpenBLAS"><a href="#安装-OpenBLAS" class="headerlink" title="安装 OpenBLAS"></a>安装 OpenBLAS</h3><ul><li><code>apt-get install libopenblas-dev</code></li></ul><h3 id="编译-Mxnet"><a href="#编译-Mxnet" class="headerlink" title="编译 Mxnet"></a>编译 Mxnet</h3><p><code>make USE_CUDA_PATH=/usr/local/cuda-9.0</code><br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_13-49-28.png" alt=""></p><p><strong>心好累,总共make了将近两个半小时</strong></p><p>编译<code>c++</code>文件<code>bash scripts/compile.sh</code><br>这一步一定要在<code>/SNIPER/</code>文件夹下,不然贼坑,绝对不要<code>cd</code>到<code>/SNIPER/scripts</code>文件夹下再<code>bash compile.sh</code>,因为代码内有<code>cd lib/nms</code>等,如果不在<code>/SNIPER</code>文件夹下,会找不到文件</p><p>如果出现<code>syntax error near unexpected token</code>$’\r’’<code>错误,可以使用</code>sed<code>命令将</code>\r<code>去掉,或者是在[Github](https://github.com/mahyarnajibi/SNIPER/blob/master/scripts/compile.sh)上将代码复制,使用</code>nano<code>编辑然后粘贴![](/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png)可以使用</code>cat -v [filename]<code>查看![]/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png)以</code>^M<code>结尾的代表你所处理的文件换行符是dos格式的</code>“\r\n”`</p><p>我选择第二种笨方法,因为涉及的代码并不多</p><p>执行结果:<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-24-49.png" alt=""></p><h3 id="安装-dos2unix"><a href="#安装-dos2unix" class="headerlink" title="安装 dos2unix"></a>安装 dos2unix</h3><p>由于发现这种简单的复制粘贴方式并不能很好的解决,所以查了一些<a href="https://blog.csdn.net/lovelovelovelovelo/article/details/79239068" target="_blank" rel="noopener">相关资料</a><br>选择使用<code>dos2unix</code>来转换</p><ul><li><code>apt-get install dos2unix</code></li><li><code>dos2unix [filename]</code></li></ul><p><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-40-53.png" alt=""><br>问题解决啦</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>在<code>/SNIPER/</code>文件夹下<code>pip install -r requirements.txt</code><br>一定要确保镜像内可以联网</p><p><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-29-58.png" alt=""></p><h3 id="测试Demo"><a href="#测试Demo" class="headerlink" title="测试Demo"></a>测试Demo</h3><ul><li><code>bash download_sniper_detector.sh</code>,download_sniper_detector.sh<br>文件在<code>/SNIPER/scripts</code>文件夹下<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_16-44-22.png" alt=""></li><li><code>cd .. &amp;&amp; python demo.py</code><br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_17-05-30.png" alt=""></li></ul><p><strong>运行成功!!!</strong></p><h2 id="三-生成镜像"><a href="#三-生成镜像" class="headerlink" title="三 生成镜像"></a>三 生成镜像</h2><ul><li>使用<code>exit</code>退出容器</li><li>使用<code>docker ps -a</code>查看容器ID</li><li>使用<code>docker stop [ID]</code>停止容器</li><li>使用<code>docker commit -a &quot;作者信息&quot; -m &quot;附带信息&quot; [ID] [name]:[tag]</code>生成镜像,会返回一个<code>sha256</code>开头的长ID,这个就是生成的镜像ID</li><li>使用<code>docker images</code>查看生成的镜像</li><li>如果需要的话,使用<code>docker push [name]:[tag]</code>将刚刚生成的镜像推送到云上</li></ul><h2 id="四-压缩镜像"><a href="#四-压缩镜像" class="headerlink" title="四 压缩镜像"></a>四 压缩镜像</h2><p><strong>压缩镜像非常麻烦,但是也是有方法的,目前大概三种方法</strong></p><ol><li>使用<code>Dockerfile</code>生成镜像</li><li>这种方法需要让容器在运行状态,使用<code>docker export [ID] | docker import - [name]:[tag]</code>导出容器快照,并从快照生成镜像,这种方式可以大大压缩镜像,但是缺点是有可能会使得镜像中的环境变量、开放端口、默认进入命令改变或消失.使用这种方式时,最好在生成镜像之后,创建一个<code>Dockerfile</code>文件,<code>From</code>这个镜像,并添加端口和命令入口</li><li>使用<code>docker-squash</code>压缩镜像,这个方法适用于Linux和Mac系统</li></ol><p>目前可以运行的镜像是13.6G<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_17-12-36.png" alt=""><br><code>hub.hoc.ccshu.net/wjs/sniper:v1.1</code><br>现在要对它进行压缩</p><h3 id="第一步-移除镜像内的SNIPER文件夹-把其放到FTP服务器上去"><a href="#第一步-移除镜像内的SNIPER文件夹-把其放到FTP服务器上去" class="headerlink" title="第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去"></a>第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去</h3><ul><li>开启一个容器<code>docker run -itd --name [name] [id]</code></li><li>复制容器内文件到本地<code>docker cp [长ID]:[容器内路径] [本地路径]</code>,将放置在本地的文件夹上传至FTP服务器</li><li>进入容器<code>docker exec -it [name] /bin/bash</code></li><li>删除容器内文件夹<code>/SNIPER/</code>,使用<code>rm -rf SNIPER</code>,<strong>一定要小心使用</strong></li><li>退出容器<code>exit</code></li></ul><h3 id="第二步-压缩镜像"><a href="#第二步-压缩镜像" class="headerlink" title="第二步,压缩镜像"></a>第二步,压缩镜像</h3><p>压缩容器<br><code>docker export [ID] | docker import - [name]:[tag]</code></p><p>可以看到,镜像体积少了大约2个G<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_17-39-07.png" alt=""></p><p>由于使用这种方法会使得镜像丢失部分信息,所以,创建一个新的<code>Dockerfile</code>,在其中添加缺失的信息</p><h3 id="第三步-完善镜像"><a href="#第三步-完善镜像" class="headerlink" title="第三步,完善镜像"></a>第三步,完善镜像</h3><p>在任意位置新建<code>Dockerfile</code><br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM [name]:[tag]</span><br><span class="line">EXPOSE 22</span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_18-08-49.png" alt=""></p><p>然后<code>docker build -t [name]:[tag] .</code>,不要忘了最后的<code>.</code></p><h3 id="第四步-Push"><a href="#第四步-Push" class="headerlink" title="第四步 Push"></a>第四步 Push</h3><p><code>docker push [name]:[tag]</code></p><p>至此,所有配置以及完成<br>镜像在<code>hoc.hoc.ccshu.net</code>的私有仓库里<br>SNIPER文件夹放置在机器学习平台服务器<code>mount</code>的目录里</p><h2 id="五-测试"><a href="#五-测试" class="headerlink" title="五 测试"></a>五 测试</h2><ul><li><p>在平台上创建容器<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_18-11-49.png" alt=""></p></li><li><p>耐心等待创建完成<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_18-14-21.png" alt=""></p></li><li><p>创建成功<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_18-20-07.png" alt=""></p></li><li><p>测试结果<br><img src="/2019/01/02/create-sniper-docker-image/Snipaste_2019-01-03_18-31-16.png" alt=""><br><strong>测试失败</strong></p></li></ul><p><strong>但是,使用未压缩的镜像测试成功</strong></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mxnet </tag>
            
            <tag> sniper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令学习记录</title>
      <link href="/2018/12/29/Git-learn/"/>
      <url>/2018/12/29/Git-learn/</url>
      
        <content type="html"><![CDATA[<h1 id="Git命令学习记录"><a href="#Git命令学习记录" class="headerlink" title="Git命令学习记录"></a>Git命令学习记录</h1><ul><li><p>删除远程仓库的文件,保留本地的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r /path/to/filename</span><br><span class="line">git commit -m &quot;msg&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>删除远程仓库的文件,同时删除本地文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm /path/to/filename</span><br><span class="line">git commit -m &quot;msg&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>查看本地所有分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branchname]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看各个分支当前所指的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline --decorate</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如果我同一项目有两个不同的版本，怎么切换某一版本到master分支呢？比如说我有两个分支名字为A和B，目前默认master分支指向A，现在我想把master切换至B，该怎么做呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch -m master A</span><br><span class="line">把当前的master分支内容放置分支A</span><br><span class="line">git branch -m B master</span><br><span class="line">将分支B重命名为master</span><br><span class="line">git push -f origin master</span><br><span class="line">更新master分支</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如果在本地git仓库下有另外一个clone过来的git仓库，那么当使用<code>git add .</code>，然后再<code>git commit ...</code>时会报错。并且上传到仓库的文件夹是空的，解决方案如下：</p><ol><li><code>cd</code>到<code>clone</code>的仓库目录下，执行<code>rd /s/q .git</code>命令，删除<code>clone</code>的仓库目录下的<code>.git</code>文件夹</li><li><p>回到仓库根目录删除仓库中的空文件夹</p><p>2.1 <code>git rm -r --cached &quot;themes/[branchname]&quot;</code></p><p>2.2 <code>git commit -m &quot;remove empty folder&quot;</code></p><p>2.3 <code>git push origin master</code></p></li><li><p>在仓库根目录重新提交代码</p><p>3.1 <code>git add .</code></p><p>3.2 <code>git commit -m &quot;repush&quot;</code></p><p>3.3 <code>git push origin master</code></p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="/2018/12/29/MarkDown-Grammar/"/>
      <url>/2018/12/29/MarkDown-Grammar/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown基本语法"><a href="#MarkDown基本语法" class="headerlink" title="MarkDown基本语法"></a>MarkDown基本语法</h1><p>所有使用Markdown语法标记的符号后要加一个空格<code>Space</code></p><h2 id="一、-标题-…"><a href="#一、-标题-…" class="headerlink" title="一、 标题    …}"></a>一、 标题    {#…}</h2><p>使用<code>#</code>来设置标题级数,一个<code>#</code>则代表一级标题,字体大小最大</p><p><code>#</code> </p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p><code>##</code></p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><code>###</code></p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><code>####</code></p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p><code>#####</code></p><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p><code>######</code></p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="二、-列表"><a href="#二、-列表" class="headerlink" title="二、 列表"></a>二、 列表</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h3><p>使用<code>-</code>、<code>+</code>、<code>*</code>三个符号都可以</p><ul><li>使用<code>-</code></li></ul><ul><li>使用<code>+</code></li></ul><ul><li>使用<code>*</code></li></ul><p>如果在列表中想取消下一行的列表性质,需要按下退格<code>Backspace</code>删除列表前的圆点后,然后按<code>Shift</code>+<code>Tab</code>组合键来退回首位.</p><ul><li>一级列表<ul><li>二级列表<ul><li>三级列表<ul><li>四级列表</li></ul></li></ul></li></ul></li></ul><p>共有三级标题</p><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h3><p>数字加点加空格,如<code>1.[Space]</code>、<code>2.[Space]</code></p><p>需要往前挪动请按<code>Tab</code>键,往后挪动请按<code>Shift</code>+<code>Tab</code>组合键</p><ol><li>第一级</li><li>第二级<ol><li>第二级第一小节</li><li>第二级第二小节<ol><li>第二级第二小节第一小小节</li><li>第二级第二小节第二小小节</li></ol></li><li>第二级第三小节</li></ol></li><li>第三级</li></ol><h1 id="三、-字体"><a href="#三、-字体" class="headerlink" title="三、 字体"></a>三、 字体</h1><ul><li><p><em>斜体</em></p><p>用法:<code>*[内容]*</code>或<code>_[内容]_</code>,包含在两个<code>*</code>星号或两个<code>_</code>下划线中间的内容会倾斜</p><p><code>*Hello World*</code>:<em>Hello World</em></p><p><code>_Hello World_</code>:<em>Hello World</em></p></li><li><p><strong>加粗</strong></p><p>用法:<code>**[内容]**</code>,包含在四个<code>*</code>星号中间的内容会加粗</p><p><code>**Hello World**</code>:<strong>Hello World</strong></p></li><li><p><strong><em>斜体加粗</em></strong></p><p>用法:<code>***[内容]***</code>,包含在六个<code>*</code>星号中间的内容会加粗并斜体</p><p><code>***Hello World***</code>:<strong><em>Hello World</em></strong></p></li><li><p><del>删除线</del></p><p>用法:<code>~~[内容]~~</code>,包含在四个<code>~</code>波浪号中间的内容会添加删除线</p><p><code>~~Hello World~~</code>:<del>Hello World</del></p></li></ul><h1 id="四、-引用"><a href="#四、-引用" class="headerlink" title="四、 引用"></a>四、 引用</h1><p><code>&gt;</code>表示引用,与<code>#</code>用法相同</p><p><code>&gt;</code></p><blockquote><p>一级引用</p></blockquote><p><code>&gt;&gt;</code></p><blockquote><blockquote><p>二级引用</p></blockquote></blockquote><p><code>&gt;&gt;&gt;</code></p><blockquote><blockquote><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><p>退格使用<code>Shift</code>+<code>Tab</code></p><h1 id="五、-分割线"><a href="#五、-分割线" class="headerlink" title="五、 分割线"></a>五、 分割线</h1><p>大于等于三个的<code>-</code>或<code>+</code>或<code>*</code></p><p><code>---</code></p><hr><p><code>+++</code></p><p>+++</p><p><code>***</code></p><hr><h1 id="六、-图片"><a href="#六、-图片" class="headerlink" title="六、 图片"></a>六、 图片</h1><p>语法:<code>![图片文字](图片地址 &quot;鼠标放置时显示的信息&quot;)</code></p><p>例子:</p><p><code>![大桥](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg &quot;美丽的桥梁&quot;)</code></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg" alt="大桥" title="美丽的桥梁"></p><h1 id="七、-超链接"><a href="#七、-超链接" class="headerlink" title="七、 超链接"></a>七、 超链接</h1><p>语法:<code>[超链接名](超链接地址 &quot;鼠标放置时显示的信息&quot;)</code></p><p>例子:<code>[百度一下,你就知道](www.baidu.com &quot;我就是百度&quot;)</code></p><p><a href="https://www.baidu.com" title="我就是百度" target="_blank" rel="noopener">百度一下,你就知道</a></p><h1 id="八、-代码"><a href="#八、-代码" class="headerlink" title="八、 代码"></a>八、 代码</h1><h2 id="1-单行"><a href="#1-单行" class="headerlink" title="1. 单行"></a>1. 单行</h2><p>使用<code>&#96;</code>反引号包裹</p><h2 id="2-多行-代码块"><a href="#2-多行-代码块" class="headerlink" title="2.多行,代码块"></a>2.多行,代码块</h2><p>使用三个反引号包裹</p><p><code>&#96;&#96;&#96;</code></p><p>使用<code>&#96;&#96;&#96;</code>+编程语言可以打开代码编辑器</p><p>如 <code>&#96;&#96;&#96;</code>+python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">这是一个python语法的编译器</span><br></pre></td></tr></table></figure><h1 id="九、-表格"><a href="#九、-表格" class="headerlink" title="九、 表格"></a>九、 表格</h1><p>每一行都使用<code>|</code>隔开</p><p>第二行使用<code>:</code>设置对齐,两边都加表示文字居中,加在左边表示居左</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|标题1|标题2|标题3|</span><br><span class="line">|-|:-:|:-|</span><br><span class="line">|1|2|3|</span><br></pre></td></tr></table></figure><table><thead><tr><th>标题1</th><th style="text-align:center">标题2</th><th style="text-align:left">标题3</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">2</td><td style="text-align:left">3</td></tr></tbody></table><h1 id="十、-流程图"><a href="#十、-流程图" class="headerlink" title="十、 流程图"></a>十、 流程图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下右键新建.md文件教程</title>
      <link href="/2018/12/29/win-rightclick-create-md/"/>
      <url>/2018/12/29/win-rightclick-create-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows下右键新建-md文件教程"><a href="#Windows下右键新建-md文件教程" class="headerlink" title="Windows下右键新建.md文件教程"></a>Windows下右键新建.md文件教程</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>windows10操作系统<br>Typora编辑器</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="/2018/12/29/win-rightclick-create-md/1546050455.jpg" title="右键有Markdown文件类型"><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-打开注册表"><a href="#1-打开注册表" class="headerlink" title="1. 打开注册表"></a>1. 打开注册表</h3><ol><li><code>CMD+R</code>，打开运行对话框</li><li>输入<code>regedit</code>，打开注册表编辑器</li></ol><h3 id="2-修改注册表"><a href="#2-修改注册表" class="headerlink" title="2. 修改注册表"></a>2. 修改注册表</h3><ol><li>在<code>计算机&gt;HKEY_CLASSES_ROOT</code>右键查找，输入<code>Typora</code>，勾选项，取消勾选值和数据</li></ol><img src="/2018/12/29/win-rightclick-create-md/20181229103503.png" title="右键查找typora运行程序"><ol start="2"><li>确认运行的程序名字，我的电脑如图所示，运行文件是<code>Typora.exe</code></li></ol><img src="/2018/12/29/win-rightclick-create-md/20181229103752.png" title="查看运行md文件的程序名称"><p>如果使用的是markdownpad或者其他编辑器，同理</p><ol start="3"><li>在磁盘任意位置新建一个文件，后缀为<code>.reg</code></li><li>打开编辑刚刚创建好的注册表文件，写入一下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.md]</span><br><span class="line">@=&quot;Typora.exe&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">&quot;NullFile&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Typora.exe]</span><br><span class="line">@=&quot;Markdown&quot;</span><br></pre></td></tr></table></figure></li></ol><p><code>@=&quot;Typora.exe&quot;</code> 代表的是指定.md文件的运行程序<br><code>@=&quot;Markdown&quot;</code> 代表的是右键时默认的文件名字，这样写新建为<code>新建Markdown.md</code>文件，而且右键菜单中显示<code>MarkDown</code></p><ol start="5"><li>编辑好之后,另存为,设置如图所示:</li></ol><img src="/2018/12/29/win-rightclick-create-md/20181229105408.png" title="保存配置文件"><p>文件名可以随便设置，但是后缀必须是<code>.reg</code>文件,保存类型一定要是<code>文本文档(*.txt)</code>,编码选择<code>Unicode</code>,非常重要!!!!!</p><ol start="6"><li>保存文件后,双击运行,修改注册表即可,现在右键即可达到预期效果,如果不行,请重启一下.</li></ol><h3 id="3-编辑新建图标-非必须"><a href="#3-编辑新建图标-非必须" class="headerlink" title="3. 编辑新建图标(非必须)"></a>3. 编辑新建图标(非必须)</h3><ol><li>以<code>Typora</code>为例,在注册表<code>Typora.exe</code>下点击项<code>DefaultIcon</code>,右键修改</li><li>将属性修改为想要设置的Markdown文件图标</li></ol><img src="/2018/12/29/win-rightclick-create-md/20181229105300.png" title="修改Markdown文件图标"><p>文档有错或转载请联系邮箱<a href="mailto:`stepneverstop@qq.com" target="_blank" rel="noopener">`stepneverstop@qq.com</a>`</p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
