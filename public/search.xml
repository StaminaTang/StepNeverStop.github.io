<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[强化学习论文浅读集合]]></title>
    <url>%2Frl-rough-reading.html</url>
    <content type="text"><![CDATA[本文记录了一些粗读的强化学习相关的论文。 [DeepMind]Massively Parallel Methods for Deep Reinforcement Learning[Gorila] 本文提出了一个分布式强化学习训练的架构：Gorila(General Reinforcement Learning Architecture)。2015年发于ICML，本文使用DQN算法进行分布式实现。 论文地址：https://arxiv.org/pdf/1507.04296.pdf 模型示意图 解析： shard代表参数分片的意思，即模型过大、参数过多，需要将参数分片放置多台机器上 Bundled Mode模式指的是Actor中的Q网络与Learner中的Q网络一样，但是Learner比Actor多了一个目标Q网络，用于计算梯度 特点 并行Actor采数据 并行Learner计算梯度，不更新Learner中的模型 中心参数服务器，用于维持最新的网络模型。如果模型太大、参数过多，可以分片将网络模型放置多个参数服务器，每个参数服务器中的参数独立不关联，根据learner传的梯度更新相应的变量 经验池机制，分为local与global两种 local，即每个actor节点一个经验池 global，将所有actor节点的经验存至一个分布式数据库中，这个需要网络通信开销 伪代码 解析： 伪代码中为一个actor节点的流程 注意伪代码中出现两次Update θ from parameters θ+ of the parameter server，这句话的意思为从中心参数服务器拉取模型到actor和learner，拉取的时间点为： 每个episode开始前 每次执行动作$a_{t}$后，但是在计算梯度并将梯度传递至参数服务器之前 伪代码中equation 2，代表$g_{i}=\left(r+\gamma \max _{a^{\prime}} Q\left(s^{\prime}, a^{\prime} ; \theta_{i}^{-}\right)-Q\left(s, a ; \theta_{i}\right)\right) \nabla_{\theta_{i}} Q(s, a ; \theta)$，这是DQN中的损失函数 注意，与传统DQN不同的是，该分布式DQN中给Learner中的目标Q网络赋值时，是直接将更新N次的中心参数服务器中的模型进行拉取覆盖，而不是使用Learner中的Q网络 中心参数服务器中的参数梯度更新需要累计多个learner传来的梯度后进行更新，使用异步SGD即ASGD方法进行梯度下降。 The parameter server then applies the updates that are accumulated from many learners. 因为每个actor都是阶段更新自己的模型，即从参数服务器中拉取。所以每个actor中的行为策略（采样策略）都不完全相同，事实上，每个actor节点可以采取不同的探索机制，这样可以更有效地探索环境 稳定性为了应对节点退出、网速慢、节点机器运行慢等问题，该文章中指出使用了一个超参数用来控制actor和server之间最大延时。 过时的梯度（低于时间阈值）将会被丢弃 All gradients older than the threshold are discarded by the parameter server. 过高或过低的梯度也将被丢弃 each actor/learner keeps a running average and standard deviation of the absolute DQN loss for the data it sees and discards gradients with absolute loss higher than the mean plus several standard deviations. 使用AdaGrad更新规则 效果采用于提出DQN的论文中一样的网络结构，具体请见论文中第5部分。 在Atari 2600 49个游戏中，41个明显优于单GPU DQN。 Gorila进一步实现了DRL的希望：一个可伸缩的架构，随着计算和内存的增加，它的性能会越来越好 [UCB/OpenAI]Model-Based Reinforcement Learning via Meta-Policy Optimization[MB-MPO] 论文地址：https://arxiv.org/pdf/1809.05214.pdf 本文2018年发布与CoRL，提出了一个基于模型的元强化学习算法MB-MPO。相比于一般的元强化学习是从多个MDPs任务中学习一个通用模型加速以后特定任务的模型训练，该文中的方法是将一个model-free的任务学习多个不确定、不完全、不完美的动态模型，即一个模型集合，然后使用这个模型集合学习出该任务的通用模型。因为它有一个从model-free学习动态模型的过程，所以为model-based方法。 元强化学习 \max _{\theta} \mathbb{E}_{\mathcal{M}_{k} \sim \rho(\mathcal{M}),\boldsymbol{s}_{t+1} \sim p_{k},\boldsymbol{a}_{t} \sim \pi_{\boldsymbol{\theta}^{\prime}}\left(\boldsymbol{a}_{t} | \boldsymbol{s}_{t}\right)}\left[\sum_{t=0}^{H-1} r_{k}\left(s_{t}, a_{t}\right)\right] \\ s.t.:\boldsymbol{\theta}^{\prime}=\boldsymbol{\theta}+\alpha\nabla_{\boldsymbol{\theta}} \mathbb{E}_{\boldsymbol{s}_{t+1} \sim p_{k},\boldsymbol{a}_{t} \sim \pi_{\boldsymbol{\theta}}\left(\boldsymbol{a}_{t} | \boldsymbol{s}_{t}\right)}\left[\sum_{t=0}^{H-1} r_{k}\left(s_{t}, a_{t}\right)\right]$\mathcal{M}$为一系列MDP，共享相同的状态空间$\mathcal{S}$与动作空间$\mathcal{A}$，但是奖励函数可以不同 学习环境动态模型 \min _{\boldsymbol{\phi}_{k}} \frac{1}{\left|\mathcal{D}_{k}\right|} \sum_{\left(\boldsymbol{s}_{t}, \boldsymbol{a}_{t}, \boldsymbol{s}_{t+1}\right) \in \mathcal{D}_{k}}\left\|\boldsymbol{s}_{t+1}-\hat{f}_{\boldsymbol{\phi}_{k}}\left(\boldsymbol{s}_{t}, \boldsymbol{a}_{t}\right)\right\|_{2}^{2}解析： $\mathcal{D}_{k}$为第k个学习模型采样的“经验” $\phi$为用神经网络表示的环境模型的参数 $\hat{f}_{\boldsymbol{\phi}_{k}}\left(\boldsymbol{s}_{t}, \boldsymbol{a}_{t}\right)$为第k个学习模型针对状态$s_{t}$执行动作$a_{t}$后转移状态的预测，其中，神经网络的输出不直接是预测的状态$\color{red}{s_{t+1}}$，而是$\color{red}{\Delta s=s_{t+1}-s_{t}}$，所以$\hat{f}_{\boldsymbol{\phi}_{k}}\left(\boldsymbol{s}_{t}, \boldsymbol{a}_{t}\right)=s_{t}+\Delta s$ We follow the standard practice in model-based RL of training the neural network to predict the change in state $\Delta s=s_{t+1}-s_{t}$ (rather than the next state $s_{t+1}$) 为了防止过拟合，文中使用了3个trick： 早停 归一化神经网络输入与输出 权重归一化 基于环境动态模型的元强化学习假设学到了K个近似模型$\left\{\hat{f}_{\phi_{1}}, \hat{f}_{\phi_{2}}, \ldots, \hat{f}_{\phi_{K}}\right\}$，把每个模型转换成一个MDP过程，即$\mathcal{M}_{k}=\left(S, A, \hat{f}_{\phi_{k}}, r, \gamma, p_{0}\right)$，其中，奖励函数相同 由此给每个学习到的动态模型分配的行为策略目标函数为： J_{k}(\boldsymbol{\theta})=\mathbb{E}_{\boldsymbol{a}_{t} \sim \pi_{\boldsymbol{\theta}}\left(\boldsymbol{a}_{t} | s_{t}\right)}\left[\sum_{t=0}^{H-1} r\left(\boldsymbol{s}_{t}, \boldsymbol{a}_{t}\right) | \boldsymbol{s}_{t+1}=\hat{f}_{\boldsymbol{\phi}_{k}}\left(\boldsymbol{s}_{t}, \boldsymbol{a}_{t}\right)\right]定义MB=MPO的最终目标函数为： \max _{\boldsymbol{\theta}} \frac{1}{K} \sum_{k=0}^{K} J_{k}\left(\boldsymbol{\theta}_{k}^{\prime}\right) \quad \text { s.t.: } \quad \boldsymbol{\theta}_{k}^{\prime}=\boldsymbol{\theta}+\alpha \nabla_{\boldsymbol{\theta}} J_{k}(\boldsymbol{\theta})小写k代表第k个学到的模型，大写K代表模型的总数。 注意看，这里公式后边使用的是$\color{red}{\theta’_{k}}$，而不是$\theta$。这里并没有写错，我起初以为写错了，具体请看后边的伪代码解释。 伪代码 解析： MB-MPO分为两部分更新，第一部分更新每个模型分配的行为策略，第二部分更新元策略。注意：行为策略的更新是不连贯的，即不是自身迭代，而是不断使用元策略进行稍加修改然后替换，所以叫做adapted policy 上一项提到的两次更新都是对元策略的参数$\theta$进行更新，区别是，第一次更新将更新后的参数赋值给了行为策略，未更改元策略本身，第二次更新直接更新元策略本身 $\alpha, \beta$为两部分更新的学习率 行为策略使用VPG，即传统策略梯度算法进行优化，元策略使用TRPO算法进行优化 伪代码中的大致流程如下： 初始化策略$\pi_{\theta}$并将其复制K份$\pi_{\theta_{1}^{\prime}}, \dots, \pi_{\boldsymbol{\theta}_{K}^{\prime}}$ 使用$\pi_{\theta_{1}^{\prime}}, \dots, \pi_{\boldsymbol{\theta}_{K}^{\prime}}$对各自的环境模型进行采样（这一步是实际交互，即真实数据），将数据存入经验池 根据经验池训练K个环境模型，即使用学习环境动态模型部分的公式 对于每个更新后的环境模型，用元策略$\color{red}{\pi_{\theta}}$进行虚拟采样（这一步是预测采样，即不实际进行交互），采样到$\mathcal{T}_{k}$以适应性修改行为策略$\boldsymbol{\theta}_{k}^{\prime}$。这里也是前边提到的行为策略更新是不连贯的原因。 再用适应性策略$\boldsymbol{\theta}_{k}^{\prime}$进行虚拟采样，采样到$\mathcal{T}_{k}^{\prime}$以更新元策略$\pi_{\theta}$ 跳向第2步 伪代码中虽然没有明确指出，但是其实使用了baseline的trick用来减少方差 效果 比之前的model-based方法效果好、收敛快 可以达到model-free算法的渐进性能 需要更少的经验，低采样复杂性。其实是使用了虚拟采样，提高了数据效率，减少了交互采样的代价。 对于模型偏差（model-bias，即环境模型没学到位）的情况，之前的算法不能有效处理，该算法对不完美、不完全、不完整的模型具有很好地鲁棒性]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Universal Value Function Approximators]]></title>
    <url>%2Funiversal-value-function-approximators.html</url>
    <content type="text"><![CDATA[本文中的方法简称UVFA，即通用值函数逼近器，主要是用于将只能表示同一任务单目标的值函数表示成通用的多目标值函数。很多论文如HER都引用了这篇论文中提出的方法。 推荐程度中等： 文中理论说明很多，很晦涩，可以不看，直接跳至正文部分即可 思想简单，了解一下即可 简介论文地址：http://proceedings.mlr.press/v37/schaul15.pdf Our main idea is to represent a large set of optimal value functions by a single, unified function approximator that generalises over both states and goals. 主要思想是通过一个统一的函数逼近器来表示一大组最优值函数，该函数逼近器可以概括状态和目标。 单目标中值函数这么表示： V_{g, \pi}(s) :=\mathbb{E}\left[\sum_{t=0}^{\infty} R_{g}\left(s_{t+1}, a_{t}, s_{t}\right) \prod_{k=0}^{t} \gamma_{g}\left(s_{k}\right) | s_{0}=s\right]动作值函数这么表示： Q_{g, \pi}(s, a) :=\mathbb{E}_{s^{\prime}}\left[R_{g}\left(s, a, s^{\prime}\right)+\gamma_{g}\left(s^{\prime}\right) \cdot V_{g, \pi}\left(s^{\prime}\right)\right]最优策略： \pi_{g}^{*}(s) :=\arg \max _{a} Q_{\pi, g}(s, a)相应的最优值函数： V_{g}^{*} :=V_{g, \pi_{g}^{*}} \ , \ Q_{g}^{*} :=Q_{g, \pi_{g}^{*}}本文中是想将一个单目标的最优值函数逼近改造成多目标的最优值函数表示，形象一点来说，就是把用向量表示状态值函数$V(s; \theta)$变成矩阵表示$V(s, g ; \theta)$，行列分别是状态$s$和目标$g$；把用矩阵表示动作值函数$Q(s, a; \theta)$变成三维Tensor表示$Q(s, a, g ; \theta)$，行列不变，增加维度-深度表示目标$g$。其中满足： V(s, g ; \theta) \approx V_{q}^{*}(s) \ , \ Q(s, a, g ; \theta) \approx Q_{a}^{*}(s, a)文中正文该方法拟解决的问题： 如何通用表示各种问题的值函数逼近器？ 主要思想： 用单个函数逼近器表示多目标的最优值函数 实现方法： 算法的输入由状态$s$扩展为状态-目标$\lt s,g \gt$，假设原状态表示向量$s$不包含目标信息 有两种实现形式： 直接用$||$连接，即$\left ( s||g \right )$，然后通过非线性函数逼近器(如MLPs)得到最终输出结果$V(s, g)$ 分别embedding，并将嵌入后的表示通过运算得到最终输出结果(文中使用的是点积)，$h : \mathbb{R}^{n} \times \mathbb{R}^{n} \mapsto \mathbb{R}$，然后$V(s, g) :=h(\phi(s), \psi(g))$ 左图为连结模式，中间图表示分别embedding并通过函数运算得到标量输出$h : \mathbb{R}^{n} \times \mathbb{R}^{n} \mapsto \mathbb{R}$，右图为中间图的细化。 文中指出，对于第二种形式，可以使$\phi$网络和$\psi$网络共享几层参数，因为一般来说，目标的向量表示形式与状态的向量表示形式相同，即$\mathcal{G} \subseteq \mathcal{S}$。如果对于对称问题，即奖励函数是$s$和$g$的距离(平方差)等形式，那么有特点： V_{g}^{*}(s)=V_{s}^{*}(g) \ , \ \forall s, g这个时候可以使$\phi$网络和$\psi$网络相同。 注：文中提到有使用低秩因式分解分别表示$\hat{\phi}_{t}$和$\hat{\psi}_{g}$，并使用有监督学习训练两个网络对$s$和$g$的embediing($\phi_{t}$和$\psi_{t}$)进行训练的方法，但是这需要假设问题可进行因式分解，即有限的状态和目标，但这在实际应用中往往是不成立的，所以不对这部分做过多的关注。 优点： UVFA可用于同任务多目标的迁移学习中，可以比随机值初始化更快地学习解决新任务。这是显而易见的作用，毕竟本身就是多目标的通用函数逼近器。 可以用于特征表示。这也说，= =，强行增加字数。。。。。。 UVFA有效地提供了一个通用决策模型，代表（近似）朝向任何目标$g \in \mathcal{G}$的最佳行为。这个优点与现在提出的元强化学习中的slow部分如出一辙。 总结UVFA把$V(s)$变成$V(s,g)$，一个可表示单任务、多目标的通用值函数近似，扩展对任务的知识表达。(通用即知识，哈哈)]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04配置Shadowsocks服务器]]></title>
    <url>%2Fss.html</url>
    <content type="text"><![CDATA[科学上网，你懂的。 购买VPSVULTR 纽约节点，3.5$一个月，ubuntu 16.04，enable IPV6 更改root密码 1sudo passwd shadowsocks 服务器更新软件源 1sudo apt-get update 安装PIP 12sudo apt-get install python-pipsudo apt-get install python3-pip 安装shadowsocks 1pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip 查看shadowsocks版本，显示”Shadowsocks 3.0.0” 1sudo ssserver --version 创建配置文件夹及文件 12sudo mkdir /etc/shadowsockssudo nano /etc/shadowsocks/config.json 复制并修改配置内容，然后ctrl+x，y，回车， 12345678910&#123; &quot;server&quot;:&quot;::&quot;, &quot;port_password&quot;: &#123; &quot;端口1&quot;: &quot;密码1&quot;, &quot;端口2&quot;: &quot;密码2&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;rc4-md5&quot;, &quot;fast_open&quot;: false&#125; 赋予权限 1sudo chmod 755 /etc/shadowsocks/config.json 为了支持这些加密方式，也许需要安装 12sudo apt-get install python-devsudo apt-get install python–m2crypto 服务端后台启停 12sudo ssserver -c /etc/shadowsocks/config.json -d startsudo ssserver -c /etc/shadowsocks/config.json -d stop 配置Systemd管理Shadowsocks，新建Shadowsocks管理文件 1sudo nano /etc/systemd/system/shadowsocks-server.service 复制粘贴，ctrl+x，y，回车 12345678910[Unit]Description=Shadowsocks ServerAfter=network.target[Service]ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.jsonRestart=on-abort[Install]WantedBy=multi-user.target 启动Shadowsocks 1sudo systemctl start shadowsocks-server 设置开机自启动Shadowsocks 1sudo systemctl enable shadowsocks-server 查看运行状态 1sudo systemctl status shadowsocks-server 优化查看linux内核 123456789101112uname -r如果其显示版本在4.9.0之下，则需要升级Linux内核，否则请忽略下文sudo apt update查看可用的Linux内核版本sudo apt-cache showpkg linux-image找到一个你想要升级的Linux内核版本，如“linux-image-4.10.0-22-generic”sudo apt install linux-image-4.10.0-22-generic重启sudo reboot删除旧的内核sudo purge-old-kernels 开启BBR 12345modprobe tcp_bbrecho &quot;tcp_bbr&quot; &gt;&gt; /etc/modules-load.d/modules.confecho &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.confsysctl -p 运行下两句，均有”bbr”则开启BBR成功 12sysctl net.ipv4.tcp_available_congestion_controlsysctl net.ipv4.tcp_congestion_control 优化吞吐量，新建配置文件 1sudo nano /etc/sysctl.d/local.conf 复制粘贴，ctrl+x，y，回车 1234567891011121314151617181920212223242526272829303132333435363738394041# max open filesfs.file-max = 51200# max read buffernet.core.rmem_max = 67108864# max write buffernet.core.wmem_max = 67108864# default read buffernet.core.rmem_default = 65536# default write buffernet.core.wmem_default = 65536# max processor input queuenet.core.netdev_max_backlog = 4096# max backlognet.core.somaxconn = 4096# resist SYN flood attacksnet.ipv4.tcp_syncookies = 1# reuse timewait sockets when safenet.ipv4.tcp_tw_reuse = 1# turn off fast timewait sockets recyclingnet.ipv4.tcp_tw_recycle = 0# short FIN timeoutnet.ipv4.tcp_fin_timeout = 30# short keepalive timenet.ipv4.tcp_keepalive_time = 1200# outbound port rangenet.ipv4.ip_local_port_range = 10000 65000# max SYN backlognet.ipv4.tcp_max_syn_backlog = 4096# max timewait sockets held by system simultaneouslynet.ipv4.tcp_max_tw_buckets = 5000# turn on TCP Fast Open on both client and server sidenet.ipv4.tcp_fastopen = 3# TCP receive buffernet.ipv4.tcp_rmem = 4096 87380 67108864# TCP write buffernet.ipv4.tcp_wmem = 4096 65536 67108864# turn on path MTU discoverynet.ipv4.tcp_mtu_probing = 1net.ipv4.tcp_congestion_control = bbr 运行 1sysctl --system 编辑之前的shadowsocks-server.service文件 1sudo nano /etc/systemd/system/shadowsocks-server.service 在ExecStart前插入一行 1ExecStartPre=/bin/sh -c &apos;ulimit -n 51200&apos; 重载shadowsocks-server.service 1sudo systemctl daemon-reload 重启Shadowsocks 1sudo systemctl restart shadowsocks-server 开启TCP Fast Open，降低Shadowsocks服务器和客户端的延迟，将fast_open的值由false修改为true 1sudo nano /etc/shadowsocks/config.json 重启服务 1sudo systemctl restart shadowsocks-server]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RL^2|Fast Reinforcement Learning vis Slow Reinforcement Learning]]></title>
    <url>%2Frl2.html</url>
    <content type="text"><![CDATA[本文引用了元学习在深度学习领域的思想，在多任务中训练一个通用模型——slow，用这个通用模型拓展到其他任务进行训练就会快很多，得到新模型——fast。本文中的模型使用RNN作为训练模型。 推荐程度：中等偏下 可以拓宽知识面，了解众家思想 我个人认为，这样的元学习并没有达到让机器”学会如何学习的学习方法“的目的，即“learning to learn” 简介论文地址：https://arxiv.org/pdf/1611.02779.pdf 深度强化学习被成功运用在许多复杂行为学习当中，但是需要很多很多很多试错才能得出一个较好的模型，但是动物学习知识只需要一小会儿，就像骑自行车和骑电瓶车，人可能学会骑自行车后5分钟就可以学会骑电瓶车，但是机器却要重头学起，1小时也未必学得会、学得好，这就是因为动物具有先验知识指导，而且可以利用先验知识，机器却不可以。 把先验知识融入到强化学习算法中过去已经被探索了很多次，而且也有几种不同的形式： 自动调超参数，学习率等 使用分层贝叶斯方法在动力学模型上保持后验，并根据后验应用Thompson采样 许多分层强化学习的工作都提出从以前的任务中提取可重用的技能，以加快对新任务的探索 本文中的RNN即充当智能体的元学习者，也充当决策者，即生成策略 以往强化学习算法把学习一个策略当成要解决的问题，本文却把学习强化学习算法当成要解决的问题。很绕对吧，其实本质上就是使用RNN表示策略，加了点深度学习中元学习的思想。 本文提出的方法是： we view the learning process of the agent itself as an objective, which can be optimized using standard reinforcement learning algorithms. The objective is averaged across all possible MDPs according to a specific distribution, which reflects the prior that we would like to distill into the agent. 即，智能体的学习过程看做目标，用标准强化学习算法进行优化。然后使用RNN处理多个MDP问题，提取先验知识到智能体。 注：我个人觉得这根本不能算是真正意义上的元学习，机器还是个傻子。 正文训练的流程图如下： 解析： 在这种训练方式下，需要来回切换任务，即切换MDP过程 每个trail代表一个MDP过程 MDP需要从MDPs分布$\rho_{\mathcal{M}} : \mathcal{M} \rightarrow \mathbb{R}_{+}$中采样，至于$\mathbb{R}_{+}$是什么，我不知道 在每个trial中训练多个episode，个数用$n$表示，图示表示$n=2$ $h$代表RNN网络中的知识参数 同一个trial中$h$可以传承，但是，当切换MDP问题，即进行下一个trail时，参数$h$需要重新初始化 输入不是单纯的状态$s$，而是$\left ( s_{t+1},a_{t},r_{t},d_{t} \right )$，其中，$d_{t}$代表episode结束的标志，输出为动作$a_{t+1}$。（输入往往需要embed为$\phi(s, a, r, d)$） 训练过程的目标不是最大化一个episode的累计奖励，而是最大化一个trial的累计奖励 深度学习中元学习有K-shot N-class问题，即N个类，每类K个样本，（本文）强化学习中元学习可以表示为N-episode M-MDPs问题，即共有M个trial，每个trial训练N个episode 策略表示： RNN使用GRUs（Gated Recurrent Units） 输入为$\phi(s, a, r, d)$ 策略优化： TRPO，原因：性能出色，不需要大量调参 使用baseline减小方差 考虑使用了GAE 测试结果： MDP问题：在多臂老虎机和网格MDPs任务中，与理论上合理的算法（没有指出是哪些算法）性能相当 POMDP问题：图像输入的导航任务中，实验表明，智能体能够有效地利用学习到的视觉信息和以往情景中获得的短期信息。实验结果视频：https://goo.gl/rDDBpb 个人见解我认为这样的元强化学习根本不能实现提出元学习的初衷。说到底，这种方式只是让一个“一面白纸”的模型可以学习成多种任务的通用基础模型（slow），然后在使用这个基础模型对其他任务进行训练时可以快速训练出结果（fast）。这种方式可以加速学习，但是却并不能使机器学会去学习，学会如何进行学习的方法，虽然意义上说让智能体学到了强化学习算法的过程，其实本质上是使智能体学到了多种MDP任务中的经验，寻找一个易于根据MDP任务最优化的通用模型，并把它转换为“记忆，而没有教会机器”记忆“这个过程。 （WTF？RNN训练智能体+多任务切换+更改网络输入+任务级目标函数 这就是元强化学习啦？？？）]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asynchronous Methods for Deep Reinforcement Learning]]></title>
    <url>%2Fasynchronous-methods-for-drl.html</url>
    <content type="text"><![CDATA[本文提出了A3C模型，即Asynchronous Advantage Actor-Critic，是A2C的异步版本，使用CPU多核而不用GPU进行训练，文中说效果比使用GPU反而更好。 推荐： 并行梯度优化的佳作 通俗易懂 简介论文地址：https://arxiv.org/pdf/1602.01783.pdf 本文提出了一个概念简单、异步梯度优化的轻量级深度强化学习训练框架。提出该框架的初衷是占用少的资源稳定深度神经网络的学习。 该框架可适用于： 基于值与基于策略的方法 on-policy与off-policy的方法 离散与连续问题 效果： 稳定训练 在Atari游戏上使用DQN算法，一个16核CPU比Nvidia K40 GPU快，使用A3C算法可以快一倍 成功适用于很多连续运动学控制问题，例如图像输入的3D迷宫 the sequence of observed data encountered by an online RL agent is non-stationary, and on-line RL updates are strongly correlated. By storing the agent’s data in an experience replay memory, the data can be batched or randomly sampled from different time-steps. Aggregating over memory in this way reduces non-stationarity and decorrelates updates, but at the same time limits the methods to off-policy reinforcement learning algorithms 文中指出，on-policy方法训练不稳定，数据相关性很强，off-policy机制结合经验池机制减轻了训练的不稳定性和数据相关性。 经验池的缺点： 占用内存，增加计算量 需要off-policy算法 本文为深度强化学习提供了一个非常不同的范例，不使用经验池机制，而使用异步并行的方法在多个相同环境中执行多个智能体。（同时训练多个不同环境没有进行描述和实验） 这种异步并行方式的优点是： 实现减轻数据相关性的效果，使训练稳定 可用于大范围on-policy算法，如Sarsa，n-step方法，A-C方法，也可用于off-policy方法，如Q-learning 利用深度神经网络设计算法，保持鲁棒性与有效性（不予置评） 不使用GPU，只使用多核CPU，反而训练时间短 比大规模分布式需要更少的资源占用（内存、算力等） 相比于Gorila异步训练方式，本文中的训练方式不需要中心服务器，其使用的是共享内存模式 单机运行减少了通信（梯度和超参数）的开销 文中精要由于本文思想非常简单，所以精简描述论文精华 本文使用Hogwild!方式进行异步梯度下降 Hogwild! 这个方法的提出也很偶然，容我步步道来： 我们使用函数对样本集进行拟合如下图所示 当我们想要判断函数是否拟合的不错，我们往往使用损失函数来衡量，损失越小，则代表函数拟合得越好（但，过拟合不是我们想要的）。 为了减小损失，我们常用梯度下降算法来优化。标准的梯度下降原理如下图所示，如果函数为凸函数，且更新步长很小，那么在有限步长内总可以下降至函数最小点，即，获得使损失函数最小的参数$\theta^{\ast}$ 之后出现了SGD，也就是随机梯度下降，这种方法差不多在60年代提出，由于思想过于简单，迭代次数很长，一直不被主流优化算法接受。但是，当大数据时代到来时，SGD变成了很普遍的优化方法。 SGD的算法流程如下： 选一个初始参数向量$\theta$和正步长$\alpha$ 循环直到满足结束条件： 从训练集中随机选择一个样本$x_{i}$ 更新参数$\theta \leftarrow\left(\theta-\alpha \nabla L\left(f_{\theta}\left(x_{i}\right), y_{i}\right)\right)$ SGD的优点： 少内存占用。SGD不需要所有的样本集进行计算梯度，只需要从样本集中抽取一个样本进行训练。频繁的采样操作可以使用高速缓存来加速训练。 收敛至可接受的解速度很快。其实我们不希望看到过拟合，当然也不希望看到欠拟合，SGD正好是这两个极端的trade-off。SGD可以很快的收敛到一个较好的解，相对于样本集较好的解比相对于样本集最好的解的泛化能力可要强得多。下图展示了SGD与标准梯度下降的损失函数曲线比较。 看图像可能会觉得SGD并没有严格下降，有时会有损失上升的倾向，但是，总体来看，这种方法最终也是可以收敛到最小值的。总体上，它使损失进行了下降。 对于熟悉并行编程的人来说，如果让他们设计并行随机梯度下降，他们一定会像这样设计： 每个线程从训练集随机抽取一个样本$x_{i}$ 锁参数$\theta$ 线程读参数$\theta$ 线程更新参数$\theta \leftarrow\left(\theta-\alpha \nabla L\left(f_{\theta}\left(x_{i}\right), y_{i}\right)\right)$ 解锁 更新前锁定参数，更新后解锁参数。对于许多问题，更新这一步骤耗时在微秒级，而锁参数耗时在毫秒级，这意味着锁参数要比更新多占用1000多倍的时间。虽然有一些其他方法可以对该过程进行优化，但差距还是很明显。 如果，注释掉关于锁的代码呢？这真是一个大胆的想法，但是Hogwild!就是这么做的。（这都是一个叫Feng Niu的人搞出来的，不知是出于好奇还是在Debug，他在研究加速SGD的时候注释掉了锁的代码，算法不仅有效，还提升了一百多倍。所以说，多试试总是好的。。。）流程如下： 每个线程从训练集随机抽取一个样本$x_{i}$ 锁参数$\theta $​ 线程读参数$\theta$ 线程更新参数$\theta \leftarrow\left(\theta-\alpha \nabla L\left(f_{\theta}\left(x_{i}\right), y_{i}\right)\right)$ 解锁 In a sentence, the main idea of Hogwild! is — “Remove all thread locks from parallel SGD code.” In Hogwild!, threads can overwrite each other by writing at the same time and compute gradients using a stale version of the “current solution.” 我们不禁都有一个疑问，这么做，真的可以吗？还真别说，经过实验表明，该方法取得了多线程的益处却没有数学效率上的负面影响。 本文中的异步更新就是用这种方法，唯一有问题的可能就是两个线程同写，但是即便是同写，写入还是有先后的，最多也就是把前一个线程写入的给覆盖掉，丢弃一个线程的数据更新而已，无伤大雅，至于多个线程写后读、读后写倒都没有大的影响，不影响参数更新与收敛。 伪代码本文中所有伪代码都使用Hogwild!方式进行梯度更新。 以下伪代码都是单个线程中actor-learning的操作。每个线程中的actor可以使用不同的探索机制，实验证明不同的探索机制可以提高算法的鲁棒性和性能效果。 首先介绍异步one-step Q-Learning的训练模式 解析： 相比后两个伪代码，该代码中各线程是不需要复制用于选择动作的训练网络（因为各方对target network的定义不同，有些人认为等待赋值的是目标网络，有些人认为需要训练的是目标网络，因此，此处不使用目标网络的术语）的，即每次选择动作，都使用其他线程可能更新过的Q网络进行决策。这是因为不需要使用同一个决策模型向后看多步 $\theta$是动态变化的，即在该线程的训练过程中，其他线程也可能对参数$\theta$进行了更新 $I_{target}$代表双Q学习赋值的间隔 $I_{AsyncUpdate}$代表单线程对共享参数$\theta$更新的间隔 接下来是异步n-step Q-Learning的训练模式： 相比于n-step，one-step方法中获得的立即奖励$r$只影响导致其产生的$Q(s,a)$，从而通过$Q(s,a)$间接影响其他的动作值，这会使训练过程很慢，因为需要多次更新才能将奖励传播到前面的相关状态和动作。使奖励传播更快的一个方法就是使用n-step回报。 G_{t}=r_{t}+\gamma r_{t+1}+\cdots+\gamma^{n-1} r_{t+n-1}+\max _{a} \gamma^{n} Q\left(s_{t+n}, a\right) 解析： 相比于one-step，该算法为每个线程配置了一个备份网络$\color{red}{\theta’}$ $t_{max}$为n-step中的$n$ 最后是异步A2C，即A3C的训练模式： 解析： $t_{max}$为n-step向前看的步数 文中针对该模型将A-C网络架构共享了部分神经网络参数，并且对actor网络的损失函数公式进行了改造：$\nabla_{\theta^{\prime}} \log \pi\left(a_{t} | s_{t} ; \theta^{\prime}\right)\left(R_{t}-V\left(s_{t} ; \theta_{v}\right)\right)+\color{red}{\beta \nabla_{\theta^{\prime}} H\left(\pi\left(s_{t} ; \theta^{\prime}\right)\right)}$，即添加了熵正则化项，它的作用是增加探索，避免网络过早地收敛至局部最优，$\beta$为超参数 正态分布的熵可以表示为$-\frac{1}{2}\left(\log \left(2 \pi \sigma^{2}\right)+1\right)$ 实验部分实验结果视频： TORCS A3C训练驾驶汽车 MuJoco 一些训练效果 Labyrinth 3D迷宫 Atari 2600 实验结果： 不同线程数的加速效果： 文中比较了三种优化函数的性能，分别是： 动量SGD，Momentum SGD RMSProp Shared RMSProp RMSProp是这样更新的： g=\alpha g+(1-\alpha) \Delta \theta^{2} \theta \leftarrow \theta-\eta \frac{\Delta \theta}{\sqrt{g+\epsilon}}$\eta$为学习率，$\alpha$为RMSProp折扣因子 RMSProp与Shared RMSProp的差别就是： Shared RMSProp各线程共享参数$g$，且无锁异步更新 RMSProp各线程独立一个参数$g$ 实验结果如下： 测试每种算法50次试验，得分从高到低排列，算法为n-step Q-Learning和A3C 综合来看，三种优化方式效果差别不大，但是Shared RMSProp&gt;RMSProp&gt;Momentum SGD 实验结果太多，懒得贴了，总之，这种异步框架方法的优点是： 使用离线在线策略，基于值基于策略方法，离散连续问题 稳定训练 加速训练 比经验池少消耗资源 引用 Parallel Machine Learning with Hogwild!]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Energy-Based Hindsight Experience Prioritization]]></title>
    <url>%2Fenergy-based-hindsight-experience-prioritization.html</url>
    <content type="text"><![CDATA[本文是对HER“事后”经验池机制的一个扩展，它结合了物理学的能量知识以及优先经验回放PER对HER进行提升。简称：EBP 推荐： 创新虽不多，但是基于能量的创意可以拓宽在机器人领域训练的视野 通俗易懂 简介论文地址：https://arxiv.org/pdf/1810.01363.pdf 这篇论文由慕尼黑大学博三学生赵瑞和他的导师Volker Tresp发于2018年的CoRL会议。 本文提出了一个简单高效的、基于能量的方法去优先回放“事后经验”。Energy+HER+PER 在HER中，智能体从它可完成的“虚拟”目标中进行大量学习，虚拟目标就是我们使用“事后诸葛亮”方法所调整的经验中的目标。 本文针对原始HER提出了一个稍有不足的地方：经验回放是完全随机的，即没有优先级，没有考虑哪些episode哪些经验对学习更有价值，其实这个问题与PER相对于传统经验池机制也是一样的。 本文中使用的功能定理（work-energy principle）来计算能量。 文中精要相比于传统的PER优先经验回放使用TD-error作为衡量优先级的度量，本文中使用“迹能量”作为其度量。 迹能量是这么定义的： We define a trajectory energy function as the sum of the transition energy of the target object over the trajectory. 迹能量是一个episode中transition energy（不知道怎么翻译合适，过渡能量？经验能量？转换能量？）的总和 接下来介绍一下能量在本文中是如何体现的。 经验能量差 Transition Energy我就直接拿论文中实验场景所用到的能力来说明这个能量差。简言之，在本文的实验中主要是操作机械手臂移动物体的水平位置和垂直高度，所以物体的能量基本包含三种： 势能 Potential Energy $E_{p}(s_{t})$ 动能 Kinetic Energy $E_{k}(s_{t})$ 转动能，也叫角动能 Rotational Energy $E_{r}(s_{t})$ 一个物体的能量由这三部分之和组成： E\left(s_{t}\right)=E_{p}\left(s_{t}\right)+E_{k}\left(s_{t}\right)+E_{r}\left(s_{t}\right)经验能量差指的就是相邻状态转移之间的能量差值，表示为： E_{t r a n}\left(s_{t-1}, s_{t}\right)=\operatorname{clip}\left(E\left(s_{t}\right)-E\left(s_{t-1}\right), 0, E_{t r a n}^{\max }\right)其中， 将差值clip到0是因为我们只对由机器人做功导致物体的能量增值感兴趣 将差值clip到$E_{t r a n}^{\max }$是想减缓某些特别大的能量差值的影响，使训练更稳定 注：其实我觉得文中加这个clip操作完全是想多使用一个trick，让文章看起来更饱满一点，我个人认为不使用这个clip，或者只对下界进行clip，对算法性能是没有影响的。有待验证。 势能 Potential Energy物理学中学过，物体的重力势能公式为：$E=mgh$ 本文中这样书写： E_{p}(s_{t})=mgz_{t} $m$代表物体的质量 $g$代表地球的重力系数，$g \approx 9.81 \mathrm{m} / \mathrm{s}^{2}$ $z_{t}$代表物体在$t$时刻的高度$h$ 动能 Kinetic Energy物理学中学过，物体的动能公式为： E=\frac{1}{2} mv^{2}=\frac{1}{2} m\left [ \frac{\sqrt{v_{x}^{2}+v_{y}^{2}+v_{z}^{2}}}{\Delta t} \right ]^{2}本文中这样书写： E_{k}\left(s_{t}\right)=\frac{1}{2} m v_{x, t}^{2}+\frac{1}{2} m v_{y, t}^{2}+\frac{1}{2} m v_{z, t}^{2} \approx \frac{m\left(\left(x_{t}-x_{t-1}\right)^{2}+\left(y_{t}-y_{t-1}\right)^{2}+\left(z_{t}-z_{t-1}\right)^{2}\right)}{2 \Delta t^{2}} $v_{x, t} \approx\left(x_{t}-x_{t-1}\right) / \Delta t$ $v_{y, t} \approx\left(y_{t}-y_{t-1}\right) / \Delta t$ $v_{z, t} \approx\left(z_{t}-z_{t-1}\right) / \Delta t$ $\Delta t$表示相邻两个状态之间的时间间隔，假设我们在模拟器中，1秒60帧，即每帧16.67ms，我们如果每帧执行一次动作，那么$\Delta t=16.67ms$，如果每60帧执行一次动作，那么$\Delta t=1s$ 转动能 Rotational Energy物理学中学过，物体的转动能公式为：$K=\frac{1}{2} I \cdot \omega^{2}$，注意，中间的点代表点乘，$I$代表物体的惯性矩，$\omega$代表物体的角速度 本文中这样书写： \left[ \begin{array}{c}{\phi} \\ {\theta} \\ {\psi}\end{array}\right]=\left[ \begin{array}{c}{\arctan \frac{2(a b+c d)}{1-2\left(b^{2}+c^{2}\right)}} \\ {\arcsin (2(a c-d b))} \\ {\arcsin \frac{2(a d+b c)}{1-2\left(c^{2}+d^{2}\right)}}\end{array}\right]=\left[ \begin{array}{c}{\operatorname{atan} 2\left(2(a b+c d), 1-2\left(b^{2}+c^{2}\right)\right)} \\ {\operatorname{asin}(2(a c-d b))} \\ {\operatorname{atan} 2\left(2(a d+b c), 1-2\left(c^{2}+d^{2}\right)\right)}\end{array}\right] E_{r}\left(s_{t}\right)=\frac{1}{2} I_{x} \omega_{x, t}^{2}+\frac{1}{2} I_{y} \omega_{y, t}^{2}+\frac{1}{2} I_{z} \omega_{z, t}^{2} \approx \frac{I_{x}\left(\phi_{t}-\phi_{t-1}\right)^{2}+I_{y}\left(\theta_{t}-\theta_{t-1}\right)^{2}+I_{z}\left(\psi_{t}-\psi_{t-1}\right)^{2}}{2 \Delta t^{2}}其中$a,b,c,d$为旋转四元组，其知识可以百度或google自行了解。 q=a+b \imath+c \jmath+d k$\phi, \theta, \psi$代表$x,y,z$轴方向的旋转角度 $\omega_{x, t} \approx\left(\phi_{t}-\phi_{t-1}\right) / \Delta_{t}$ $\omega_{y, t} \approx\left(\theta_{t}-\theta_{t-1}\right) / \Delta_{t}$ $\omega_{z, t} \approx\left(\psi_{t}-\psi_{t-1}\right) / \Delta_{t}$ $\Delta t$与上文解释相同 $m,I_{x},I_{y},I_{z}$可以设置为常量，本文实验中设置$m=I_{x}=I_{y}=I_{z}=1$ 迹能量 Trajectory Energy给定一个回合中所有的经验能量差，迹能量可以表示为这个回合中所有经验能量差之和： E_{t r a j}(\mathcal{T})=E_{t r a j}\left(s_{0}, s_{1}, \ldots, s_{T}\right)=\sum_{t=1}^{T} E_{t r a n}\left(s_{t-1}, s_{t}\right)基于能量的优先级首先计算迹能量，然后对迹能量高的迹（episode）优先进行回放。 根据迹能量计算迹的优先级为： p\left(\mathcal{T}_{i}\right)=\frac{E_{t r a j}\left(\mathcal{T}_{i}\right)}{\sum_{n=1}^{N} E_{t r a j}\left(\mathcal{T}_{n}\right)}$N$代表经验池中迹的总数量 伪代码 解析： 以本文实验为例，状态$s$由七元组$\left[x_{t}, y_{t}, z_{t}, a_{t}, b_{t}, c_{t}, d_{t}\right]$表示，其中前三个代表物体的位置，后三个代表物体旋转的四元组。 目标$g$与状态$s$的表示相同 $||$操作符为连结的意思，即tf.concat(a,b) 向经验池中存入的不仅仅有$(s,a,r,s’)$，还有优先级$p$与迹能量$E_{traj}$，其实我感觉这样很多余，如果使用sum-tree结构的，存其一即可 文中所使用的HER是future模式 注意： 我认为伪代码中有两行很有问题，即 我不明白为什么把原始经验$\left(s_{t}\left|g, a_{t}, r_{t}, s_{t+1}\right| g, p, E_{t r a j}\right)$存入经验池之后，需要根据优先级采样一个迹，再从采样到的迹中采样出一个经验$\left(s_{t}, a_{t}, s_{t+1}\right)$ 起初我是这么认为的，它想对经验池中迹能量高的episode进行大概率抽取，并对其中的经验进行多次扩充，由此对迹能量小的episode更加忽视，突出迹能量高的episode 但是，看到下一行我有一个疑问：如果根据优先级采样出的迹$\mathcal{T}$与当前所操作的迹$\mathcal{T}_{current}$不同，那么，为什么还要为不同迹中的经验存入相同的优先级和迹能量呢？即$\left(s_{t}\left|g^{\prime}, a_{t}, r_{t}^{\prime}, s_{t+1}\right| g^{\prime}, p, E_{t r a j}\right)$ 这样肯定是不行的，那么只有一个答案，采样迹这一步多余的，或者说，不应该出现在这里，而应该放在最后一个循环的开始，即 也就是说，应该把采样迹，从迹中采样经验的步骤放在minibatch之前，这样就合情合理了。 这是我自己的一个疑问，如果读者有其他见解，欢迎置评讨论。 EBP的总结EBP与PER的不同点： EBP使用物理学中的能量 PER使用TD-error 相比于将HER与PER结合而使用TD-error作为衡量优先级的方法，使用迹能量较少了计算量，因为PER每次回放经验都必须重新计算使用经验的新的TD-error，并存回经验池。（其实，如果使用sum-tree来构建PER，这个劣势其实很小） 文中通过实验发现：比较PER与EBP的时间复杂性，显示EBP提升了算法的性能效果（performance）但是却不增加额外的计算量。PER则提升较少，计算量也增加了。 EBP的优点： 可结合任意off-policy算法 结合了物理知识，使其可以应用于现实世界的问题 提升采样效率进两倍 相比最先进的（state-of-the-art）算法，不增加计算时间的情况下，算法效果提升了4个百分点。（此条可以忽略，因为其未必做了充分的实验来进行对比） 适用于任何机器人操作任务 适用于多目标算法 实验部分文中实验结果：https://youtu.be/jtsF2tTeUGQ 代码地址：https://github.com/ruizhaogit/EnergyBasedPrioritization 实验部分的完整细节请参考论文原文。 环境 OpenAI Gym与MuJoCo物理引擎 一个7自由度的机械手臂，与HER中一样；一个24自由度的机器手 四项任务：pick &amp; place，机器手操作方块、蛋、笔 使用稀疏奖励，二分奖励，完成容忍度内目标为0，否则为-1 算法 文中没有说明具体使用什么算法作对比，只有伪代码中提到了DPG、DDPG 文中亦没有对算法中的超参数设置、网络结构进行说明 19个CPU 器械臂场景$E_{t r a n}^{\max }=0.5$，机械手场景$E_{t r a n}^{\max }=2.5$ 文中主要比较了HER、HER+PER、HER+EBP 实验结果 横坐标是训练的轮数，应该是指episode的意思 纵坐标是5个随机种子实验的平均成功率 蓝色代表HER+EBP，橘色代表HER，绿色代表HER+PER 结果： 从上图可以看出，四项任务中，HER+EBP比其他两种方法收敛速度都快，效果也更好一点 从上表可以看出，HER+EBP与HER的训练时间基本相同，而HER+PER要消耗10倍的时间 结果： 训练结束后，HER+EBP在四项任务中效果都最好 HER+EBP比HER提高了1-5个百分点，平均提升了3.75个百分点 We can see that EBP is a simple yet effective method, without increasing computational time, but still, improves current state-of-the-art methods. 结果： 采样效率方面，总体来看，EBP+HER比HER提升了2倍 最后，作者比较了迹能量与TD-error的pearson相关系数 系数为1，即正线性相关 系数为-1，即负线性相关 系数为0，即不线性相关 结果： 四个实验中，迹能量与TD-error均成正相关 平均下来pearson系数为0.6，说明迹能量与TD-error呈正线性相关关系，也就是说迹能量可以像TD-error一样表示经验的可学习价值]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hindsight Experience Replay]]></title>
    <url>%2FHindsight-Experience-Replay.html</url>
    <content type="text"><![CDATA[本文介绍了一个“事后诸葛亮”的经验池机制，简称为HER，它可以很好地应用于稀疏奖励和二分奖励的问题中，不需要复杂的奖励函数工程设计。 推荐： 稀疏奖励问题的一种解决方案 通俗易懂 简介论文地址：https://papers.nips.cc/paper/7090-hindsight-experience-replay.pdf Dealing with sparse rewards is one of the biggest challenges in Reinforcement Learning (RL). 强化学习问题中最棘手的问题之一就是稀疏奖励。 本文提出了一个新颖的技术：Hindsight Experience Replay（HER），可以从稀疏、二分的奖励问题中高效采样并进行学习，而且可以应用于所有的Off-Policy算法中。 Hindsight意为事后，结合强化学习中序贯决策问题的特性，我们很容易就可以猜想到，“事后”要不然指的是在状态s下执行动作a之后，要不然指的就是当一个episode结束之后。其实，文中对常规经验池的改进也正是运用了这样的含义。 HER lets an agent learn from undesired outcomes and tackles the problem of sparse rewards in Reinforcement Learning (RL).——Zhao, R., &amp; Tresp, V. (2018). Energy-Based Hindsight Experience Prioritization. CoRL. HER使智能体从没达到的结果中去学习，解决了强化学习中稀疏奖励的问题。 二分奖励 binary reward简言之，完成目标为一个值，没完成目标为另一个值。如： $S_{T}=Goal，r=0$ $S\neq Goal, r=-1. for \ S \in \mathbb{S}$ 稀疏奖励 sparse reward简言之，完成目标的episode太少或者完成目标的步数太长，导致负奖励的样本数过多 文中精要在机器人领域，要想使强化学习训练它完美执行某任务，往往需要设计合理的奖励函数，但是设计这样的奖励函数工程师不仅需要懂得强化学习的领域知识，也需要懂得机器人、运动学等领域的知识。而且，有这些知识也未必能设计出很好的奖励函数供智能体进行学习。因此，如果可以从简单的奖励函数（如二分奖励）学习到可完成任务的模型，那就不需要费心设计复杂的奖励函数了。 文中介绍了一个例子来引入HER： 名称：bit-flipping environment 状态空间$\mathcal{S}=\left \{ 0,1 \right \}^{n}$ 动作空间$\mathcal{A}=\left \{ 0,1,\cdots,n-1 \right \}$ 规则：对于每个episode，均匀采样长度为$n$的初始状态$s_{0}$（如$n=5，s_{0}=10101$）和目标状态$s_{g}$，每一步从动作空间中选取一个动作$a$，翻转$s_{0}$第$a$个位置的值，如$a=1\Rightarrow s_{1}=11101$，直到回合结束或者翻转后的状态与$s_{g}$相同 奖励函数：$r_{g}(s,a)=-\left [ s \neq g \right ]$，即达到目标状态则为0，未达到目标状态则为-1。这个很容易理解，$s \neq g \Rightarrow true \doteq 1，s = g \Rightarrow false \doteq 0$ 注：下文如无特殊说明，$g$即表示目标状态$s_{g}$ Standard RL algorithms are bound to fail in this environment for n &gt; 40 because they will never experience any reward other than -1. Notice that using techniques for improving exploration (e.g. VIME (Houthooft et al., 2016), count-based exploration (Ostrovski et al., 2017) or bootstrapped DQN (Osband et al., 2016)) does not help here because the real problem is not in lack of diversity of states being visited, rather it is simply impractical to explore such a large state space. 当序列长度$n$大于40时，传统的强化学习算法就算有各种探索机制的加持，也不能学会解决这个问题，因为这个问题完全不是缺乏探索，而是状态太多，探索不完，导致奖励极其稀疏，算法根本不知道需要优化的目标在哪里。 为了解决这个问题，作者指出了两个思路： 使用shaped reward（简言之，将reward设计成某些变量的函数，如$r_{g}(s,a)=-\left || s-g \right ||^{2}$，即奖励函数为当前状态与目标状态的欧氏距离的负数），将训练的算法逐步引导至奖励函数增大的决策空间。但是这种方法可能很难应用于复杂的问题中。 使用HER——事后经验池机制 HER The pivotal idea behind our approach is to re-examine this trajectory with a different goal — while this trajectory may not help us learn how to achieve the state g, it definitely tells us something about how to achieve the state $s_{T}$ . HER的主要思想就是：为什么一定要考虑我们设定的目标呢？假设我们想让一个智能体学会移动到某个位置，它在一个episode中没有学到移动到目标位置就算失败吗？假定序列为$s_{0},s_{1},s_{2}, \cdots ,s_{T}$，目标为$g$，我们何不换一种思路考虑：如果我们在episode开始前就将目标状态$g$设置为$s_{T}$，即$g=s_{T}$，那么这样看来智能体不就算是完成目标了吗？ HER就是运用了这个思想对经验池进行了扩充，将稀疏奖励问题给转化成非稀疏奖励，大大的扩展了经验池中完成任务的经验数量。 HER主要特点： 传统经验池存入的是状态$s$，而HER存入的是$s||g$，也就是tf.concat(s,g) 训练算法的输入也是$s||g$，也就是需要在当前状态后边连结上每个episode的目标状态，每个episode的目标状态可能不同 HER对经验池进行了扩充，不仅存入实际采样得到的transition/experience，$\left ( s_{t}||g,a_{t},r_{t},s_{t+1}||g \right )$，也要在回合结束时重新设置目标状态，得到相应的奖励值（在二分奖励问题中，只有在$s=g$时奖励才需要更改），存入“事后”（当初如果这样就好啦！）的经验$\left ( s_{t}||g’,a_{t},r_{t}’,s_{t+1}||g’ \right )$，详见伪代码，这个事后经验究竟存入多少份、多少种，由超参数$k$控制，下文讲解。 HER更适合解决多目标问题，多目标的意思为，目标点非固定，每个episode的目标状态可以不相同。详见实验部分 HER的几种扩展方式： future — replay with k random states which come from the same episode as the transition being replayed and were observed after it,episode — replay with k random states coming from the same episode as the transition being replayed,random — replay with k random states encountered so far in the whole training procedure. 未来模式——future：在一个序列$s_{0},s_{1},s_{2},\cdots,s_{T}$中，如果遍历到状态$s_{2}$，则在$s_{3},\cdots,s_{T}$之间随机抽取$k$个状态作为目标状态$g’$，并依此向经验池中存入$\left ( s_{2}||g’,a_{2},r_{2}’,s_{3}||g’ \right )$，特点：一个episode的后续部分 回合模式——episode：在一个序列$s_{0},s_{1},s_{2},…,s_{T}$中，如果遍历到状态$s_{2}$，则在整个序列中随机抽取$k$个状态作为目标状态$g’$，并依此向经验池中存入$\left ( s_{2}||g’,a_{2},r_{2}’,s_{3}||g’ \right )$，特点：一个episode 随机模式——random：在一个序列$s_{0},s_{1},s_{2},…,s_{T}$中，如果遍历到状态$s_{2}$，则在多个序列$\tau_{0},\tau_{1},\tau_{2},\cdots$中随机抽取$k$个状态作为目标状态$g’$，并依此向经验池中存入$\left ( s_{2}||g’,a_{2},r_{2}’,s_{3}||g’ \right )$，特点：多个episode 最终模式——final：在一个序列$s_{0},s_{1},s_{2},\cdots,s_{T}$中，如果遍历到状态$s_{2}$，则之间令$g’=s_{T}$，并向经验池中存入$\left ( s_{2}||g’,a_{2},r_{2}’,s_{3}||g’ \right )$，特点：一个episode的最后一个状态，如果设置k，则存入k个相同的经验 伪代码 解析： 伪代码中没有提到超参数$k$，其实在循环条件$\textbf{for} \ g’ \in G \ \textbf{do}$中循环执行了$k$次 $||$操作为连结操作，简言之，将两个长度为5的向量合并成一个长度为10的向量 $G:=\mathbb{S}(\textbf{current episode})$即为上文提到的四种扩展模式：future、episode、random、final。 奖励函数$r(s,a,g)=-\left [ f_{g}(s)=0 \right ]$即为前文提到的$r_{g}(s,a)=-\left [ s \neq g \right ]$，即完成为0，未完成为-1，具体奖励函数可以根据我们的使用环境设计 $a_{t} \leftarrow \pi_{b}(s_{t}||g)$表示神经网络的输入为当前状态与目标状态的连结 HER的优点 可解决稀疏奖励、二分奖励问题 可适用于所有的Off-Policy算法 提升了数据采样效率 实验部分文中实验结果：https://goo.gl/SMrQnI 实验部分的完整细节请参考论文原文。 环境 7自由度机械臂 模拟环境：MuJoCo 任务分为3种 Pushing，推：锁定机械臂的钳子，移动机械臂将物体推到目标点 Sliding，滑动：类似于冰球运动，锁定机械臂的钳子，移动机械臂给与物体一个力，使物体可以在较光滑的桌面上滑动并且达到目标位置 Pick-and-place，摆放：解锁钳子，使用机械臂夹起物体并移动至空中目标点 算法 DDPG Adam优化器 多层感知机MLPs ReLU激活函数 8核并行，更新参数后取平均 A-C网络都是3个隐藏层，每层64个隐节点，Actor输出层用tanh激活函数 经验池大小为$10^{6}$，折扣因子$\gamma=0.98$，学习率$\alpha=0.001$，探索因子$\epsilon = 0.2$ With probability 20% we sample (uniformly) a random action from the hypercube of valid actions. DDPG使用了随机探索机制 训练结果final模式与future模式对比 红色曲线为future模式，蓝色曲线为final模式，绿色曲线为使用了count-based的DDPG，褐红色虚线为原始DDPG 从左至右依次是Pushing，Sliding，Pick-and-place任务 超参数$k=4$ 这个实验中，目标状态会变，即为多个目标状态 结果分析： future模式比final效果更好 使用了count-based的DDPG智能稍微解决一下Sliding任务 使用HER的DDPG可以完全胜任三个任务 证明了HER是使从稀疏、二分奖励问题中学习成为可能的关键因素 单个目标状态的实验 蓝色曲线为使用了HER的DDPG，文中并未说明HER是哪种模式，猜测是final模式，因为文中实验部分之前都是以final模式进行举例 绿色曲线代表应用了count-based的DDPG，褐红色虚线为原始DDPG 实验中，目标状态都为同一状态$g$ 结果分析： DDPG+HER比原始DDPG的性能要好很多 相比于多个目标的实验，可以发现，在多目标的任务中DDPG训练更快，所以在实际中，即使我们只关心一个目标，我们最好也使用多个目标来训练 HER应用于reward shaping问题中前文已经说过，reward shaping可以简单理解为将奖励函数设置为某些变量的函数，如$r_{g}(s,a)=-\left || s-g \right ||^{2}$，即奖励函数为当前状态与目标状态的欧氏距离的负数 奖励函数为$r_{g}(s,a)=-\left || s-g \right ||^{2}$ 结果分析： 无论使用怎样的reward shaping函数，DDPG、DDPG+HER都不能解决这个问题 作者认为原因有二： There is a huge discrepancy between what we optimize (i.e. a shaped reward function) and the success condition (i.e.: is the object within some radius from the goal at the end of the episode); 判定完成目标的条件和要优化的问题有巨大的矛盾（虽然我也不理解这到底是什么意思，索性就直接抄了过来） Shaped rewards penalize for inappropriate behaviour (e.g. moving the box in a wrong direction) which may hinder exploration. It can cause the agent to learn not to touch the box at all if it can not manipulate it precisely and we noticed such behaviour in some of our experiments. reward shaping阻碍了探索 Our results suggest that domain-agnostic reward shaping does not work well (at least in the simple forms we have tried). Of course for every problem there exists a reward which makes it easy (Ng et al., 1999) but designing such shaped rewards requires a lot of domain knowledge and may in some cases not be much easier than directly scripting the policy. This strengthens our belief that learning from sparse, binary rewards is an important problem. 研究结果表明，与领域无关的reward shaping效果并不好 四种模式比较 红色代表future模式，蓝色代表final模式，绿色代表episode模式，紫色代表episode模式，褐红色虚线代表原始DDPG 横坐标代表超参数$k$，第一行三个图的纵坐标代表最高得分，第二行三个图的纵坐标代表平均得分 结果分析： 效果：future&gt;final&gt;episode&gt;random&gt;no HER 稳定性：final(好)=no-HER(差)&gt;future&gt;episode&gt;random future模式是唯一一个可以解决Sliding任务的，在$k=4$或者$k=8$时效果最好 增大$k$超过8会使性能有所下降，主要是因为$k$过大导致经验池中原始真实数据所占的比例太小 It confirms that the most valuable goals for replay are the ones which are going to be achieved in the near future 它证实了回放经验中最有价值的目标是那些在不久的将来能实现的目标 注：作者根据 future 模式提出了最近邻的 future 模式，即把$g’$设置为$s_{t+1}$，并且进行了实验，实验结果不如 future 模式。]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Prioritized Experience Replay]]></title>
    <url>%2FPrioritized-Experience-Replay.html</url>
    <content type="text"><![CDATA[这篇论文介绍了优先经验回放机制，它可以使学习过程更高效。 推荐： 实用技巧 通俗易懂 简介论文地址：https://arxiv.org/pdf/1511.05952.pdf 之前重用经验（experience，transition转换五元组$\lt s,a,r,s’,done \ or \ \gamma\gt$都是从经验池中均匀采样，忽略了经验的重要程度，文中提到的优先经验回放框架按经验重要性增大其被采样到的概率，希望越重要的经验使用次数越多，从而增加学习效率。 文中应用算法：DQN 效果：相比传统经验池机制，Atari 49游戏中41胜，8负 文中精要 Online reinforcement learning (RL) agents incrementally update their parameters (of the policy, value function or model) while they observe a stream of experience. In their simplest form, they discard incoming data immediately, after a single update. Two issues with this are (a) strongly correlated updates that break the i.i.d. assumption of many popular stochastic gradient-based algorithms, and (b) the rapid forgetting of possibly rare experiences that would be useful later on.Experience replay addresses both of these issues: with experience stored in a replay memory, it becomes possible to break the temporal correlations by mixing more and less recent experience for the updates, and rare experience will be used for more than just a single update. 指出On-policy一般使用一个episode的数据进行参数更新，且数据用完即丢，这样做有两个缺点： 数据（状态）相互关联，数据不具有独立同分布($i.i.d$)的性质，但许多流行的随机梯度算法往往有关于数据独立同分布的假设 对罕见的（稀疏的）经验快速遗忘，忽略了这些罕见经验可能多次更新更有用的作用 经验池机制解决了上述两个问题，通过混合近期经验打破它们关于时间的关联性，并从经验池中采样经验学习多次。 经验池机制的优势： 稳定了DQN值函数的训练 一般情况下，经验回放可以减少训练所需的经验数量，但是需要加大计算量，消耗更多的内存，但是这往往比智能体与环境进行交互来得更方便、容易 In particular, we propose to more frequently replay transitions with high expected learning progress, s measured by the magnitude of their temporal-difference (TD) error. This prioritization can lead o a loss of diversity, which we alleviate with stochastic prioritization, and introduce bias, which e correct with importance sampling. 文中根据TD-error设置优先经验回放的频率，这可能会引起两个问题： 丢失样本多样性 引入偏差 分别解决方案： 随机优先级 stochastic prioritization 重要性采样 The central component of prioritized replay is the criterion by which the importance of each transition is measured. One idealised criterion would be the amount the RL agent can learn from a transition in its current state (expected learning progress). While this measure is not directly accessible, reasonable proxy is the magnitude of a transition’s TD error $\delta$ indicates how ‘surprising’ or unexpected the transition is: specifically, how far the value is from its next-step bootstrap estimate. 优先经验回放的核心部分是如何衡量样本的重要性，并根据其重要性进行回放。 最直观的衡量标准是从经验样本中可以学习的量，但是这个量不可知、不可得，于是使用TD-error $\delta$作为这个量的替代品以衡量样本重要性。 New transitions arrive without a known TD-error, so we put them at maximal priority in order to guarantee that all experience is seen at least once. 新的经验被存入经验池时不需计算TD-error，直接将其设置为当前经验池中最大的TD-error，保证其至少被抽中一次。 既然使用TD-error作为衡量可学习的度量，那么完全可以用贪婪的方式，选取TD-error最大的几个进行学习，但这会有几个问题： 由于只有在经验被重放之后，这个经验的TD-error才被更新，导致初始TD-error比较小的经验长时间不被使用，甚至永远不被使用。 贪婪策略聚焦于一小部分TD-error比较高的经验，当使用值函数近似时，这些经验的TD-error减小速度很慢，导致这些经验被高频重复使用，致使样本缺乏多样性而过拟合。 文中提到使用随机采样方法 stochastic sampling method在贪婪策略与均匀采样之间“差值”来解决上述问题，其实它是一个在样本使用上的trade-off，由超参数$\alpha$控制 使用优先经验回放还有一个问题是改变了状态的分布，我们知道DQN中引入经验池是为了解决数据相关性，使数据（尽量）独立同分布的问题。但是使用优先经验回放又改变了状态的分布，这样势必会引入偏差bias，对此，文中使用偏差退火——重要性采样结合退火因子，来消除引入的偏差。 随机采样方法 P(i)=\frac{p^{\alpha}_{i}}{\sum_{k}p^{\alpha}_{k}}$\alpha$超参数控制采样在uniform和greedy的偏好，是一个trade-off因子： $\alpha=0$，均匀采样 $\alpha=1$，贪婪策略采样 $\alpha \in [0,1]$，文中没有明说$\alpha$的取值范围 引入$\alpha$不改变优先级的单调性，只是适当调整高、低TD-error经验的优先级 根据优先级$p_{i}$的设定可以将优先经验池的设计分为两种： 直接的，基于比例的，proportional prioritization 间接的，基于排名的，rank-based prioritization Proportional Prioritization p_{i}=\left | \delta_{i} \right | + \epsilon $\delta$表示TD-error $\epsilon$是一个小的正常数，防止TD-error为0的经验永远不被重放。 Rank-based Prioritization p_{i}=\frac{1}{rank(i)} $rank(i)$是经验根据$\left | \delta_{i} \right |$大小排序的排名 $P$为指数$\alpha$的幂律分布power-law distribution 这种方式更具鲁棒性，因为其对异常点不敏感，主要是因为异常点的TD-error过大或过小对rank值没有太大影响 优点： 其重尾性、厚尾性、heavy-tail property保证采样多样性 分层采样使mini-batch的梯度稳定 缺点： 当在稀疏奖励场景想要使用TD-error分布结构时，会造成性能下降 比较根据文中实验，两种方式效果基本相同，但不同场景可能一个效果很好，一个效果一般般。作者猜想效果相同的原因可能是因为对奖励和TD-error大量使用clip操作，消除了异常值，作者本以为Rank-based更具鲁棒性的。 Overhead is similar to rank-based prioritization. 两者开销相同。 偏差退火 Annealing The Bias我觉得应该译为消除偏差。 引入重要性采样、引入退火因子$\beta$消除偏差。将$w_{i}$除以$max_{i}w_{i}$向下缩放（减小）梯度更新幅度，稳定算法 w_{i}=\left ( \frac{1}{N} \cdot \frac{1}{P(i)} \right )^{\beta} $\beta=0$，完全不用重要性采样 $\beta=1$，常规重要性采样 在训练接近尾声时，使$\beta \rightarrow 1$ $\beta \in [0,1]$，文中并没有明说$\beta$的取值范围 $\beta$的选择与$\alpha$有关，但文中并没有说明这两个参数如何选择的关系 作用： 消除偏差 We therefore exploit the flexibility of annealing the amount of importance-sampling correction over time, by defining a schedule on the exponent β that reaches 1 only at the end of learning. 应用退火重要性采样校正量的灵活性，使在学习快结束时，将$\beta \rightarrow 1$ 伪代码 解析： step-size $\eta$可以看做是学习率，文中并没有说它具体的定义，只是说它可以调节参数更新幅度（不就是学习率嘛） $K$代表采样与更新之间的步数差，也就是，先采样K次经验并存入经验池，再取mini-batch更新。 采样方式： 采样与更新TD-error的时间复杂度为$O(log_{2}N)$ 学习完之后对学习使用的经验更新其TD-error 重要性权重$w_{j}=\left ( N \cdot P(j)\right )^{-\beta}/max_{i}w_{i}$，由$max_{i}w_{i}=max_{i}\left ( N \cdot P(i)\right )^{-\beta}=\left ( min_{i}N \cdot P(i)\right )^{-\beta}=w_{j}=\left ( N \cdot P_{min}\right )^{-\beta}$,可以将其化简为$w_{j}=\left ( \frac{p_{min}}{p_{i}} \right )^{\beta}$ 第12行，赋值其实是$(\left | \delta_{i} \right |+ \epsilon)^{\alpha}$，如果是rank-based，则为$rank(i)^{-\alpha}$ 第6行，对于新采样到的经验，不必计算其TD-error，直接将其设置为最大即可，当使用该经验学习之后再计算其TD-error $\Delta$其实就是误差函数$\delta^{2}$对$\theta$的导数，只不过对于mini-batch中的各个经验使用重要性比率进行了加权求和。 注意： Our final solution was to store transitions in a priority queue implemented with an array-based binary heap. The heap array was then directly used as an approximation of a sorted array, which is infrequently sorted once every $10^{6}$ steps to prevent the heap becoming too unbalanced. 如果使用rank-based方法，则使用的不是sum-tree结构，而是二进制堆，由于我不了解这个结构，故目前不做阐述。 Sum Tree123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778import numpy as npclass Sum_Tree(object): def __init__(self, capacity): """ capacity = 5，设置经验池大小 tree = [0,1,2,3,4,5,6,7,8,9,10,11,12] 8-12存放叶子结点p值，1-7存放父节点、根节点p值的和，0存放树节点的数量 data = [0,1,2,3,4,5] 1-5存放数据， 0存放capacity """ assert capacity != 1 self.now = 0 self.parent_node_count = self.get_parent_node_count(capacity) self.tree = np.zeros(self.parent_node_count + capacity + 1) self.tree[0] = len(self.tree) - 1 self.data = np.zeros(capacity + 1, dtype=object) self.data[0] = capacity def add(self, p, data): """ p : 优先级 data : 数据元组 """ tree_index = self.now + self.parent_node_count + 1 self.data[self.now + 1] = data self._updatetree(tree_index, p) self.now += 1 if self.now &gt; self.data[0]: self.now = 0 def _updatetree(self, tree_index, p): diff = p - self.tree[tree_index] self._propagate(tree_index, diff) self.tree[tree_index] = p def _propagate(self, tree_index, diff): parent = tree_index // 2 self.tree[parent] += diff if parent != 1: self._propagate(parent, diff) def _total(self): return self.tree[1] def get(self, seg_p_total): """ seg_p_total : 要采样的p的值 """ tree_index = self._retrieve(1, seg_p_total) data_index = tree_index - self.parent_node_count return (tree_index, self.tree[tree_index], self.data[data_index]) def _retrieve(self, tree_index, seg_p_total): left = 2 * tree_index right = left + 1 if left &gt;= self.tree[0]: return tree_index return self._retrieve(left, seg_p_total) if seg_p_total &lt;= self.tree[left] else self._retrieve(right, seg_p_total - self.tree[left]) def pp(self): print(self.tree, self.data) def get_parent_node_count(self, capacity): i = 0 while True: if pow(2, i) &lt; capacity &lt;= pow(2, i + 1): return pow(2, i + 1) - 1 i += 1tree = Sum_Tree(5)tree.add(1, 3)tree.add(2, 4)tree.add(3, 5)tree.add(4, 6)tree.add(6, 11)tree.pp()print(tree.get(4)) 优先经验回放的特点 新的transition被采样到时，需要将其TD-error设置为最大，以保证最近的经验更容易被采样到。 只有在从经验池中抽取到某个经验并进行学习后，才对其TD-error进行计算更新。 实验结果算法： DQN 优化后的Double DQN 为了算法稳定的原因，将reward和TD-error clip到[-1,1] 优先经验池： 经验池大小$10^{6}$ batch-size为32 K=4，即每采样4次学习一次 Rank-based：$\alpha=0.7，\beta_{0}=0.5$，Proportional：$\alpha=0.6，\beta_{0}=0.4$ These choices are trading off aggressiveness with robustness, but it is easy to revert to a behavior closer to the baseline by reducing $\alpha$ and/or increasing $\beta$. 效果学习速度 黑色代表不使用优先经验回放的DDQN 蓝色代表使用Proportional Prioritization的DDQN 红色代表使用Rank-based Prioritization的DDQN 绿色的虚线为人类水平 归一化得分这些度量不重要，重要的是使用了优先经验回放机制的确提升了2倍左右的性能。]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Evolution Strategies as a Scalable Alternative to Reinforcement Learning]]></title>
    <url>%2FEvolution-Strategies-2017.html</url>
    <content type="text"><![CDATA[这一篇论文讲了强化学习算法的替代可解方案：进化策略。主要思想是对参数空间添加噪音而不是动作空间。 不推荐这篇论文： 公式没有详细推理，非常难懂 文中进化策略其实跟强化学习并没有特别大的关系 很多关于进化策略的性质、优势非常难懂，基本上都是文字解释，没有举例 文中措辞不难，但想要理解其本质非常难 简介论文地址：https://arxiv.org/pdf/1703.03864.pdf 进化策略ES是一组/一类算法，而不是一个算法，它属于黑盒优化方法，它由自然进化中的启发式搜索过程而得来：每一代中都有突变的基因，环境对基因突变的效果给出适应性的判断，重组好的突变基因产生下一代，直到最优。 进化策略算法的划分主要有三个依据：基因如何表示（神经网络参数）、突变如何产生（参数优化过程）、基因如何重组（参数重组）。 进化策略ES这种方法通常分为直接策略搜索和神经进化，黑盒优化方法有很多很好的特性： 不关心奖励分布，奖励密集或稀疏都无所谓 不需要反向传播梯度 tolerance of potentially arbitrarily long time horizons. 翻译为可以适应长期视野/回报，在长动作序列上有优势 但是，进化策略ES往往不能解决像Q-Learning和PG这样可应用的难的强化学习问题，这篇论文旨在使进化策略可以解决DRL算法可解决的更难的问题。 正文精要 A large source of difficulty in RL stems from the lack of informative gradients of policy performance: such gradients may not exist due to non-smoothness of the environment or policy, or may only be available as high-variance estimates because the environment usually can only be accessed via sampling. 指出强化学习的难题在于缺乏策略性能的有效梯度：梯度可能由于环境不光滑而不存在、可能由于只能采样环境而存在高方差。 For MDP-based reinforcement learning algorithms, on the other hand, it is well known that frameskip is a crucial parameter to get right for the optimization to succeed. 对于基于MDP的强化学习算法，跳帧是算法优化的关键参数。 It is common practice in RL to have the agent decide on its actions in a lower frequency than is used in the simulator that runs the environment. RL通常使智能体在模拟环境中决策频率高于在实际环境中。 文中设定一个策略的期望奖励为： \mathbb{E}_{\epsilon \sim N(0,I)}F(\theta+\sigma\epsilon)关于网络参数$\theta$的导数为： \nabla_{\theta}\mathbb{E}_{\epsilon \sim N(0,I)}F(\theta+\sigma\epsilon)=\frac{1}{\sigma}\mathbb{E}_{\epsilon \sim N(0,I)} \{F(\theta+\sigma\epsilon)\epsilon \}其中，$\theta$为网络参数，也可以认为是多变量高斯分布的均值，$\sigma$为固定方差，$\epsilon$为扰动向量，由各向同性、方差均为1的多变量高斯分布采样得到。文中没有对该导数推导过程有介绍，好像是使用了Reinforce Trick的方法，但是却不知道具体如何推导出这个形式。 文中提到的算法1是对一个策略进行多次扰动，每扰动一次就与环境交互得到一个episode，最后只用各个扰动向量$\epsilon_{i}$与对应的回报$F(\theta)$相乘，根据该期望进行参数更新。 算法2是对算法1的并行化处理，设置相同的随机种子，假设n个worker： 各个worker共用一个策略$\pi$ 每个worker根据高斯分布采样得到扰动向量$\epsilon$ 各个worker根据扰动后的策略参数采样一个episode 互相分发各自的回报 再采样n个扰动向量$\epsilon$，使用梯度上升更新参数，然后分发策略 文中后边提到，其实不必每次都从高斯分布中采样出扰动向量$\epsilon$，可以在开始训练前直接采样得到m个扰动向量，每次需要扰动向量时直接根据m的值生成一个随机数，取出以该随机数为下标的扰动向量即可。这么做可以减少更新时的时长消耗。 Experiments on Atari and MuJoCo show that it is a viable option with some attractive features: it is invariant to action frequency and delayed rewards, and it does not need temporal discounting or value function approximation. Most importantly, ES is highly parallelizable, which allows us to make up for a decreased data efficiency by scaling to more parallel workers. 文中使用的进化策略ES的优点： 与决策间隔无关，也就是对于跳帧间隔的设置鲁棒性很高 不关心延迟奖励 不需要折扣计算回报 不需要值函数近似 可以高度并行化使，我们能够通过扩展到更多并行训练节点来弥补数据效率的下降。 实验发现 使用Virtual Batch Normalization和神经网络策略重参数（文中没有提到重参数的内容，只提到网络参数的影响）可以极大提升进化策略ES的可靠性。实验中，不使用这两种方法算法很“脆弱”，也就是不稳定。 进化策略ES可以高度并行化。通过引入一个基于通用随机数的新颖通讯策略，即是是1000个子节点也可以达到运行时间的线性加速。 进化策略ES的数据效率出奇的好。尽管相比A3C算法需要3-10倍的数据量，但是由于具有不需反向传播、没有值函数等特点，这些轻微的数据效率劣势可以被弥补。实验表明，相同计算量下，1小时ES与1天A3C的效果基本相同。 进化策略ES相比PG类算法的探索性更强。 进化策略ES的鲁棒性很好。多种不同训练环境可以使用同一组超参数。 实验结果MuJoCo与高度优化的TRPO算法相比，ES在离散动作更有优势，因为连续动作在参数扰动方面可能过于平滑并且可能妨碍探索。 ES和TRPO的网络结构都是：输入层→64，tanh→64，tanh→输出层。 复杂环境如Hopper和Walker2d中，ES样本复杂性相比TRPO高不到10倍；简单场景中，相比低3倍。 TRPO训练500W步，ES训练至TRPO训练过程中各阶段效果所需步长的比例如表所示： 虽然文中说是简单场景低三倍，其实根本就没有明确的低三倍，而且我对文中所提的简单场景复杂场景的划分也持怀疑态度。 Atari预处理、网络架构与Atari那篇论文的一模一样，用A3C使用3.2亿帧训练1天的结果与使用ES训练10亿帧的结果相同（保持计算量相同，因为ES不需要反向传播和值函数评估）。使用720块cpu，训练一个游戏只需1小时。 最终，纯图像输入下，与A3C相比，23个游戏ES胜，28个游戏A3C胜。 并行化 ParallelizationES特别适合并行化，因为其通讯低带宽特性（只需各个worker的回报和随机种子）。 测试环境：3D Humanoid walking task 结果：单机18核需11小时，与最先进的强化学习算法性能相当，80台机器1440个CPU核心只需10分钟。 随着核心数增加，训练性能线性加速。 “跳帧”测试将强化学习在模拟环境中训练出的模型用于实际环境中式，通常需要降低其决策频率，也就是加大决策间隔。 如果跳帧设置过大，智能体所做的动作往往不够好，如果跳帧设置过小，会导致每个episode的步数过长，加大计算量，恶化训练过程（其实文中这么说并不严谨）。 ES的一个优势是梯度计算与回合长度无关，这间接增加了对跳帧间隔的鲁棒性。在Atari游戏Pong中使用四个不同跳帧间隔{1，2，3，4}的学习曲线如下： 由曲线可以看出，不同的跳帧间隔，训练效果差不多。但，我对该鲁棒性测试在复杂环境中的效果表示怀疑。我觉得前沿强化学习算法在该训练场景中使用不同的跳帧间隔也可以得到相同结果。]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SARSA and Q-Learning]]></title>
    <url>%2Fsarsa-and-q-learning.html</url>
    <content type="text"><![CDATA[本文介绍了两个强化学习中解决Model-Free问题的最经典算法：SARSA和Q-Learning，这两个算法也是On-Policy与Off-Policy的分水岭。]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Monte Carlo and Temporal-Difference]]></title>
    <url>%2Fmc-td.html</url>
    <content type="text"><![CDATA[本位介绍了强化学习中解决Model-Free问题的两个基本解决思路：蒙特卡洛Monte Carlo与时间差分Temporal-Difference。 蒙特卡洛方法 Monte Carlo Methods时间差分学习 Temporal-Difference Learning]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态规划 Dynamic Programming]]></title>
    <url>%2Fdynamic-programming.html</url>
    <content type="text"><![CDATA[本文介绍了强化学习问题中最简单基本的算法——动态规划（Dynamic Programming），介绍了贝尔曼方程在该算法中的应用。 DP的基本概念 动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。1957年出版了他的名著《Dynamic Programming》，这是该领域的第一本著作。——百度百科) 动态规划-DP算法指的不是单一一个算法，而是一系列可以在给定满足MDP的完全可知环境模型中计算出最优策略的算法。 DP的特点： Model-Based Value-Based Off-Policy(这个比较牵强，因为DP不涉及采样、预测，完全靠planning) DP具有很重要的理论基础作用，但是在现在的强化学习问题中，DP并不常使用，主要原因有二： 需要完全可知的模型，状态空间、动作空间离散，状态转移、奖励函数可知且确定 计算量很大(每次更新都需要完全规划所有可能性) 在一些表格型的问题中，如完全可知的迷宫，可以使用DP，但是要解决人类现实世界极其复杂的问题、任务，DP可能就有些力不从心啦。 其实，所有的强化学习算法都可以被认为是在不完全可知的环境中使用少量计算得到如DP效果一样的策略（最优策略）。 算法先回顾一下之前提到的贝尔曼方程。 贝尔曼期望方程： v_{\pi}(s) =\sum_{a}\pi(a\mid s)\sum_{s',r}p(s',r \mid s,a)\left[r+\gamma v_{\pi}(s')\right] q_{\pi}(s,a) =\sum_{s',r}p(s',r \mid s,a)\left[r+\gamma v_{\pi}(s')\right]贝尔曼最优方程： v_{*}(s) =\max_{a}\sum_{s',r}p(s',r\mid s,a)\left[r+\gamma v_{*}(s')\right] q_{*}(s,a) =\sum_{s',r}p(s',r\mid s,a)\left[r+\gamma v_{*}(s')\mid s,a\right]为什么要再次提到贝尔曼方程呢？因为动态规划算法中的策略迭代、值迭代就是将贝尔曼方程给结合了起来。 回顾一下在价值与贝尔曼方差最后的例子中迭代计算$V(S)$和$Q(S,A)$，遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$。在一个简单的场景下循环迭代至收敛就需要很大的计算量，如果在复杂场景中(还是完全可知的)迭代计算可想有多费时费力，动态规划DP下的Policy Iteration和Value Iteration减轻了计算的负担，同时又不影响收敛性。 引用《Reinfocement Learning : An Introduction》中的一个网格世界的例子： 在这个例子中，有1-14个非终态以及两个终态(左上角、右下角)，动作空间为上下左右四种，在边缘位置的状态，例如$S=1$，可选的动作只有左右下三种，且等概率选择每种动作，每进行一次移动，就给予-1的奖励值。智能体需要尽快的到达网格世界的出口-终态，以获得尽量少的负奖励(即累计奖励最大)。 如果按照先遍历所有$Q(S,A)$以计算$V(S)$，再遍历所有$V(S)$以计算$Q(S,A)$的方式计算，值函数的表格将会如下图所示： 左边展示的是进行$k$次迭代，使值函数表格可以收敛，右边表示在每次迭代中，取$a=argmax_{a}q(s,a)$的策略。 可以发现，这样迭代$V(S)$至收敛有两个浪费算力的地方： 选择动作的概率完全按照环境设置，导致计算状态$s$的值函数时，最差的动作$a$所带来的影响也被计算在其中，但其实真正执行的时候，永远不会执行该动作。 $k=3$与$k=10$时的策略表示一样，也就意味着，不必等到$V(S)$迭代至完全收敛就有可能可以获得最优策略，那么后续迭代完全没有用处，造成了资源浪费。 策略迭代、值迭代的思想都是贪心策略，但策略迭代针对问题1通过剪裁可选动作的方式进行了优化，值迭代针对问题2通过取最大动作值函数的方式进行了优化。 策略迭代 Policy Iteration动作是通过策略产生的，因此势必需要对初始策略（GridWorld中的完全随机策略）进行替换，以达到更改动作选取概率的目的。 既然要在不同的阶段更改动作选择的概率，那么要进行多次策略的更改，随之而来的问题就是： 值函数迭代更新到什么情况下时，开始更新策略 如何更新策略？ 针对第一个问题，我们使用策略评估Policy Evaluation的方式来解决，针对第二个问题，我们使用策略提升Policy Improvation的方式来解决，最终当新策略与旧策略相同时，终止迭代，得到最优策略。 \pi_{0} \xrightarrow{E} v_{\pi_{0}} \xrightarrow{I} \pi_{1} \xrightarrow{E} v_{\pi_{1}} \xrightarrow{I} \pi_{2} \xrightarrow{E} ... \xrightarrow{I} \pi_{\ast} \xrightarrow{E} v_{\pi_{\ast}}伪代码 策略评估 Policy Evaluation问题：值函数迭代更新到什么情况下时，开始更新策略 答：设置更新幅度阈值$\theta$，当sweep(横扫)一遍状态空间计算$V(S)$时，与上次更新时的$V(S)$相比较，如果最大的更新幅度小于阈值$\theta$，即$\Delta \lt \theta$，则认为策略评估已经完成，开始进行策略更新 特点：使用了贝尔曼期望方程-$v_{\pi}(s)$ 注：策略评估指的不是评估一个策略的好坏，而是在当前策略下评估所有的状态值，使状态值表格近似收敛。 策略提升 Policy Improvement问题：如何更新策略？ 答：根据策略评估步骤得到的值函数$V(S)$，计算$Q(S,A)$表格，选取每个状态下使动作值函数最大的动作作为新的动作集，每个动作的选择概率相同，接着进行策略评估。 特点：使用了贝尔曼期望方程-$q_{\pi}(s,a)$ 值迭代 Value Iteration策略迭代的一个缺点是在得到最优策略$\pi_{\ast}$之前，需要多次更新策略，每次更新策略都会引起可选取动作的改变，这会引起在更新完策略后的前几次策略评估中值函数偏差比较大，导致在策略评估过程中需要花费大量的迭代来减小更新幅度$\Delta$，因此需要多次sweep(横扫)$V(S)$来迭代计算。 值迭代的思想是：能不能通过早停的方式，在不更改策略的情况下，直接一次得到最优策略？ 值迭代运用了策略评估、策略迭代的思想，并将它们融合在一起，即不更新策略，直接选择动作值函数$q(s,a)$最大的动作作为状态值$v(s)$，直接迭代出近似最优（早停，$\Delta \lt \theta$即可）状态价值函数$V_{\ast}(S)$，使用贪心策略进而得到最优策略$\pi_{\ast}$。 特点：使用了贝尔曼最优方程-$v_{\ast}(s)，q_{\ast}(s,a)$。 伪代码 PI与VI的比较 相同点： 在$0 \leq \gamma \lt 1$，有限MDPs环境中，两种方式都可以收敛到最优策略$\pi_{\ast}$ 都使用了贝尔曼方程进行状态值函数的迭代 不同点： 收敛方式 策略迭代PI包括策略评估Policy Evaluation和策略提升Policy Improvement，这两部循环迭代至策略收敛 值迭代VI包括找到最优状态值函数和一步提取策略，这两步不需要循环迭代，而是根据最优值函数直接得到最优策略 动作改变方式 策略迭代PI获得新策略$\pi_{new}$后，更改每个状态的可选动作集，多次横扫（遍历）$V(S)$ 值迭代VI过程中不产生策略，不更改每个状态的可选动作集，但是只取每个状态下动作值函数最大的动作作为状态值，一次横扫（遍历）$V(S)$。（这里需要解释一下，虽然循环是多次遍历，但是因为max操作，每次遍历每个状态所选取的动作不一定一样，虽然策略一直是随机策略，没有产生新策略，但是计算过程没有遍历到所有动作，可以隐含的看作是一个新策略，因此每次遍历时这个“隐策略”都会改变，所以称为一次遍历。） 计算方式 策略迭代PI使用贝尔曼期望方程 值迭代VI使用贝尔曼最优方程 Policy方式 策略迭代PI是On-Policy 值迭代VI是Off-Policy 稳定性检查 策略迭代PI中更新策略时进行了策略稳定性检查，判断是否收敛 值迭代VI获得新策略$\pi$时没有进行策略稳定性检查 至于策略迭代PI与值迭代VI的收敛速度，通常情况下，PI的迭代次数更少，VI的运行时间更少。 What is the difference between value iteration and policy iteration? 《Reinforcement Learning : An Introduction 2nd Edition》p77]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强化学习的类别]]></title>
    <url>%2Frl-classification.html</url>
    <content type="text"><![CDATA[本文讲述了强化学习中各种算法、问题的分类规则。 Stationary or not根据环境十分稳定、可以将强化学习问题分为stationary、non-stationary。 如果状态转移和奖励函数是确定的，即选择动作$a$后执行它的结果是确定的，那么这个环境就是stationary。 如果状态转移或奖励函数是不确定的，即选择动作$a$后执行它的结果是不确定的，那么这个环境就是non-stationary。 Model Based-or-Free一直对这个问题的认识不清晰，直到最近（2019年5月12日19:13:53）才有了清晰的认识。 需要注意的是，无论是Model-Based还是Model-Free都不是对强化学习问题的分类，而是对算法的分类。之前一直理解的是状态空间$\mathcal{S}$、动作空间$\mathcal{A}$的都是离散的，转移概率矩阵$\mathcal{P}$是确定的，这样即是Model-Based，如果状态空间$\mathcal{S}$、动作空间$\mathcal{A}$或转移概率矩阵$\mathcal{P}$是不确定的，则是Model-Free，其实这只是对Model的分类，并不是Model-Based与Model-Free的真实含义，Model-Based与Model-Free是对算法求解过程的分类，理解这个可以在阅读国外文献、实验环境时更清晰，提升自己对强化学习算法的理解深度。 Model-Based： 智能体Agent在已知模型（$\mathcal{S,A,R,P}$有限且确定）或者先学习一个模型（使用有监督对状态转移、奖励函数进行学习而得到），并在这个模型中使用planning（预测所有状态转移可能）方法来计算解决方案 Now if we know what all those elements of an MDP are, we can just compute the solution before ever actually executing an action in the environment. In AI, we typically call computing the solution to a decision-making problem before executing an actual decision planning. Some classic planning algorithms for MDPs include Value Iteration, Policy Iteration, and whole lot more. Model-Free: 智能体在模型（$\mathcal{S,A,R,P}$可能确定但没有使用planning方式解决，也可能不确定）中试错，并且使用learning（不预测全部可能性）方法来产生最佳策略 But the RL problem isn’t so kind to us. What makes a problem an RL problem, rather than a planning problem, is the agent does not know all the elements of the MDP, precluding it from being able to plan a solution. Specifically, the agent does not know how the world will change in response to its actions (the transition function TT), nor what immediate reward it will receive for doing so (the reward function RR). The agent will simply have to try taking actions in the environment, observe what happens, and somehow, find a good policy from doing so. 根据Model-Based、Model-Free对算法、解决方法进行分类： Model-Based：DP、Policy Iteration、Value Iteration…… Model-Free：SARSA、Q-Learning、PG…… if you want a way to check if an RL algorithm is model-based or model-free, ask yourself this question: after learning, can the agent make predictions about what the next state and reward will be before it takes each action? If it can, then it’s a model-based RL algorithm. if it cannot, it’s a model-free algorithm. 使用算法学成策略之后，智能体可以在执行动作前判断该动作的后果，即是Model-Based，反之则是Model-Free 根据Model-Based和Model-Free可以将强化学习算法分类，图片摘自OpenAI Spinning Up，如图所示： What is the difference between model-based and model-free reinforcement learning? OpenAI Spinning Up : A Taxonomy of RL Algorithms Policy or Value强化学习的目的是找到最优策略使得累积期望回报最大化，获得最优策略的方法有直接与间接之分。直接获取策略的图示为： 间接获得策略为从值函数中提取最优策略，图示为： 直接获取策略的方式即为Policy-Based，常见的算法有： Policy Gradient PPO SAC …… 间接获得策略的方式即为Value-Based，常见的算法有： SARSA Q-Learning DQN …… On-policy or Off-policy在机器学习中，提到On跟Off这两个词我们最容易想到的是On-line Learning与Off-line Learning，那么强化学习与On-line、Off-line有什么关系呢？ 网上对于On-line Learning与Off-line Learning有不同的解释，按热度排序为下面三种： 对于On-line Learning： 单样本学习，样本用完即丢，样本连续不断输入，非数据集，而是数据流 单样本的（SGD） 单样本或批样本学习，样本连续不断输入，非数据集，而是数据流 相应对于Off-line Learning： 批样本或全样本学习多次，静态样本集 批样本学习 全样本学习，静态数据集 对于这三种方式，强化学习可以怎样融入呢？ 对于第一种，强化学习不属于On-line Learning也不属于Off-line Learning，不属于Off-line Learning是因为样本非静态、非固定，不属于On-line Learning是因为对于Q-Learning、Sarsa、PG、PPO等算法样本用完即丢，对于DQN、TD3等算法样本重复利用。 对于第二种，强化学习包括On-line Learning及On-line Learning 低于第三种，强化学习属于On-line Learning On-policy、Off-policy与On-line、Off-line之间有关系吗？ 好像没有关系。虽然它们都是关于样本进行的划分，不过On-Off line learning针对的是样本的使用，而On-Off policy针对的是样本的生成。 学习On-policy、Off-policy之前首先需要理解什么是行为策略与目标策略。 行为策略$\mathcal{Behavior Policy}$： 采样时间序列$S_{0},A_{0},R_{0},S_{1},A_{1},R_{2},…,S_{n},A_{n},R_{n}$的策略 官话：指导个体产生与环境进行实际交互行为的策略 未必由一个模型表示 目标策略$\mathcal{TargetPolicy}$: 待优化的策略 官话：用来评价状态或行为价值的策略或者待优化的策略称为目标策略 同步策略学习$\mathcal{On-Policy}$: 简言之，边采样边学习 官话：如果个体在学习过程中优化的策略与自己的行为策略是同一个策略时，这种学习方式称为同步策略学习（on-policy learning） 行为策略与目标策略是同一个 异步策略学习$\mathcal{Off-Policy}$: 简言之，你采样我学习 官话：如果个体在学习过程中优化的策略与自己的行为策略是不同的策略时，这种学习方式称为异步策略学习（off-policy learning） 行为策略与目标策略不同，行为策略可能是目标策略的“分身”（双网络结构），或者完全是另一个采样的策略 例如： SARSA Q-learning Choosing A’ π π Updating Q π μ 一个以Q-Learning和Sarsa算法做比较的解释 Stochastic or Deterministic]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[价值与贝尔曼方程]]></title>
    <url>%2F%E4%BB%B7%E5%80%BC%E4%B8%8E%E8%B4%9D%E5%B0%94%E6%9B%BC%E6%96%B9%E7%A8%8B.html</url>
    <content type="text"><![CDATA[价值与贝尔曼方程我们人在做决策的时候往往会判断做这件事的价值和后果，就像失恋了去喝不喝闷酒一样，不同的人有不同的选择，但是选择前肯定会判断这么做能给自己带来什么。 选择去喝酒的人觉得这可以缓解自己的痛苦，这就是判断喝酒这个动作的价值。因为身体原因不选择去喝酒的人觉得喝醉之后身体很不舒服，还会说胡话、闹事，这就是衡量后果、判断喝酒后状态的价值。 在乎过程的会根据动作的价值进行抉择，在乎结果的会根据状态的价值进行抉择。总之，衡量价值，毫无疑问是我们做决策的重要评判标准。 机器也一样，我们想教会机器学会自主决策，必然得让它们有一个价值导向，毕竟它可不会、也决不能像人一样”没有原因呀，就随便选择了一个而已”。 本文介绍了绝大部分强化学习问题及算法中值函数与贝尔曼方程的定义。因为有一些研究探索的，如好奇心、信息熵等方向的算法对值函数的定义有稍许不同。 注：以下公式及推导过程可能与其他博客、论文、书本上有稍许不同，不过都是经过细细分析，一步步推导的，或许有些公式难以理解，但都是尽可能细化每一处细节。使读者可以更清楚地了解每一个值的来龙去脉。 值函数值函数分为状态值函数与动作值函数，分别用来表示状态和状态下执行某动作的好坏程度、优劣程度。 回顾一下回报： \begin{align*} G_{t} &\doteq R_{t+1}+\gamma R_{t+2}+\gamma^{2}R_{t+3}+\gamma^{3}R_{t+4}+...\\ &=R_{t+1}+\gamma (R_{t+2}+\gamma R_{t+3}+\gamma^{2}R_{t+4}+...)\\ &=R_{t+1}+\gamma (R_{t+2}+\gamma (R_{t+3}+\gamma R_{t+4}+...))\\ &=R_{t+1}+\gamma G_{t+1} \end{align*} G_{t}\doteq R_{t+1}+\gamma R_{t+2}+\gamma^{2}R_{t+3}+...=\begin{cases} \sum_{k=0}^{\infty}\gamma^{k}R_{t+k+1}\\ \sum_{k=t+1}^{T}\gamma^{k-t-1}R_{k} \end{cases}回顾一下之前的MDP例子： 将状态用符号表示为 \begin{bmatrix} 玩游戏 & A\\ 语文 & B\\ 数学 & C\\ 英语 & D\\ \mathcal{Pass} & E\\ 睡觉 & F \end{bmatrix}将转移概率矩阵$\mathcal{P}$写成如下形式 A B C D E F Reward -1 -2 -2 -2 10 0 A 0.9 0.1 B 0.5 0.5 C 0.8 0.2 D,0.4 0.2 0.4 0.4 D,0.6 0.6 E 1.0 其中，D状态有两个动作，但是其0.4概率选到的动作并不一定确定地转移到另一个状态，所以将两个动作分开写，其实除了Reward的每一行都是一个$(s,a)$的状态-动作对，但是除了D状态有特殊外，其他状态的转移都是确定的，于是省略了动作。后续将会看到如果根据$(D,0.4)$这个状态-动作对去进行相应的计算。 状态值函数$V(s)$$\pi$策略下$s$状态的价值函数可以表示为$v_{\pi}(s)$，由期望回报表示 v_{\pi}(s) \doteq \mathbb{E}_{\pi}[G_{t}|S_{t}=s] = \mathbb{E}_{\pi}\left [ \sum_{k=0}^{\infty}\gamma^{k}R_{t+k+1}\mid S_{t}=s \right ], \ for \ all \ s\in S有了这个公式，我们能根据上述表格计算出每个状态的价值吗？当然可以，只是很麻烦，如果对于连续状态空间的问题就不只是麻烦的问题，而是不能计算。 为什么呢？因为要求期望需要遍历所有可能性的episode，连续状态空间根本无法遍历所有的情况。 动作值函数$Q(s,a)$动作值函数与状态值函数在公式表示上差别不大，$\pi$策略$s$状态下执行a动作的价值函数可以表示为$Q_{\pi}(s，a)$，由期望回报表示 Q_{\pi}(s,a) \doteq \mathbb{E}_{\pi}[G_{t}|S_{t}=s,A_{t}=a] = \mathbb{E}_{\pi}\left [ \sum_{k=0}^{\infty}\gamma^{k}R_{t+k+1}\mid S_{t}=s,A_{t}=a \right ]贝尔曼方程 贝尔曼方程（Bellman Equation）(百度百科)也被称作动态规划方程（Dynamic Programming Equation），由理查·贝尔曼（Richard Bellman）发现。 贝尔曼方程是动态规划（Dynamic Programming）这些数学最佳化方法能够达到最佳化的必要条件。此方程把“决策问题在特定时间怎么的值”以“来自初始选择的报酬比从初始选择衍生的决策问题的值”的形式表示。借此这个方式把动态最佳化问题变成简单的子问题，而这些子问题遵守从贝尔曼所提出来的“最佳化还原理”。 贝尔曼方程将状态值函数$V(s)$与动作值函数$Q(s,a)$、将当前的值函数与之后状态$V(s‘)$或动作的值函数$Q(s’,a‘)$联系起来。 状态值函数$V(s)$与动作值函数$Q(s,a)$的关系 v_{\pi}(s)=\sum_{a}\pi(a\mid s) q_{\pi}(s,a) q_{\pi}(s,a) = \sum_{s',r}p(s',r \mid s,a)\left[r+\gamma v_{\pi}(s')\right]贝尔曼期望方程状态值函数$V(s)$可以写成如下形式： \begin{align*} v_{\pi}(s) & \doteq \mathbb{E}_{\pi}\left [ G_{t}\mid S_{t}=s \right ]\\ &=\mathbb{E}_{t} \left [R_{t+1}+\gamma G_{t+1} \mid S_{t}=s \right]\\ &=\sum_{a}\pi(a\mid s)\sum_{s'}\sum_{r}p(s',r\mid s,a)\left[r+\gamma \mathbb{E}\left[G_{t+1}\mid S_{t+1}=s' \right]\right]\\ &=\sum_{a}\pi(a\mid s)\sum_{s',r}p(s',r \mid s,a)\left[r+\gamma v_{\pi}(s')\right]\\ &=\sum_{a}\pi(a\mid s) q_{\pi}(s,a) \end{align*}, for \ all \ s\in S 看到没有，此时可以将当前状态的状态值$v_{\pi}(s)$与下一个可到达状态的状态值$v_{\pi}(s’)$联系起来！ 动作值函数$Q_{\pi}(s,a)$也可以进行类似推导： \begin{align*} q_{\pi}(s,a) & \doteq \mathbb{E}_{\pi}\left [ G_{t}\mid S_{t}=s,A_{t}=a \right ]\\ &=\mathbb{E}_{t} \left [R_{t+1}+\gamma G_{t+1} \mid S_{t}=s,A_{t}=a \right]\\ &=\sum_{s',r}p(s',r\mid s,a)\left[r+\gamma \sum_{a'}\pi(a'\mid s') \mathbb{E}\left[G_{t+1}\mid S_{t+1}=s',A_{t+1}=a' \right]\right]\\ &=\sum_{s',r}p(s',r \mid s,a)\left[r+\gamma \sum_{a'}\pi(a'\mid s') q_{\pi}(s',a')\right]\\ &=\sum_{s',r}p(s',r \mid s,a)\left[r+\gamma v_{\pi}(s')\right] \end{align*} 最优值函数解决一个强化学习问题也就是意味着找到一种选择动作的策略能够获得足够多的回报。如果执行每个动作所产生的转移都是确定的（有限MDP），那么能够定义出一个最优策略，如果一个策略$\pi’$的所有状态值函数都大于$\pi$，那么就说策略$\pi’$更好，但不一定是最好的，我们把最优策略用$\pi_{*}$表示。 最优状态值函数： v_{*}(s)=\max_{\pi} v_{\pi}(s)最优动作值函数： q_{*}(s,a)=\max_{\pi} q_{\pi}(s,a)贝尔曼最优方程 \begin{align*} v_{*}(s) &= \max_{a} q_{*}(s,a)\\ &=\max_{a}\mathbb{E}\left[r+\gamma v_{*}(s')\mid s,a\right]\\ &=\max_{a}\sum_{s',r}p(s',r\mid s,a)\left[r+\gamma v_{*}(s')\right] \end{align*} \begin{align*} q_{*}(s,a) &= \mathbb{E}\left[r+\gamma v_{*}(s')\mid s,a\right]\\ &=\mathbb{E}\left[r+\gamma \max_{a'} q_{*}(s',a')\mid s,a\right]\\ &=\sum_{s',r}p(s',r\mid s,a)\left[r+\gamma v_{*}(s')\mid s,a\right]\\ &=\sum_{s',r}p(s',r\mid s,a)\left[r+\gamma \max_{a'}q_{*}(s',a')\right] \end{align*} 虽然我们已经定义出了最优值函数和最优策略，而且理论上也可以直接计算出来。但是通常情况下我们没法得到这么多的计算资源。与此同时内存溢出也是一个很大的问题，因为很多问题的状态数量太多超过存储范围。对于这些情况我们就不能够使用直接存储每个状态的值函数而是必须使用一种更精简的参数型函数表示的方法。 强化学习的框架迫使我们进行近似求解，而且这个框架同时也很容易进行近似，比如对于很多小概率出现的状态，选择最优解和次优解区别不大。 最优策略定义策略之间的偏序关系 \pi \geq \pi' \ if \ v_{\pi}(s) \geq v_{\pi'}(s) \ , \ \forall s那么有如下定理成立： 对任意MDP： 存在最优策略$\pi_{\ast}$，满足$\pi_{\ast} \geq \pi,\forall \pi$ 所有最优策略的状态值函数都等于最优状态值函数$v_{\pi_{\ast}}(s)=v_{\ast}(s)$ 所有最优策略的动作值函数都等于最优动作值函数$q_{\pi_{\ast}}(s,a)=q_{\ast}(s,a)$ 例子对于上述例子和表格，我们来试着计算一下$V(S)、Q(S,A)$。 第一个问题，怎么计算这些值？初始化终态的状态值为0，然后从后向前递归？我们来试一下！ 只初始化终态根据上述公式，设$\gamma =1$： \begin{align*} &v(F)=r=0\\ &q(E，)=1\times (0+v(F))=0\\ &1表示选择这个动作转移至另一个状态的概率\\ &v(E)=1\times q(E,)=0\\ &q(D,0.6)=1\times (10+v(E))=10\\ &q(D,0.4)=0.2\times(-2+v(B))+0.4\times(-2+v(C))+0.4\times(-2+v(D))=\\ &v(D)=0.4\times q(D,0.4)+0.6\times q(D,0.6)=\\ &q(C,0.8)=1\times (-2+v(D))=\\ &q(C,0.2)=1\times (0+v(F))=0\\ &v(C)=0.2\times q(C,0.2)+0.8\times q(C,0.8)=\\ &q(B,0.5_{C})=1\times (-2+v(C))=\\ &q(B,0.5_{A})=1\times (-1+v(A))=\\ &v(B)=0.5\times q(B,0.5_{C})+0.5 \times q(B,0.5_{A})=\\ &q(A,0.9)=1\times (-1+v(A))=\\ &q(A,0.1)=1\times(-2+v(B))=\\ &v(A)=0.1\times q(A,0.1)+0.9\times q(A,0.9)= \end{align*}哎呀，卡住了，解不出来，$v(D)、v(A)、v(B)$互相依赖，解不出来，看来这样计算是行不通了。其实，很多问题中终态都很难定义，更别说使用这种方法了。 初始化全部状态值初始化所有状态的值函数为0，即 v(s)=0,\ for\ all\ s\in S先试验一下$\gamma =0.5$， V和Q，$\gamma =0.5$ 初始化V计算Q 迭代→V→Q 第46轮完全收敛 A 0 …… -2.171 B 0 …… -1.880 C 0 …… 0.651 D 0 …… 5.627 E 0 …… 0 F 0 …… 0 $(A,0.1)\rightarrow B$ 0 …… -2.940 $(A,0.9)\rightarrow A$ 0 …… -2.085 $(B,0.5_{A})\rightarrow A$ 0 …… -2.085 $(B,0.5_{C})\rightarrow C$ 0 …… -1.675 $(C,0.2)\rightarrow F$ 0 …… 0 $(C,0.8)\rightarrow D$ 0 …… 0.814 $(D,0.4)\rightarrow \begin{cases}B,0.2\\C,0.4\\D,0.4\end{cases}$ 0 …… -0.932 $(D,0.6)\rightarrow E$ 0 …… 10 $(E,1.0)\rightarrow F$ 0 …… 0 这是代码计算的结果，接下来我使$\gamma =1$，计算结果如下，每迭代100次输出一下： 可以发现，在700至800次迭代后值函数最终收敛。 如果我将$\gamma $设置为0.1呢？来看一下结果： 仅仅需要十几次就可以迭代至收敛。 如果设置为0呢？会怎么样？看结果： 仅需一次迭代就可以收敛，而且就是转移状态的立即奖励值，这下可以理解$\gamma$为什么表示对未来的看重程度了吧。 一般我们是不会将$\gamma$设置为0的，从这个例子的直观感受也可以得到，就拿$\gamma =0$与$\gamma =0.5来比较$： $\gamma =0$状态值最高的是$v(D)=5.2$，这很容易理解，D状态距离最大奖励值10最近，理应最好，这点与$\gamma =0.5$时相同。 但是对于状态C，$\gamma =0$时认为这个状态最差，$v(C)=-1.6$，$\gamma =0$时认为这个状态次优，$v(C)=0.651$，其实这就是目光短浅与目光长远的不同，$\gamma =0$并没有考虑到其附近状态的临近状态的价值，导致其主观的认为最接近我的都是负的，于是状态肯定差。 对于动作值也是一样，一个认为次优，一个认为最差。 注意：并不是说$\gamma$越接近于1越好，因为在有些问题上，$\gamma=1$时其值函数永远不收敛，必须设置$0 \leq \gamma \lt 1$，值函数才能收敛。为什么呢？试着计算一下$\gamma^{n}$，看看对不同的$\gamma$值，$n$取什么值时结果接近0。 试着计算一下这个例子，红色代表立即奖励，蓝色代表选择动作的概率以及状态转移的概率，小写字母代表动作，大写字母代表状态。 $\gamma =1$时，迭代100W次也不收敛： $\gamma =0.5$时，迭代50多次即可收敛：]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强化学习]]></title>
    <url>%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0.html</url>
    <content type="text"><![CDATA[基础知识 强化学习基本概念 强化学习的类别 强化学习之MDP马尔科夫决策过程 价值与贝尔曼方程 动态规划 Dynamic Programming Monte Carlo and Temporal-Difference SARSA and Q-Learning 论文精读 Energy-Based Hindsight Experience Prioritization Open AI Evolution Strategies as a Scalable Alternative to Reinforcement Learning Hindsight Experience Replay RL^2: Fast Reinforcement Learning via Slow Reinforcement Learning Deep Mind Prioritized Experience Replay Universal Value Function Approximators Asynchronous Methods for Deep Reinforcement Learning 论文浅读 Massively Parallel Methods for Deep Reinforcement Learning Model-Based Reinforcement Learning via Meta-Policy Optimization 相关信息 强化学习的里程碑 学习资源 《Reinforcement Learning : An Introduction 2nd Edition》——Sutton 基础必读 通俗易懂 数学公式很多，虽然很多不太实用，但对理解RL的精髓很有帮助 Reinforcement Learning Course by David Silver, 2015 基础必看，讲述了强化学习的基础算法 有字幕，通俗易懂 有课件Slide OpenAI Spinning Up 深度强化学习 算法很多，解析也很清晰 有代码仓库，可以查看源代码，方便复现 Medium : Reinforcement Learning 博文质量不错，内容涵盖基础与进阶 缺点：更新少 StackOverflow : Reinforcement Learning 进阶必备 多看多交流可以加深自己的理解]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强化学习之MDP马尔科夫决策过程]]></title>
    <url>%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BMDP%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B.html</url>
    <content type="text"><![CDATA[强化学习之MDP马尔科夫决策过程每每提到强化学习，最先接触的理论肯定是马尔科夫决策过程（MDP，Markov Decision Process），为什么总提到MDP呢？并不是只有我一个人有这个疑问。 百度上没有人提出这样的问题，可能是大家理解得都比较透彻吧，于是在Google查到相关提问和解释。 What is the relationship between Markov Decision Processes and Reinforcement Learning? In Reinforcement Learning (RL), the problem to resolve is described as a Markov Decision Process (MDP). Theoretical results in RL rely on the MDP description being a correct match to the problem. If your problem is well described as a MDP, then RL may be a good framework to use to find solutions. That does not mean you need to fully describe the MDP (all the transition probabilities), just that you expect an MDP model could be made or discovered. Conversely, if you cannot map your problem onto a MDP, then the theory behind RL makes no guarantees of any useful result. One key factor that affects how well RL will work is that the states should have the Markov property - that the value of the current state is enough knowledge to fix immediate transition probabilities and immediate rewards following an action choice. Again you don’t need to know in advance what those are, just that this relationship is expected to be reliable and stable. If it is not reliable, you may have a POMDP. If it is not stable, you may have a non-stationary problem. In either case, if the difference from a more strictly defined MDP is small enough, you may still get away with using RL techniques or need to adapt them slightly. The general relationship between RL and MDP is that RL is a framework for solving problems that can be expressed as MDPs. MDP是当前强化学习理论推导的基石，对强化学习来说，一般以马尔科夫决策过程作为形式化问题的手段。也就是说，对于目前的绝大部分强化学习算法，只有可以将问题抽象为MDP的才可以确保算法的性能（收敛性，效果等），对于违背MDP的问题并不一定确保算法有效，因为其数学公式都是基于MDP来进行推导的。 马尔科夫性 马尔科夫性质（英语：Markov property）是概率论中的一个概念，因为俄国数学家安德雷·马尔科夫得名。当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态；换句话说，在给定现在状态时，它与过去状态（即该过程的历史路径）是条件独立的，那么此随机过程即具有马尔科夫性质。马尔科夫性-百度百科 马尔科夫性，也就是无后效性：某阶段的状态一旦确定，则此后过程的演变不再受此前各状态及决策的影响。也就是说，未来与过去无关。 具体地说，如果一个问题被划分各个阶段之后，阶段$k$中的状态只能通过阶段$k+1$中的状态通过状态转移方程得来，与其他状态没有关系，特别是与未发生的状态没有关系，这就是无后效性。 公式描述： P[S_{t+1}|S_{t}]=P[S_{t+1}|S_{1},...,S_{t}]强化学习问题中的状态也符合马尔科夫性，即在当前状态$s_{t}$下执行动作$a_{t}$并转移至下一个状态$s_{t+1}$，而不需要考虑之前的状态$s_{t-1},…,s_{1}$。 举一个不恰当的例子： 假设天气预测符合马尔科夫性，如果以每天表示为一种状态，即周一、周二到周日。今天（5月8日，周三）天气为晴，明天（周四）会不会下雨只与今天的天气有关，而与之前周一、周二的天气状况无关。如果以时间节点表示为一种状态，即2点、5点、8点等，如图2点的温度为15.8°C,那么下个时间点5点的气温如何只与2点的温度有关系。 强化学习中默认状态的转移是符合马尔科夫性质的，状态具体是什么，需要根据不同的问题进行不同的设定。 马尔科夫过程马尔科夫过程是随机过程的一种，什么是随机过程呢？简单来说，一个商店从早上营业到晚上打烊这段时间，根据每个时间点店内顾客的人数所组成的序列就是随机过程。随机过程根据时间节点$T_{t}$取到的值是一个变量。 马尔科夫过程是满足马尔科夫性的随机过程，它由二元组$M=(S,P)$组成，且满足： S是有限状态集合 P是状态转移概率矩阵 状态与状态之间的转换过程即为马尔科夫过程。虽然我们可能不知道P的具体值到底是什么，但是通常我们假设P是存在的（转移概率存在，如果是确定的，无非就是概率为1），而且是稳定的（意思是从状态A到其他状态的转移虽然符合某个分布，但是其转移到某个状态的概率是确定的，不随时间变化的）。 这里说的有限二字我有自己的理解，在最开始的强化学习研究中，解决的都是表格式的问题，也就是状态的数量是有限可取的，但是后续强化学习研究的也有连续状态空间的问题，算法如DQN,PG,PPO等。状态的数量并不是有限的，但是其向量维度则是固定的、有限的，而且也同样符合马尔科夫性质，因此我认为这里定义的有限并不是说状态数量有限，而是状态维度有限。因为好像没有无限马尔科夫的叫法，所以姑且这么解释一下。 马尔科夫过程有如下分类： 状态转移矩阵状态转移矩阵由许多状态转移概率组成，状态转移概率是指从一个马尔科夫状态$s$转移到下一个状态$s’$的概率。 公示表示： \mathcal{P}_{ss'}=\mathbb{P}[S_{t+1}=s'|S_{t}=s]等同于： \mathcal{P}(s'|s)=\mathbb{P}[S_{t+1}=s'|S_{t}=s]假设有1到n个状态，将所有的状态从上到下、从左到右排列，组成一个$n \times n$的矩阵，那么其状态转移矩阵如下所示： \mathcal{P}= \begin{bmatrix} \mathcal{P}_{11} & \cdots & \mathcal{P}_{1n} \\ \vdots & \ddots & \vdots \\ \mathcal{P}_{n1} & \cdots & \mathcal{P}_{nn} \\ \end{bmatrix}其中，每行元素相加等于1，每列元素相加等于1，矩阵的总和为状态的数量n。 对于可数状态，$\sum_{s’=1}^{n}\mathcal{P}(s’|s)=1$ sum(\mathcal{P}) = \sum_{s'=1}^{n}\sum_{s=1}^{n}\mathcal{P}_{ss'} = n对于不可数状态（连续状态),$\int_{s’}\mathcal{P}(s’|s)=1$ sum(\mathcal{P}) = \int_{s'}\int_{s}\mathcal{P}_{ss'} = n举一个马尔科夫过程的例子: 假设一个学生，他目前在学习语文科目，那么他接下来进行的活动过程如下图所示，游戏的吸引力很大，所以他有50%的概率在学完语文去玩游戏，并且很容易沉迷其中，图示玩游戏这个循环有90%的可能性，他还可以选择学习其他科目或者去睡觉，最终学习结束之后是否能通过考试也是有一定的概率的，这些状态之间转移的概率即为状态转移概率。 如果把例子中的各项状态用字母表示，将其表示为： \begin{bmatrix} 玩游戏 & A\\ 语文 & B\\ 数学 & C\\ 英语 & D\\ 挂科 & E\\ \mathcal{Pass} & F\\ 睡觉 & G \end{bmatrix}那么其状态转移矩阵$\mathcal{P}$可以表示成： \begin{array}{lc} \mbox{}& \begin{array}{cc}A & B & C & D & E & F & G \end{array}\\ \begin{array}{c}A\\B\\C\\D\\E\\F\\G\end{array}& \left[\begin{array}{cc} 0.9&0.1\\ 0.5& &0.5\\ & & &0.8& & &0.2\\ &&&&0.4&0.6&\\ &0.2&0.4&0.4&&&\\ &&&&&&1\\ &&&&&&& \end{array}\right] \end{array}马尔科夫链与EpisodeEpisode可以翻译为片段、情节、回合等，在强化学习问题中，一个Episode就是一个马尔科夫链，根据状态转移矩阵可以得到许多不同的episode，也就是多个马尔科夫链。 强化学习问题分两种： 如果一个任务总能达到终态，结束任务或者开启下一轮任务，那么这个任务就被称为回合任务，也就是episode任务。例如，让一个智能体学习如何下围棋，围棋棋盘只有那么大，游戏定会终局，所以是一个回合式任务。 如果一个任务可以无限持续下去，永远不会结束，即永远在训练当中，那么这个任务就被称为连续性任务。例如，教会一辆车能够进行自动驾驶就是一个连续性任务，不要钻牛角尖说能源会耗尽，车子会磨损，我们只聚焦问题与环境本身，不涉及其他非稳定因素。 在上边举的例子中就是一个回合式任务，因为无论这个序列有多长，最终都会达到终态-“睡觉”。 根据上述例子我们可能采样出如下episode： $B-C-D-E-C-G$，即“学语文→数学→英语→考试没通过,挂科→继续学数学→睡觉” $B-A-A-…-A-B-C-G$，即“学语文→玩王者荣耀→玩刺激战场→玩OverCooker→玩守望先锋→玩英雄联盟→玩CS:GO→…→看一会儿数学→睡觉”。（仿佛就是我自己嘛！） 马尔科夫奖励过程马尔科夫过程（Markov Process）主要描述的是状态之间的转移关系，在各个状态的转移过程中赋予不同的奖励值就得到了马尔科夫奖励过程。 定义：马尔科夫奖励过程（Markov Reward Process, MRP）由一个四元组组成$(S,P,R,\gamma)$ $S$代表了状态的集合(也是维度有限的) $P$描述了状态转移矩阵$\mathcal{P}_{ss’}=\mathbb{P}[S_{t+1}=s’|S_{t}=s]$ $R$表示奖励函数，$R(s)$描述了在状态$s$下的期望(立即)奖励，$\mathcal{R}(s)=\mathbb{E}[R_{t+1}|S_{t}=s]$ $\gamma$表示衰减因子,即discounted factor,$\gamma\in[0,1]$ $\gamma$是用来计算累计奖励回报的,表示我们有多看中现在或者未来,为什么这么说呢?假设我们现在要计算一个episode始态$S_{0}$的奖励值$V(S_{0})$,不涉及具体公式推导的说,我们应该把$S_{0}$状态后续的奖励全部加和,这样就得到了对始态$S_{0}$的值估计,这些后续奖励的值的权重都是1,或者说此时$\gamma=1$,但是当前状态对很多步之后的状态未必影响很大,我们这样计算过来并不能完全表示一个状态的值,那么我们应当顺势减少距离远的状态的权重,此时$\gamma\lt1$ 当$\gamma=0$时,状态$S$的值完全由其转移的期望立即奖励表示,即一点都不关心未来 当$\gamma=1$时,状态$S$的值由以当前状态为始态,运行至终态所得到的所有立即奖励加和的值表示,即未来与现在同等重要 当$0 \lt\gamma \lt1$时,状态$S$的值是前两个模式的trade-off,即对未来看重的程度由$\gamma$决定 这只是我们的直观感受,其实是为了数学便利（虽然我也不知道具体哪里提高了数学便利，但是在有些情况下会使值函数更快迭代收敛这是真的）。 注：也有很多地方将MRP表示为三元组，即去掉$\gamma$，但这不影响我们对这个过程的理解，下边的MDP也是一样，无论是三元组、四元组、还是五元组，只要能描述过程的性质就可以。 将上述马尔科夫过程的例子升级为马尔科夫奖励过程如下图所示: 奖励值定义为: \begin{bmatrix} 玩游戏 & A & -1\\ 语文 & B & -2\\ 数学 & C & -2\\ 英语 & D & -2\\ 挂科 & E & -5\\ \mathcal{Pass} & F & 10\\ 睡觉 & G & 0 \end{bmatrix}这么定义奖励并没有什么复杂的含义,在这个例子中就拿身心愉悦程度来定义吧,学习固然是枯燥无味的,所以给予负奖励-2,玩游戏虽然会心情放松,但是始终面临着考试的压力,其实并不轻松,所以给予负奖励-1,挂科最痛苦为-5,考试全pass最开心为+10。 在马尔科夫过程中的状态转移加入相应的奖励值即为马尔科夫奖励过程。 马尔科夫决策过程马尔科夫决策过程(Markov Decision Process, MDP)相比马尔科夫奖励过程多了一个动作$A$,它可以用一个五元组$(S,A,P,R,\gamma)$表示: $S$代表了状态的集合(也是维度有限的) $A$代表了决策过程中动作的集合(维度有限的) $P$描述了状态转移矩阵$\mathcal{P}_{ss’}^{a}=\mathbb{P}[S_{t+1}=s’|S_{t}=s,A_{t}=a]$ $R$表示奖励函数，$R(s)$描述了在状态$s$下执行某动作的期望(立即)奖励，$\mathcal{R}(s,a)=\mathbb{E}[R_{t+1}|S_{t}=s,A_{t}=a]$ $\gamma$表示衰减因子,即discounted factor,$\gamma\in[0,1]$ MDPs是一个从交互中达成目标的强化学习问题的一个直接的框架。学习者和决策者叫做Agent。Agent进行交互的其它一切Agent之外的东西都叫做环境。Agent不断的选择动作，而环境也给出相应的反应，并且向Agent表现出新的状态。环境同时也给出一个数值作为反馈。Agent的目标就是通过选择不同的Action来最大化这个反馈值。 强化学习所研究的内容就是得到一个状态$S$到动作$A$的映射关系,因此策略Policy可以表示成 \pi(a|s)=p(A_{t}=a|S_{t}=s) 注意:你可能会认为,在马尔科夫奖励过程(MRP)中没有定义动作,但是其实是包含动作的,因为每个状态有多个转移的下一状态,其实就是多个动作嘛！ 很多文章会将有限MDP分开来讲，有限MDP即状态、动作和奖励值都只有有限个元素，对于有限MDP最优策略有唯一解，但是现实世界中任务复杂，因此大多数深度强化学习算法并不局限于解决有限MDP问题，因此本文不将MDP分情况来讲，即默认基于MDP的最优策略至少有一个解。 没错,的确是这样的,MRP中也包含动作,但是我们并不关心,为什么这么说呢?因为就算每个状态可以执行多个动作,但是其每个动作所能转移到的状态是确定的,不确定的只是动作的选择,而不是动作的转移,而MDP中不确定的却是动作的转移,即执行动作所转移的下一状态是有一定概率的.什么意思呢?拿之前MRP的例子来说,语文状态有两个状态可以转移,数学和玩游戏,概率分别是0.5,但是当确定一个转移方向的时候(图中的箭头),其转移结果是确定的,获得的奖励也是确定的,但是在MDP中,执行动作导致转移的结果都未必是确定的.需要注意的是,MRP是属于MDP的,MDP执行动作并不一定必须是随机的. 接下来,我们将MRP的例子转换至MDP, 为了方便理解而又不增加示例的复杂性,不妨将”挂科”这个状态看作是一个动作,因为这个节点正巧入度为1,姑且就认为从英语到挂科的这个箭头是英语状态所能执行的动作.如图所示: 比较两个图可以发现区别,我把这个不确定的动作标为实心黑圆圈,这位刻苦的同学在学习完英语之后还想继续学习,但是他感觉三门科目都差不多了,于是他也很迷茫,他执行”学习”这个动作时的转移状态有三种:学语文、学数学、学英语.概率分别是:0.2、0.4,、0.4.这下就明白为什么我们要在MDP中加入动作$A$了吧,如果还不明白,请接着看下边的内容. 顺便说一下,这个时候的转移矩阵已经不是简单的二维了,当然也可以用二维来表示,假设总共有$n$个状态,每个状态有$m$个动作,那么其行数为$n\times m$,即遍历所有的状态和动作,得到$n \times m$个状态-动作对$(s,a)$,其列数还是$n$.当然,也可以用一个三维tensor来表示,行和列都是$n$,第三维深度为$m$,很好理解. 网上有写MDP在给定策略下会退化为MRP,我对此不置可否,认为此种说法不够严谨,因为即使说在某状态s下选择的动作a是确定的,并不意味着其转移结果是确定的. 回报 Return在强化学习问题中，总是提到回报二字，论文中出现Return或者Discounted Return，我们已经知道奖励是什么，奖励就是转移到某个状态或者执行了某个动作之后转移至某个状态所获得的值$r$. 回报就是由某时刻$t$之后决策序列所获得的奖励值经过一定规则计算出来的数值. 公式描述: G_{t}\doteq R_{t+1}+R_{t+2}+R_{t+3}+...+R_{t}.其中,$T$表示一个episode达到终态的时间点. 像之前介绍的一样,我们可能对未来有不同的看重程度,于是引入折扣因子$\gamma$的回报表示为: G_{t}\doteq R_{t+1}+\gamma R_{t+2}+\gamma^{2}R_{t+3}+...=\begin{cases} \sum_{k=0}^{\infty}\gamma^{k}R_{t+k+1}\\ \sum_{k=t+1}^{T}\gamma^{k-t-1}R_{k} \end{cases}其中,$ 0\leq\gamma \leq1$ 可以推出回报有如下形式: \begin{align*} G_{t} &\doteq R_{t+1}+\gamma R_{t+2}+\gamma^{2}R_{t+3}+\gamma^{3}R_{t+4}+...\\ &=R_{t+1}+\gamma (R_{t+2}+\gamma R_{t+3}+\gamma^{2}R_{t+4}+...)\\ &=R_{t+1}+\gamma (R_{t+2}+\gamma (R_{t+3}+\gamma R_{t+4}+...))\\ &=R_{t+1}+\gamma G_{t+1} \end{align*}策略 Policy我们一般使用$\pi$来表示一个策略,使用$\pi(a|s)$来表示某状态$s$采取动作$a$的概率,公示表示为: \pi(a|s)=P(A_{t}=a|S_{t}=s)策略完整定义了智能体在所有状态下的所有行为和其概率. 给定一个MDP和一个策略$\pi$,采样的状态序列 S_{0},S_{1},S_{2},...,S_{n},...是一个马尔科夫过程$\lt S,P \gt ^{\pi}$, 采样的状态、奖励序列 (S_{0},R_{0}),(S_{1},R_{1}),(S_{2},R_{2}),...,(S_{n},R_{n}),...是一个马尔科夫奖励过程$ \lt S,P,R,\gamma \gt^{\pi}$, 采样的状态、动作、奖励序列 (S_{0},A_{0},R_{0}),(S_{1},A_{1},R_{1}),(S_{2},A_{2},R_{2}),...,(S_{n},A_{n},R_{n}),...是一个马尔科夫决策过程$ \lt S,A^{\pi},P,R,\gamma \gt^{\pi}$. 注意:在编程时一般以四元组$(s,a,r,s’)$为单位存储”经验” $\pi$策略下$s\rightarrow s’$转移概率由期望计算得$P_{ss’}^{\pi}=\sum_{a\in A}\pi(a|s)P_{ss’}^{a}$,$s$状态下的期望立即奖励为$R_{s}^{\pi}=\sum_{a\in A}\pi(a|s)R_{s}^{a}$. 上述例子中 \begin{align*} R_{英语}&=\sum_{a\in A}\pi(a|英语)R_{英语}^{a}\\ &=0.2\times-2+0.4\times-2+0.4\times-2\\ &=-2 \end{align*}状态转移概率可以描述为：在执行策略$\pi$时，状态从$s$转移至$s’$的概率等于执行该状态下所有行为的概率与对应行为能使状态从$s$转移至$s’$的概率的乘积的和。 奖励函数可以描述为：在执行策略$\pi$时获得的奖励等于执行该状态下所有行为的概率与对应行为产生的即时奖励的乘积的和。 强化学习的目标就是最大化期望回报,相应的结果就是找到从状态空间$S$映射到动作空间$A$的最优策略,重点是,如何建立回报与策略之间的联系呢?]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强化学习的里程碑]]></title>
    <url>%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%87%8C%E7%A8%8B%E7%A2%91.html</url>
    <content type="text"><![CDATA[强化学习的里程碑 Alpha Go 阿尔法围棋（AlphaGo）是第一个击败人类职业围棋选手、第一个战胜围棋世界冠军的人工智能机器人，由谷歌（Google）旗下DeepMind公司戴密斯·哈萨比斯领衔的团队开发。其主要工作原理是“深度学习”。 2016年3月，阿尔法围棋与围棋世界冠军、职业九段棋手李世石进行围棋人机大战，以4比1的总比分获胜； 2016年末2017年初，该程序在中国棋类网站上以“大师”（Master）为注册账号与中日韩数十位围棋高手进行快棋对决，连续60局无一败绩； 2017年5月，在中国乌镇围棋峰会上，它与排名世界第一的世界围棋冠军柯洁对战，以3比0的总比分获胜。围棋界公认阿尔法围棋的棋力已经超过人类职业围棋顶尖水平，在GoRatings网站公布的世界职业围棋排名中，其等级分曾超过排名人类第一的棋手柯洁。 2017年5月27日，在柯洁与阿尔法围棋的人机大战之后，阿尔法围棋团队宣布阿尔法围棋将不再参加围棋比赛。 2017年10月18日，DeepMind团队公布了最强版阿尔法围棋，代号AlphaGo Zero。 2016年3月机器学习一个重要的时间就是：名为AlphaGo的计算机程序打败了围棋世界冠军李世石，比分4：1。按理来说我们对机器在某项比赛、某些运动中击败人类顶尖选手不会感到大惊小怪，最著名的就是97年IBM的“深蓝（Deep Blue）”计算机程序打败了世界象棋冠军Garry Kasparov。 机器同样是使用强大的算力以数倍、数十倍、数百倍的训练时间去击败人类（通常人类训练十年的时间，机器可以模拟训练几百年），为什么Alpha Go的取胜这么重要、这么引人关注（世界各地媒体疯狂报道，一股狂潮如炒作一般）呢？ 原因有两个： AlphaGo解决的围棋问题比之前的都要复杂，西洋双陆棋只有$10^{20}$种不同的“棋位”空间配置，深蓝打败人类的国际象棋有$10^{43}$种不同的“棋位”空间配置，而围棋却有$10^{170}$种不同的“棋位”空间配置，这种量级的数字人类已经无法处理（意思是对于这么多种不同的状态，就是目前算力最强的计算机也无能为力）。举个例子，$10^{170}$这个数字比宇宙中存在的原子数还多。为什么AlphaGo可以在围棋上击败人类就如此重要呢？因为机器如果可以解决这个大的状态空间的问题，那么在机器学习也应该能解决很复杂的现实世界中的问题。这意味着机器真正融入我们的劳动力市场，为我们的日常生活提供便利的日子已经不远啦（真的吗？）！ AlphaGo解决的围棋问题不可能通过纯粹的、暴力计算的方式来学习出很好的模型，这就需要为AlphaGo设计一个更加“智能、聪明”的算法。AlphaGo引起热潮的另一个原因就是，其训练算法是一个通用算法，而不是一个专门为解决某项任务特别设计的算法，这与97年IBM的深蓝计算机程序完全不同，因为深蓝只能用于学习下国际象棋，在中国象棋中就不适于训练。此前，AlphaGo的前身已经能够在Atari 49个不同规则、不同游戏模式中使用相同的通用训练算法训练出比人类还厉害的模型，AlphaGo的成功意味着不仅在虚拟环境可以使用这一套学习方法训练模型，而且可以在不同的现实世界问题中使用这一套学习方法、代码结构。 有能力解决状态空间非常大的问题和通用学习算法是使AlphaGo警报一时的两个主要原因，这也解释了为什么这场比赛在媒体上引起了轰动。有些人认为李世石的失败是机器占据人类劳动力市场的先兆，也有些人认为这预示着人工智能迎来了黄金时代，实际上我们距离真正的人工智能还有很长的路要走，就算机器可以在某项非常复杂的任务中超过人类的表现能力，其也没有真正的思维方式，不会进行思考，说到底也只是曲线的拟合罢了，但是，只有基础做好了，才能向上研究人工智能。 构建AlphaGo和其前身（应用于Atari游戏）的学习算法的设计思路、计算架构在一系列论文和视频中都可以获得，而没有被Google（收购了英国公司DeepMind）私藏。为什么他不私藏呢？这么厉害的代码、设计思路没必要公开出来嘛，因为Google想把自己打造为基于云的机器学习和大数据的领导者，而它在2016年是全球第三大云服务提供商，排在微软和亚马逊之后，它需要把客户从其他平台引流到自己的平台上。由此可见，大公司们之间的竞争反而可以使我们平民获益。 The Algorithm Behind the Curtain: How DeepMind Built a Machine that Beat a Go Master (1 of 5)]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[conda环境和pip包的转移]]></title>
    <url>%2Fconda%E7%8E%AF%E5%A2%83%E5%92%8Cpip%E5%8C%85%E7%9A%84%E8%BD%AC%E7%A7%BB.html</url>
    <content type="text"><![CDATA[本文记录了如何导出、导入自己的conda环境，对于pip安装的包如何导出、导入。 Conda 环境 激活环境conda activate [env_name] 导出环境conda env export &gt; [env_filename].yaml当前环境将被保存在定义的.yaml文件中 导入环境conda env create -f [env_filename].yaml移植过来的conda环境只安装了原环境中使用conda install等命令安装的包, 使用pip命令安装的包需要重新安装 pip包 导出pip freeze &gt; requirements.txt 导入pip install -r requirements.txt]]></content>
      <categories>
        <category>Conda</category>
      </categories>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强化学习基本概念]]></title>
    <url>%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</url>
    <content type="text"><![CDATA[强化学习基本概念学习了这么久的强化学习, 不做笔记总是会忘记, 于是写在博客里方便自己复习, 也与同路人分享. 强化学习是什么?强化学习是什么? 它的英文名字是Reinforcement Learning, 和Machine Learning一样, 都是以‘ing’结尾的. 它是一个问题、一组解决这个问题的方案以及探求这些解决方案的方法. 对于问题和方法一定要有清晰的认识, 很多人在学习强化学习时遇到的各种困惑与不解都是因为不能清晰的认识问题和方法的区别和联系. 强化学习与有监督学习(supervised learning)不同. 有监督学习是目前机器学习领域研究最多的方向, 它从由经验丰富的、学识渊博的专家(监督者)提供一系列带有标签(如每个样本被正确分类的类别)的样本数据中进行学习, 这种方法通常被用于分类问题. 有监督学习的目标是当给定一个没有在训练样本集出现的数据时, 可以准确推断出它的标签/类别. 这种有监督学习非常重要而且有用, 但是它没有能力从交互中进行学习, 而强化学习在智能体与环境进行交互的过程中进行学习. 为什么有监督学习不能从交互中学习呢? 因为有监督学习需要的近乎完全的样本以及其准确的信息都是在交互问题中很难获得的(不现实的). 在未知的交互场景中, 我们往往只能根据智能体的经验进行学习. 强化学习与无监督学习(unsupervised learning)也是不同的. 无监督学习通常被用于发现无标签样本集的隐藏结构. 我们一般任务机器学习只分为有、无监督学习两种, 而且将强化学习分为无监督学习一类. 但其实强化学习与无监督学习有本质的区别. 强化学习的目的是最大化可获得的奖励值, 而无监督学习是发现隐藏结构. 当然, 如果在强化学习问题中可以发现其样本内的隐藏结构, 这对于强化学习肯定是很有帮助的, 但是仅仅这些隐藏结构并不能处理强化学习最大化奖励值方法的问题. 因此, 我们通常将强化学习归为机器学习的第三个类别, 与有、无监督学习并列. 注: 在强化学习问题中, 任何可以反映当前动作所带来的影响的元素都可以被理解为奖励值.(个人见解) Reinforcement learning is learning what to do——how to map situations to actions——so as to maxmize a numerical reward signal. ——《Reinforcement Learning: An Introduction》 强化学习学习的是从状态s到要执行的最优动作a之间的映射关系, 也就是找到一个策略(函数/逻辑规则)使得在给定状态下通过该策略所产生的决策可以最终带来最大的回报. 学习者不被告知应该采取什么动作, 而是通过训练使它们发现采取什么样的动作可以产生最高的奖励值. 这与婴儿学习的方式很像, 你可能会说:”瞎讲, 婴儿可以模仿你的动作进行学习.”. 但你要知道, 当你对婴儿的动作进行批评(吵)和奖励(笑)时, 这就已经是一个强化学习的过程了. 强化学习的两个要素强化学习必不可少的两个要素是智能体Agent和环境Environment.既然强化学习是在交互过程中进行学习, 那么交互必定是双方或者多方的, 在强化学习问题中, 交互的双方是智能体和环境. 智能体 智能体是环境的观察者 智能体是策略的载体 智能体是动作的执行者 环境 环境是对智能体动作的评判者, 即给出立即奖励 环境是智能体进行运动等行为的基本空间 环境给出当前时刻的观察信息, 供智能体进行采集 强化学习的两个特点 trial-and-error/试错学习智能体在与环境交互的过程中进行学习时, 不会得到任何人为的或者示例的指导(如果进行指导, 则为有监督学习/模仿学习/逆强化学习等), 智能体只能通过在环境中不断地试错, 积累经验, 最终学到可以完成目标并获得最大奖励值的策略. delayed reward/延迟奖励在大多数强化学习问题中, 某一状态s下执行的动作a不仅会影响当前的立即奖励r, 而且还会影响后续的状态序列, 以及后续的奖励值. 当前的立即奖励值并不能反映出在这个动作对(s,a)对整个决策过程的影响, 只有等到这一决策过程结束时, 才能判断其在这个状态序列的奖励(价值), 所以, 延迟奖励也是强化学习过程中的一个特点. 强化学习的难点(Challenge)相比其他学习, 强化学习中的一大难点是探索与利用, 也就是exploration and exploitation, 这个难题已经被数学家研究了几十年了, 但仍然没有解决. 为了获得尽量多的奖励, 智能体需要根据过去学习的经验选择产生立即奖励值最高的动作, 但是给定状态下可供选择的动作有很多, 有些被执行过, 有些没有被执行过, 为了去发现产生立即奖励值最高的动作, 必须尝试选择之前被选择过动作. 这个问题就出现了, 智能体必须利用它已经探索过的产生大奖励值的动作, 也必须探索未知奖励值的动作(有可能很小)为了以后可以选择更好的动作. 只探索不利用、只利用不探索在强化学习问题中都是独木难支. 在随机任务中, 一个同样的动作往往需要被探索很多次才可能对它的期望奖励值有较准确的估计. 强化学习的四个元素除了智能体与环境两个要素之外, 强化学习系统/框架中还有四个子元素: 策略、奖励机制、值函数、模型(未必有). 策略 Policy策略定义了智能体在当前时刻应该做出的行为. 与人类的刺激-反应机制很像, 策略是从感知到的环境信息到执行的行为之间的映射, 策略是强化学习智能体的核心, 它决定了智能体的行为. 在一般的强化学习问题中, 策略可能是随机的、非确定的, 它通常给出可选择执行的动作的概率或概率分布. 奖励机制 Reward Signal奖励机制定义了强化学习问题的目标, 在交互的每一步, 环境都会向智能体传递一个数字信息, 我们称之为”奖励”. 智能体的唯一目标就是在整个交互过程中最大化总的奖励之和. 因此, 奖励定义了某个动作的好坏(但并不意味着坏的动作在交互过程中是坏的, 其作用由值函数来定义). 类比于我们人类, 奖励就像我们高兴或者痛苦一样, 它们是我们对当前环境-动作的立即反应和评价.奖励机制是智能体更新策略Policy的基础, 如果智能体成功进行了学习, 当在当前策略选择了一个较低回报的动作时, 之后它可能会选择其他动作.通常, 奖励机制由状态s和动作a的随机函数表示R(s,a) 值函数 Value Function立即奖励表示着当前动作或状态带来的立即效果是好是坏, 但是值函数表示这个动作在整个交互过程中扮演的角色是好是坏. 一个状态的值是从该状态开始到交互结束所积累的立即奖励的总和.一个状态可能总是产生很低的立即奖励, 但是它有很高的值, 因为该状态之后的后续状态中会产生很大的立即奖励. 相反也是一样. 类比于我们人类, 立即奖励的高低相当于我们高兴或痛苦, 但是值函数给出的值则表示了在整个事件过程中我们有多高兴或不高兴的深刻判断.引入值函数的唯一目的就是为了训练智能体以获得更大的奖励, 当智能体做决策以及评估决策时, 我们一直关心的都是值函数而不是立即奖励, 对于动作的选择也是基于对值函数的判断/评估. 值比立即奖励更难以确定, 因为立即奖励可以由环境准确的给出, 但是值却需要评估甚至多次评估才可能相对准确(因为有可能交互过程永远不结束, 那么对值的估计会有偏差). 我们希望选择的动作带来最高的值, 而不是最高的立即奖励, 实际上, 几乎所有强化学习算法中最重要的部分就是对于值函数的有效估计方法. 关于值函数估计所扮演的核心角色在近60年被广泛研究. 模型 Model模型是对环境行为的仿真, 我们可以通过模型推断出动作对环境的改变, 给出准确的立即奖励和状态信息. 例如, 给定一个状态和动作, 模型可以预测出下一个要转移的状态以及下一个立即奖励值. 如果模型是确定的, 我们一般使用规划(planning)的方法来选择最优动作, 对于这种方式我们称之为基于模型model-based的方法, 相反, 如果模型是不确定的, 也就是model-free, 我们只能通过试错的方式进行学习并选择动作. 注: 对于什么是model-based和model-free将在以后进行深入讨论. 强化学习的目标与目标识别为了最小化误差损失不同，强化学习的目的是寻到一个策略，使得期望（折扣）奖励最大化。 强化学习的通用符号表示 Notation$←$ 赋值 $\varepsilon$ 在$\varepsilon-greedy$策略中随机选择动作的概率 $\gamma$ 计算总奖励的折扣因子 $\lambda$ 资格迹的衰减率或者GAE的权重因子 $s,s’$ 状态，下一个状态 $a$ 一个动作 $r$ 一个奖励值（标量） $S$ 状态集（不包含终态） $S^{+}$ 状态集（包含终态） $A(s)$ $s$状态下可选择的动作 $R$ 奖励集合 $|S|$ 状态集中的元素数 $t$ 单个时间步 $T$ 一个episode的终态时间点 $A_{t}$ $t$时刻选择的动作 $S_{t}$ $t$时刻所在的状态 $R_{t}$ $t$时刻获得的奖励 $\pi$ 策略（从状态到动作的映射） $\pi(s)$ 在$s$状态下使用$\pi$策略所选择的动作 $\pi(a|s)$ 在$s$状态下使用$\pi$策略选择到动作$a$的概率 $G_{t}$ 以$t$时刻为起始时间点，到终态所能获得的总奖励（回报） $p(s’,r|s,a)$ 在$s$状态执行a动作转移到$s‘$状态并获得奖励值为$r$的概率 $p(s’|s,a)$ 在$s$状态执行$a$动作转移到$s’$状态的概率 $r(s,a)$ 在$s$状态执行$a$动作所获得的期望立即奖励（即时奖励） $r(s,a,s’)$ 在$s$状态执行$a$动作转移到$s’$状态所获得的期望立即奖励 $v_{\pi}(s)$ $\pi$策略下状态$s$的值（以该状态为始态的期望奖励回报） $v_{}(s)$ *最优策略下状态s的值 $q_{\pi}(s,a)$ $\pi$策略下状态-行动对$(s,a)$的值 $q_{}(s,a)$ *最优策略下状态-行动对$(s,a)$的值 $V,V_{t}$ 状态值的矩阵估计，行和列分别是时间点$t$和每个状态的估计值$v_{\pi}$或$v_{*}$ $Q,Q_{t}$ 状态-行动对$(s,a)$的矩阵估计，一般为一个3维矩阵,行、列和深度分别为状态、动作、时间点 $V_{t}(s)$ 状态$s$的期望估计值 $\delta_{t}$ $t$时刻的TD-error时间差分量 $\theta,\theta_{t}$ 目标策略的参数（向量） $\pi(a|s,\theta)$ 目标策略的参数为$\theta$时，在$s$状态选择到$a$动作的概率 $\pi_{\theta}$ 表示参数为$\theta$的策略 $\nabla{\pi(a|s,\theta)}$ $\pi(a|s,\theta)$对于参数$\theta$的偏微分 $J(\theta)$ 参数为$\theta$的策略的性能度量、期望奖励(performance measure) $\nabla{J(\theta)}$ 性能度量对于策略参数$\theta$的偏导数]]></content>
      <categories>
        <category>ReinforcementLearning</category>
      </categories>
      <tags>
        <tag>rl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吴恩达deeplearning.ai课程笔记总结]]></title>
    <url>%2FAnderewNg-deeplearning-note-summary.html</url>
    <content type="text"><![CDATA[在吴恩达机器学习系列课程完结后不久，一位名叫Tess Ferrandez的小姐姐在推特上分享了一套自己的课程笔记，瞬间收获了3k+赞和1k+转发。 不同于满屏公式代码的黑白笔记，这套信息图不仅知识点满满，且行文构图都像插画一样颜值颇高。吴恩达自己也在推特上转发称赞了这一位有诚意的学习者，毕竟他一直倡导学习是一件简单快乐的事情。 Link: 笔记源地址 深度学习介绍 逻辑回归 浅层神经网络 深层神经网络 机器学习应用程序设置 正则化——防止过拟合 优化训练 优化算法 超参数调试 机器学习项目构建 错误分析 训练 vs 验证/测试 失配 扩展学习 卷积基础 Padding 深层 CNN 典型的 CNN 模型 ResNet 实用建议 检测算法 人脸识别 神经风格迁移 循环神经网络 更多 RNN 模型 NLP-词嵌入 词嵌入详解 序列到序列基本模型 序列到序列]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些在Docker中比较难以安装的库(整理)]]></title>
    <url>%2Fsomething-hard-install-docker.html</url>
    <content type="text"><![CDATA[本文记录了一些在Docker中比较难以安装、频繁报错的库，如cuda、cudnn。 前言在配置镜像时, 强烈建议将源更改为国内镜像站, 因为国外有些镜像站链接速度很慢, 更新也很慢, 很多库无法正确安装 我所使用的镜像站为sources.list: 1234567891011121314151617deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 在Dockerfile或者在容器内使用命令12RUN cp /etc/apt/sources.list /etc/apt/sources.list.bakCOPY sources.list /etc/apt/sources.list 将源替换. CUDA 9.0 开发者版dockerfile如下:1234567891011121314FROM nvidia/cuda:9.0-runtime-ubuntu16.04LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;RUN apt-get update &amp;&amp; apt-get install -y --allow-unauthenticated --no-install-recommends \ cuda-libraries-dev-$CUDA_PKG_VERSION \ cuda-nvml-dev-$CUDA_PKG_VERSION \ cuda-minimal-build-$CUDA_PKG_VERSION \ cuda-command-line-tools-$CUDA_PKG_VERSION \ cuda-core-9-0=9.0.176.3-1 \ cuda-cublas-dev-9-0=9.0.176.4-1 \ libnccl-dev=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \ rm -rf /var/lib/apt/lists/*ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs —allow-unauthenticated 这句命令很重要, 不使用的话很有可能安装失败 cudnn 7.0.5 https://developer.nvidia.com/rdp/cudnn-archive 下载cuDNN Libraries for Linux,不要下载 Power 8 把下载好的包上传到FTP服务器, 或者传输到容器内, 或者直接在容器中下载好 cd到包位置 cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz tar -xvf cudnn-9.0-linux-x64-v7.tgz cp include/* /usr/local/cuda-9.0/include cp lib64/* /usr/local/cuda-9.0/lib64 chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn* 这一步如果cuda是base版本,则没有include文件夹,需要手动创建后再执行 export PATH=/usr/local/cuda-9.0/bin:$PATH cd到/usr/local/cuda-9.0/lib64 nano ~/.bashrc,关联环境变量 在最后一行加入export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc ldconfig -v 使用cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2 查看cudnn版本 jemalloc选择安装jemalloc,这个工具可以加速编译,碎片整理,具体请自行谷歌 apt-get install autoconf apt-get install automake apt-get install libtool git clone https://github.com/jemalloc/jemalloc.git cd jemalloc git checkout 4.5.0安装4.5.0版本的jemalloc,5.x版本的有坑,深坑 ./autogen.sh make make install_bin install_include install_lib,之所以不使用make install是因为会报错,如下: Python3.6记得sudo apt-get install software-properties-common add-apt-repository ppa:jonathonf/python-3.6, 按ENTER apt-get update &amp;&amp; apt-get install python3.6 -y 修改系统默认的python版本为3.6 cd /usr/bin, 保险起见,建议分两步 rm python ln -s python3.6m python 如需更新,pip3 install --upgrade pip, 8.1.1-&gt;19.0.3 python -V]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Jupyter Notebook中使用本机的conda环境]]></title>
    <url>%2Fuse-conda-env-in-jupyter.html</url>
    <content type="text"><![CDATA[本文介绍了如何在Jupyter Notebook中使用本机的conda环境进行开发 Jupyter下conda多环境管理1. 手撸命令 在base环境下安装内核管理工具pip install ipykernel 将环境内核添加到jupyter kernel中python -m ipykernel install --user --name [env_name] --display-name &quot;[show name in jupyter]&quot; 查看已在jupyter中创建的虚拟环境内核jupyter kernelspec list 删除内核jupyter kernelspec uninstall [env_name] 2. 使用插件简单粗暴, 在base环境下使用命令conda install nb_conda接下来, 看看jupyter中能不能显示conda环境jupyter notebook在文件内部也可以很方便的切换环境]]></content>
      <categories>
        <category>Conda</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为远程Ubuntu服务器安装图像界面]]></title>
    <url>%2F%E4%B8%BA%E8%BF%9C%E7%A8%8BUbuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%9B%BE%E5%83%8F%E7%95%8C%E9%9D%A2.html</url>
    <content type="text"><![CDATA[为远程服务器Ubuntu系统安装图形界面 资源 X2GO 在服务器上安装X2go服务器 安装这个add-apt-repository命令 apt-get install -y python-software-properties software-properties-common 添加PPA apt-add-repository -y ppa:x2go/stable 更新包列表并安装x2go服务器端 apt-get update apt-get install x2goserver x2goserver-xsession 安装XFCE图像界面在安装XFCE桌面环境时，有可能会出错，原因是perl为系统使用zh_CN.UTF-8，但系统不知道zh_CN.UTF-8是什么东西，所以需要安装一个中文语言，系统就知道zh_CN.UTF-8了，这个时候perl就不会报错了​ - apt-get install language-pack-zh-hans​ - apt-get install xfce4 安装GNOME图像界面apt-get install -y gnome没有测试成功,似乎是不兼容的问题 安装MATE图像界面apt-get install -y mate 安装LXDE图像界面apt-get install -y xorg lxde 重要配置开启远程连接时有可能会出现mesg: ttyname failed: Inappropriate ioctl for device错误，所以需要修改一下文件​ - nano /root/.profile​ - 把mesg n 替换成 tty -s &amp;&amp; mesg n 在客户端上安装X2go客户端MAC 安装Xquartz XQuartz 输入命令 echo &quot;*VT100.translations: #override Meta &lt;KeyPress&gt; V: insert-selection(PRIMARY, CUT_BUFFER0) \n&quot; &gt; ~/.Xdefaults 安装X2Go Client X2Go Client 打开客户端，设置连接 检查客户端设置，确保X11被正确引导 开始连接 连接成功 Windows 安装x2goclient x2goclient 配置好之后连接成功 Linux下各种图像界面测评]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>x2go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建ML-Agents的Docker镜像]]></title>
    <url>%2F%E5%88%9B%E5%BB%BAML-Agents%E7%9A%84Docker%E9%95%9C%E5%83%8F.html</url>
    <content type="text"><![CDATA[创建ML-Agents的Docker镜像 前言 如果需要在镜像中使用GPU训练,可以将Nvidia的官方镜像作为基础镜像,Dockerfile如下:1234567891011121314151617181920212223242526FROM nvidia/cuda:9.0-base-ubuntu16.04LABEL maintainer &quot;NVIDIA CORPORATION &lt;cudatools@nvidia.com&gt;&quot;ENV NCCL_VERSION 2.3.7RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \ apt-utils \ cuda-libraries-$CUDA_PKG_VERSION \ cuda-cublas-9-0=9.0.176.4-1 \ libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \ apt-mark hold libnccl2 &amp;&amp; \ rm -rf /var/lib/apt/lists/*RUN apt-get update &amp;&amp; apt-get install -y openssh-serverRUN apt-get install -y nanoRUN mkdir /var/run/sshdRUN echo &quot;root:1234&quot; | chpasswdRUN sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_configEXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] ML-Agents v0.6.0 环境本机环境 ML-Agents 0.6.0 Windows 10 专业版 docker client version 18.09.0 docker server version 18.09.0 平台 机器学习平台 创建镜像 打开~/ml-agents-0.6.0/目录,看到有一个官方给定的Dockerfile 直接Build,在该目录下运行docker build -t [name]:[tag] .,一定要注意最后的.,很重要 新建一个sources.list文件,为镜像内换源,因为将来有可能需要在容器内安装某些包,有一些国外的资源往往会下载失败,所以需要换源 新建一个sources.list 用文本编辑器打开,写入以下内容 123456789101112131415161718# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 保存退出 新建一个DockerfilePlus,在官方生成的基础镜像上安装一些可以在平台上运行的包,openssh-server,联网工具net-tools,心爱的apt-file等等 新建一个DockerfilePlus 用文本编辑器打开,输入以下内容12345678910111213141516171819202122FROM hub.hoc.ccshu.net/wjs/mlunityv060:v0.1RUN cp /etc/apt/sources.list /etc/apt/sources.list.bakCOPY sources.list /etc/apt/sources.listENV PYTHONPATH /ml-agents:$PYTHONPATHRUN apt-get update &amp;&amp; apt-get install -y \ apt-file \ nano \ net-tools \ iputils-ping \ openssh-server \ apt-utils \ &amp;&amp; rm -rf /var/lib/apt/lists/* \ &amp;&amp; mkdir /var/run/sshd \ &amp;&amp; echo &quot;root:1234&quot; | chpasswd \ &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_configEXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] 在DockerfilePlus所在文件夹下,执行build -t [name]:[tag] -f DockerfilePlus . 为了使用GPU.改写完的Dockerfile如下(不需要看):123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161FROM nvidia/cuda:9.0-base-ubuntu16.04LABEL maintainer &quot;Keavnn &lt;https://stepneverstop.github.io&gt;&quot;ENV NCCL_VERSION 2.3.7RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \ apt-utils \ cuda-libraries-$CUDA_PKG_VERSION \ cuda-cublas-9-0=9.0.176.4-1 \ libnccl2=$NCCL_VERSION-1+cuda9.0 &amp;&amp; \ apt-mark hold libnccl2 &amp;&amp; \ rm -rf /var/lib/apt/lists/*# ensure local python is preferred over distribution pythonENV PATH /usr/local/bin:$PATH# http://bugs.python.org/issue19846# &gt; At the moment, setting &quot;LANG=C&quot; on a Linux system *fundamentally breaks Python 3*, and that&apos;s not OK.ENV LANG C.UTF-8# runtime dependenciesRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \ ca-certificates \ libexpat1 \ libffi6 \ libgdbm3 \ libreadline6 \ libsqlite3-0 \ libssl1.0.0 \ &amp;&amp; rm -rf /var/lib/apt/lists/*ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DENV PYTHON_VERSION 3.6.4RUN set -ex \ &amp;&amp; buildDeps=&quot; \ dpkg-dev \ gcc \ libbz2-dev \ libc6-dev \ libexpat1-dev \ libffi-dev \ libgdbm-dev \ liblzma-dev \ libncursesw5-dev \ libreadline-dev \ libsqlite3-dev \ libssl-dev \ make \ tcl-dev \ tk-dev \ wget \ xz-utils \ zlib1g-dev \# as of Stretch, &quot;gpg&quot; is no longer included by default $(command -v gpg &gt; /dev/null || echo &apos;gnupg dirmngr&apos;) \ &quot; \ &amp;&amp; apt-get update &amp;&amp; apt-get install -y $buildDeps --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/* \ \ &amp;&amp; wget -O python.tar.xz &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz&quot; \ &amp;&amp; wget -O python.tar.xz.asc &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz.asc&quot; \ &amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \ &amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$GPG_KEY&quot; \ &amp;&amp; gpg --batch --verify python.tar.xz.asc python.tar.xz \ &amp;&amp; rm -rf &quot;$GNUPGHOME&quot; python.tar.xz.asc \ &amp;&amp; mkdir -p /usr/src/python \ &amp;&amp; tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \ &amp;&amp; rm python.tar.xz \ \ &amp;&amp; cd /usr/src/python \ &amp;&amp; gnuArch=&quot;$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)&quot; \ &amp;&amp; ./configure \ --build=&quot;$gnuArch&quot; \ --enable-loadable-sqlite-extensions \ --enable-shared \ --with-system-expat \ --with-system-ffi \ --without-ensurepip \ &amp;&amp; make -j &quot;$(nproc)&quot; \ &amp;&amp; make install \ &amp;&amp; ldconfig \ \ &amp;&amp; apt-get purge -y --auto-remove $buildDeps \ \ &amp;&amp; find /usr/local -depth \ \( \ \( -type d -a \( -name test -o -name tests \) \) \ -o \ \( -type f -a \( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \) \) \ \) -exec rm -rf &apos;&#123;&#125;&apos; + \ &amp;&amp; rm -rf /usr/src/python# make some useful symlinks that are expected to existRUN cd /usr/local/bin \ &amp;&amp; ln -s idle3 idle \ &amp;&amp; ln -s pydoc3 pydoc \ &amp;&amp; ln -s python3 python \ &amp;&amp; ln -s python3-config python-config# if this is called &quot;PIP_VERSION&quot;, pip explodes with &quot;ValueError: invalid truth value &apos;&lt;VERSION&gt;&apos;&quot;ENV PYTHON_PIP_VERSION 9.0.3RUN set -ex; \ \ apt-get update; \ apt-get install -y --no-install-recommends wget; \ rm -rf /var/lib/apt/lists/*; \ \ wget -O get-pip.py &apos;https://bootstrap.pypa.io/get-pip.py&apos;; \ \ apt-get purge -y --auto-remove wget; \ \ python get-pip.py \ --disable-pip-version-check \ --no-cache-dir \ &quot;pip==$PYTHON_PIP_VERSION&quot; \ ; \ pip --version; \ \ find /usr/local -depth \ \( \ \( -type d -a \( -name test -o -name tests \) \) \ -o \ \( -type f -a \( -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \) \) \ \) -exec rm -rf &apos;&#123;&#125;&apos; +; \ rm -f get-pip.pyRUN apt-get update &amp;&amp; apt-get -y upgrade# xvfb is used to do CPU based rendering of UnityRUN apt-get install -y xvfbCOPY ml-agents /ml-agentsWORKDIR /ml-agentsRUN pip install .# port 5005 is the port used in in Editor training.EXPOSE 5005RUN cp /etc/apt/sources.list /etc/apt/sources.list.bakCOPY sources.list /etc/apt/sources.listENV PYTHONPATH /ml-agents:$PYTHONPATHRUN apt-get update &amp;&amp; apt-get install -y \ apt-file \ nano \ net-tools \ iputils-ping \ openssh-server \ apt-utils \ &amp;&amp; rm -rf /var/lib/apt/lists/* \ &amp;&amp; mkdir /var/run/sshd \ &amp;&amp; echo &quot;root:1234&quot; | chpasswd \ &amp;&amp; sed -i &apos;s/prohibit-password/yes/g&apos; /etc/ssh/sshd_configEXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] PUSH镜像docker push [name]:[tag] 测试镜像 登录机器学习平台,没有使用平台的可以在本地使用docker run直接开启容器 先测试使用容器的方式 创建容器将要运行和储存的文件夹放在数据卷data下,这个目录要在运行时由--docker-target-name指定 等待容器创建成功 容器创建成功后进入容器 执行mlagents-learn trainer_config.yaml --docker-target-name=data/unity-volume --env=3dball --train --run-id=test --save-freq=5000 | tee /data/unity-volume/log.txt,如果不想在屏幕输出,可以在后边加上&gt;/dev/null 安装Miniconda确保你的安装包放在了data文件夹下apt-get update &amp;&amp; apt-get install bzip2 -y &amp;&amp; cd /data &amp;&amp; bash Miniconda3-latest-Linux-x86_64.sh 一路按回车、yes等等就成功了.如果需要安装到指定目录,在安装过程中会有提示告诉你让你指定安装路径 注意 在学校机器学习平台上使用时,如果是使用容器的方式,那么新开的容器就可以使用conda命令,不存在conda:command not found的错误信息. 但是,如果在平台上以提交任务的形式来使用带conda的镜像所产生的容器时,就算是在镜像中配置了echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc,当提交任务时环境变量中仍然没有~/anaconda3/bin,这个问题目前没有找到比较方便的解决办法,目前所采用的方式是: 在提交任务时, 首先加上命令export PATH=&quot;~/anaconda3/bin:$PATH&quot; &amp;&amp; 接着又实验了一下echo &#39;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&#39; &gt;&gt; /etc/profile, 正常来说, 如果在容器中这样设置环境变量, 等待下次从镜像创建容器时, 这个环境变量一般并不会生效, 但是不知道这样设置对于提交任务方式来说有没有效, 索性试了一下 根据输出日志来看, 这种方式也并没有奏效 当然, 如果觉得上述配置比较麻烦的话,可以使用Dockerfile的ENV命令来设置环境变量, 这样设置99%是不会有问题的 12FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.5ENV PATH /usr/miniconda3/bin:$PATH 实验了一下,结果如下: 表示可以使用conda命令, 但是不能使用conda activate命令激活环境 根据错误信息, 在Dockerfile中写入以下代码也不可行: RUN ln -s /usr/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh 查了一下相关资料,发现在4.5版本的conda是无解的https://github.com/ContinuumIO/docker-images/issues/89 希望4.6版本可以解决吧 更新2019年1月14日14:26:01已解决 4.6版本的确可以解决以提交任务模式运行时的问题, 需要使用命令conda run -n [环境名字] [要执行的命令], 而不是使用conda activate [环境名字]先激活一个环境. 不过, 更新至4.6版本需要相关配置12conda config --add channels conda-canaryconda update conda 我使用Dockerfile来生成镜像, 代码如下:1234FROM hub.hoc.ccshu.net/wjs/mlunityv060:v1.4.6ENV PATH /usr/miniconda3/bin:$PATHRUN conda config --add channels conda-canary &amp;&amp; conda update conda -y 原因是, 使用Dockerfile比较容易设置环境变量, 减少出错]]></content>
      <categories>
        <category>Docker</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>unity</tag>
        <tag>ml-agents</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker常用以及组合命令学习]]></title>
    <url>%2FDocker%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0.html</url>
    <content type="text"><![CDATA[本文记录了使用Docker过程中的一些常用的、复杂的命令。 停止并删除正在运行的容器docker rm $(docker stop $(docker ps -aq)) 查看容器的长IDdocker inspect -f &#39;{?{.ID}}&#39; [name]去掉命令中的?,因为双括号会转义失败 宿主机向容器内传输文件/文件夹docker cp 本地文件路径 ID全称:容器路径 容器传输文件/文件夹到宿主机docker cp ID全称:容器文件路径 本地路径 修改本地已有镜像的名字docker tag [ImageID] [NewImageNmae]:[tag]]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build一个基于Mxnet的Sniper镜像]]></title>
    <url>%2Fcreate-sniper-docker-image.html</url>
    <content type="text"><![CDATA[本文记录了如何在学校机器学习平台上创建一个基于Mxnet的Sniper镜像。 说明由于此镜像是用于学校机器学习平台,所以文中会出现FTP服务器等字眼,其实是在平台上使用镜像创建一个容器时,平台会自动将服务器上我所申请的文件存储区mount到创建的容器,我通过FileZillaFTP工具与在平台申请的文件存储区进行连接​本文教程虽然有了一个FTP过程,但是如果是生成本地镜像,不考虑FTP,无视文中相关部分即可 虽然本文中写了关于压缩的相关内容,但是最终并没有使用压缩,原因是由于压缩后出现未知问题,导致在平台上创建的容器不能使用宿主机的NVIDIA驱动,并不能成功运行Demo 环境本机环境 windows 10 专业版 docker client version 18.09.0 docker server version 18.09.0 FTP工具 FileZilla 平台环境 docker version 17.06.2-ce 镜像环境 python 2.7.12 CUDA version 9.0.176 pip 9.0.3 SNIPER机器学习平台,这是学校资源 一 配置基础镜像从学校机器学习平台上拉取原始镜像,因为这个镜像配好了一些基本的环境,如python2.x,CUDA9.0等等,所以直接使用它们的镜像作为基础镜像比较省心省力docker pull hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh 拉取到镜像之后,可以选择使用Dockerfile来生成我们需要的镜像,但是往往我们需要在镜像中添加许多库/包/插件,而且使用Dockerfile来生成镜像很容易出BUG.当然,最好的方式是使用Dockerfile,前提是你能确保Dockerfile文件中的每一行命令都不会出错.在当前情况下,我选择使用从容器生成镜像的方法,这种方式会使得最终生成的镜像占内存巨大,但是可以在容器内部调试每一步配置过程.使用docker run -itd --name [name] hub.hoc.ccshu.net/ces/deepo:all-py27-jupyter-ssh开启一个容器 使用docker ps -a查看正在运行的容器ID 使用docker exec -it [name] /bin/bash进入容器 在容器中使用cat /etc/issue命令查看容器的操作系统版本 结果输出: Ubuntu 16.04.4 LTS \n \l 安装 apt-file安装apt-file apt-get install apt-file -y 出现错误: 使用apt-get install apt-file -y --fix-missing同样不能解决问题 考虑换源 cp /etc/apt/sources.list /etc/apt/sources.list.bak备份系统原有的源 安装Linux下的文本编辑器nano,执行命令apt-get install nano -y安装nano成功后,执行nano /etc/apt/sources.list修改源文件在打开的文件中,将内容替换为123456789101112131415161718# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 这里使用的源是阿里的镜像站,也可以使用网易163的,源如下:12345678910deb http://mirrors.163.com/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ xenial-backports main restricted universe multiverse 更改好源文件后,执行sudo apt-get update更新源 再次执行apt-get install apt-file -y,可以成功安装apt-file包 之后执行apt-file update更新apt-file cache使用apt-file find [name]可以查找计算机上文件的位置,很方便使用apt-file search [name]可以搜索缺少的库,解决文件缺失依赖选择好自己需要的包,然后使用apt-get install [name]即可 如果需要把镜像上传到云上使用,有可能需要网络服务, 执行apt-get install net-tools安装ifconfig 执行apt-get install iputils-ping安装ping 此时为了避免诸如使用ping [IP]有效,但是ping [HOST]无效的情况,需要使用nano /etc/resolv.conf修改配置文件将namespace后的IP地址更改为8.8.8.8或者4.4.4.4或者使用echo &quot;nameserver 114.114.114.114 &gt; /etc/resolv.conf&quot;也可以退出保存即可 有可能上述修改DNS的方式并不成功,原因是在云上运行容器时,配置文件自动修改,如果发生这种情况,请每次在新开一个容器时,手动修改配置文件的DNS服务器,使其可以使用网络服务 二 安装编译依赖各种包在电脑上空闲的地方,从Github拉取Sniper项目 git clone --recursive https://github.com/mahyarnajibi/SNIPER.git 因为我是在学校机器学习平台上运行docker容器,所以选择直接将clone下的文件上传至容器mount的ftp服务器,使用的软件是FileZilla 上传成功后可以在容器内通过cd /data/[file or folder name]进行访问 如果要在本地镜像内操作的话,也可以直接把本机文件或文件夹拷贝过去docker cp 本地文件路径 ID全称:容器路径 cd /data/SNIPER/SNIPER-mxnetmake USE_CUDA_PATH=/usr/local/cuda-9.0输出信息: 安装 jemalloc选择安装jemalloc,这个工具可以加速编译,碎片整理,具体请自行谷歌 apt-get install autoconf apt-get install automake apt-get install libtool git clone https://github.com/jemalloc/jemalloc.git cd jemalloc git checkout 4.5.0安装4.5.0版本的jemalloc,5.x版本的有坑,深坑 ./autogen.sh make make install_bin install_include install_lib,之所以不使用make install是因为会报错,如下: 切换至SNIPER-mxnet文件夹,再次make USE_CUDA_PATH=/usr/local/cuda-9.0虽然可以编译,但是有以下信息:强迫症必须搞定它,果断ctrl+c终止编译 安装 pkg-config 打开https://pkg-config.freedesktop.org/releases/ 下载最新的,现在看到的是pkg-config-0.29.2.tar.gz 下载好之后,通过FileZilla等工具传输到FTP服务器 在容器内cd到压缩包位置 tar -xf pkg-config-0.29.2.tar.gz cd pkg-config-0.29.2 ./configure --with-internal-glib,注意,中间是一个空格,非常关键 make &amp;&amp; make install 再次make USE_CUDA_PATH=/usr/local/cuda-9.0算了，还是安装一下cudnn吧 安装 cudnn7.0 https://developer.nvidia.com/rdp/cudnn-archive 下载cuDNN Libraries for Linux,不要下载 Power 8 把下载好的包上传到FTP服务器 cd到包位置 cp cudnn-9.0-linux-x64-v7.solitairetheme8 cudnn-9.0-linux-x64-v7.tgz tar -xvf cudnn-9.0-linux-x64-v7.tgz cp include/* /usr/local/cuda-9.0/include cp lib64/* /usr/local/cuda-9.0/lib64 chmod a+r /usr/local/cuda-9.0/include/cudnn.h /usr/local/cuda-9.0/lib64/libcudnn* export PATH=/usr/local/cuda-9.0/bin:$PATH cd到/usr/local/cuda-9.0/lib64 nano ~/.bashrc,关联环境变量 在最后一行加入export LD_LIBRARY_PATH=/home/cuda/lib64:$LD_LIBRARY_PATH source ~/.bashrc ldconfig -v 使用cat /usr/local/cuda-9.0/include/cudnn.h | grep CUDNN_MAJOR -A 2 查看cudnn版本 安装 OpenCV 使用pkg-config opencv --modversion查看 发现已经有OpenCV 安装 OpenBLAS apt-get install libopenblas-dev 编译 Mxnetmake USE_CUDA_PATH=/usr/local/cuda-9.0 心好累,总共make了将近两个半小时 编译c++文件bash scripts/compile.sh这一步一定要在/SNIPER/文件夹下,不然贼坑,绝对不要cd到/SNIPER/scripts文件夹下再bash compile.sh,因为代码内有cd lib/nms等,如果不在/SNIPER文件夹下,会找不到文件 如果出现syntax error near unexpected token$’\r’’错误,可以使用sed命令将\r去掉,或者是在[Github](https://github.com/mahyarnajibi/SNIPER/blob/master/scripts/compile.sh)上将代码复制,使用nano编辑然后粘贴 ![](./create-sniper-docker-image/Snipaste_2019-01-03_16-32-08.png) 可以使用cat -v [filename]查看 ![]./create-sniper-docker-image/Snipaste_2019-01-03_16-33-27.png) 以^M结尾的代表你所处理的文件换行符是dos格式的“\r\n”` 我选择第二种笨方法,因为涉及的代码并不多 执行结果: 安装 dos2unix由于发现这种简单的复制粘贴方式并不能很好的解决,所以查了一些相关资料选择使用dos2unix来转换 apt-get install dos2unix dos2unix [filename] 问题解决啦 安装依赖在/SNIPER/文件夹下pip install -r requirements.txt一定要确保镜像内可以联网 测试Demo bash download_sniper_detector.sh,download_sniper_detector.sh文件在/SNIPER/scripts文件夹下 cd .. &amp;&amp; python demo.py 运行成功!!! 三 生成镜像 使用exit退出容器 使用docker ps -a查看容器ID 使用docker stop [ID]停止容器 使用docker commit -a &quot;作者信息&quot; -m &quot;附带信息&quot; [ID] [name]:[tag]生成镜像,会返回一个sha256开头的长ID,这个就是生成的镜像ID 使用docker images查看生成的镜像 如果需要的话,使用docker push [name]:[tag]将刚刚生成的镜像推送到云上 四 压缩镜像压缩镜像非常麻烦,但是也是有方法的,目前大概三种方法 使用Dockerfile生成镜像 这种方法需要让容器在运行状态,使用docker export [ID] | docker import - [name]:[tag]导出容器快照,并从快照生成镜像,这种方式可以大大压缩镜像,但是缺点是有可能会使得镜像中的环境变量、开放端口、默认进入命令改变或消失.使用这种方式时,最好在生成镜像之后,创建一个Dockerfile文件,From这个镜像,并添加端口和命令入口 使用docker-squash压缩镜像,这个方法适用于Linux和Mac系统 目前可以运行的镜像是13.6Ghub.hoc.ccshu.net/wjs/sniper:v1.1现在要对它进行压缩 第一步,移除镜像内的SNIPER文件夹,把其放到FTP服务器上去 开启一个容器docker run -itd --name [name] [id] 复制容器内文件到本地docker cp [长ID]:[容器内路径] [本地路径],将放置在本地的文件夹上传至FTP服务器 进入容器docker exec -it [name] /bin/bash 删除容器内文件夹/SNIPER/,使用rm -rf SNIPER,一定要小心使用 退出容器exit 第二步,压缩镜像压缩容器docker export [ID] | docker import - [name]:[tag] 可以看到,镜像体积少了大约2个G 由于使用这种方法会使得镜像丢失部分信息,所以,创建一个新的Dockerfile,在其中添加缺失的信息 第三步,完善镜像在任意位置新建Dockerfile输入123FROM [name]:[tag]EXPOSE 22ENTRYPOINT [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;] 然后docker build -t [name]:[tag] .,不要忘了最后的. 第四步 Pushdocker push [name]:[tag] 至此,所有配置以及完成镜像在hoc.hoc.ccshu.net的私有仓库里SNIPER文件夹放置在机器学习平台服务器mount的目录里 五 测试 在平台上创建容器 耐心等待创建完成 创建成功 测试结果测试失败 但是,使用未压缩的镜像测试成功]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mxnet</tag>
        <tag>sniper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令学习记录]]></title>
    <url>%2FGit-learn.html</url>
    <content type="text"><![CDATA[本文记录了使用Git过程中一些常用的、复杂的命令。 删除远程仓库的文件,保留本地的文件 123git rm -r /path/to/filenamegit commit -m &quot;msg&quot;git push 删除远程仓库的文件,同时删除本地文件 123git rm /path/to/filenamegit commit -m &quot;msg&quot;git push 查看本地所有分支 1git branch -a 查看本地分支 1git branch 切换分支 1git checkout [branchname] 查看各个分支当前所指的对象 1git log --oneline --decorate 如果我同一项目有两个不同的版本，怎么切换某一版本到master分支呢？比如说我有两个分支名字为A和B，目前默认master分支指向A，现在我想把master切换至B，该怎么做呢？ 123456git branch -m master A把当前的master分支内容放置分支Agit branch -m B master将分支B重命名为mastergit push -f origin master更新master分支 如果在本地git仓库下有另外一个clone过来的git仓库，那么当使用git add .，然后再git commit ...时会报错。并且上传到仓库的文件夹是空的，解决方案如下： cd到clone的仓库目录下，执行rd /s/q .git命令，删除clone的仓库目录下的.git文件夹 回到仓库根目录删除仓库中的空文件夹 2.1 git rm -r --cached &quot;themes/[branchname]&quot; 2.2 git commit -m &quot;remove empty folder&quot; 2.3 git push origin master 在仓库根目录重新提交代码 3.1 git add . 3.2 git commit -m &quot;repush&quot; 3.3 git push origin master]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown基本语法]]></title>
    <url>%2FMarkDown-Grammar.html</url>
    <content type="text"><![CDATA[本文介绍了Markdown的基本语法。 所有使用Markdown语法标记的符号后要加一个空格Space 一、 标题 {#…}使用#来设置标题级数,一个#则代表一级标题,字体大小最大 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题二、 列表1. 无序列表使用-、+、*三个符号都可以 使用- 使用+ 使用* 如果在列表中想取消下一行的列表性质,需要按下退格Backspace删除列表前的圆点后,然后按Shift+Tab组合键来退回首位. 一级列表 二级列表 三级列表 四级列表 共有三级标题 2. 有序列表数字加点加空格,如1.[Space]、2.[Space] 需要往前挪动请按Tab键,往后挪动请按Shift+Tab组合键 第一级 第二级 第二级第一小节 第二级第二小节 第二级第二小节第一小小节 第二级第二小节第二小小节 第二级第三小节 第三级 三、 字体 斜体 用法:*[内容]*或_[内容]_,包含在两个*星号或两个_下划线中间的内容会倾斜 *Hello World*:Hello World _Hello World_:_Hello World_ 加粗 用法:**[内容]**,包含在四个*星号中间的内容会加粗 **Hello World**:Hello World 斜体加粗 用法:***[内容]***,包含在六个*星号中间的内容会加粗并斜体 ***Hello World***:Hello World 删除线 用法:~~[内容]~~,包含在四个~波浪号中间的内容会添加删除线 ~~Hello World~~:Hello World 四、 引用&gt;表示引用,与#用法相同 &gt; 一级引用 &gt;&gt; 二级引用 &gt;&gt;&gt; 三级引用 退格使用Shift+Tab 五、 分割线大于等于三个的-或+或* --- +++ +++ *** 六、 图片语法:![图片文字](图片地址 &quot;鼠标放置时显示的信息&quot;) 例子: ![大桥](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546072097132&amp;di=8669a22f7be9af8266cb1580d15c155d&amp;imgtype=0&amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F63d9f2d3572c11dfea8f528e6e2762d0f603c2c5.jpg &quot;美丽的桥梁&quot;) 七、 超链接语法:[超链接名](超链接地址 &quot;鼠标放置时显示的信息&quot;) 例子:[百度一下,你就知道](www.baidu.com &quot;我就是百度&quot;) 百度一下,你就知道 八、 代码1. 单行使用&#96;反引号包裹 2.多行,代码块使用三个反引号包裹 &#96;&#96;&#96; 使用&#96;&#96;&#96;+编程语言可以打开代码编辑器 如 &#96;&#96;&#96;+python 12import sys这是一个python语法的编译器 九、 表格每一行都使用|隔开 第二行使用:设置对齐,两边都加表示文字居中,加在左边表示居左 123|标题1|标题2|标题3||-|:-:|:-||1|2|3| 标题1 标题2 标题3 1 2 3 十、 流程图123456789​```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op​ 123456789```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下右键新建.md文件教程]]></title>
    <url>%2Fwin-rightclick-create-md.html</url>
    <content type="text"><![CDATA[原本创建.md文件需要首先打开markdown文本编辑器，如Typora，或者新建.txt文件然后修改后缀名，本文介绍了如何在Windows操作系统中添加右键创建.md文件的方法。 环境windows10操作系统Typora编辑器 效果图 步骤1. 打开注册表 CMD+R，打开运行对话框 输入regedit，打开注册表编辑器 2. 修改注册表 在计算机&gt;HKEY_CLASSES_ROOT右键查找，输入Typora，勾选项，取消勾选值和数据 确认运行的程序名字，我的电脑如图所示，运行文件是Typora.exe 如果使用的是markdownpad或者其他编辑器，同理 在磁盘任意位置新建一个文件，后缀为.reg 打开编辑刚刚创建好的注册表文件，写入一下内容：1234567Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\.md]@=&quot;Typora.exe&quot;[HKEY_CLASSES_ROOT\.md\ShellNew]&quot;NullFile&quot;=&quot;&quot;[HKEY_CLASSES_ROOT\Typora.exe]@=&quot;Markdown&quot; @=&quot;Typora.exe&quot; 代表的是指定.md文件的运行程序@=&quot;Markdown&quot; 代表的是右键时默认的文件名字，这样写新建为新建Markdown.md文件，而且右键菜单中显示MarkDown 编辑好之后,另存为,设置如图所示: 文件名可以随便设置，但是后缀必须是.reg文件,保存类型一定要是文本文档(*.txt),编码选择Unicode,非常重要!!!!! 保存文件后,双击运行,修改注册表即可,现在右键即可达到预期效果,如果不行,请重启一下. 3. 编辑新建图标(非必须) 以Typora为例,在注册表Typora.exe下点击项DefaultIcon,右键修改 将属性修改为想要设置的Markdown文件图标 文档有错或转载请联系邮箱stepneverstop@qq.com]]></content>
      <categories>
        <category>小知识</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
